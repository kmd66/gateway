using System;
using Kama.DatabaseModel;
using System.Threading.Tasks;
 using System.Collections.Generic;

namespace Kama.ApiManagement.Infrastructure.DAL
{
public class ATU: Database
{
#region Constructors
public ATU(string connectionString)
	:base(connectionString){}

public ATU(string connectionString, IModelValueBinder modelValueBinder)
	:base(connectionString, modelValueBinder){}
#endregion

#region UpdateRefreshTokensExpireDate

public System.Data.SqlClient.SqlCommand GetCommand_UpdateRefreshTokensExpireDate(Guid? _id, DateTime? _expireDate, string _ssoTicket, int? timeout = null)
{
var cmd = base.CreateCommand("atu.spUpdateRefreshTokensExpireDate", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AExpireDate", IsOutput = false, Value = _expireDate == null ? DBNull.Value : (object)_expireDate }, 
					new Parameter { Name = "@ASsoTicket", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ssoTicket) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ssoTicket) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UpdateRefreshTokensExpireDateAsync(Guid? _id, DateTime? _expireDate, string _ssoTicket, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateRefreshTokensExpireDate(_id, _expireDate, _ssoTicket, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UpdateRefreshTokensExpireDateDapperAsync<T>(Guid? _id, DateTime? _expireDate, string _ssoTicket, int? timeout = null)
{
	return await  DapperQueryAsync<T>("atu.spUpdateRefreshTokensExpireDate",new {AID=_id,AExpireDate=_expireDate,ASsoTicket=string.IsNullOrWhiteSpace(_ssoTicket) ? _ssoTicket : ReplaceArabicWithPersianChars(_ssoTicket)} , timeout );
}

public ResultSet UpdateRefreshTokensExpireDate(Guid? _id, DateTime? _expireDate, string _ssoTicket, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateRefreshTokensExpireDate(_id, _expireDate, _ssoTicket, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ActiveToken

public System.Data.SqlClient.SqlCommand GetCommand_ActiveToken(Guid? _userID, int? timeout = null)
{
var cmd = base.CreateCommand("atu.spActiveToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ActiveTokenAsync(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_ActiveToken(_userID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ActiveTokenDapperAsync<T>(Guid? _userID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("atu.spActiveToken",new {AUserID=_userID} , timeout );
}

public ResultSet ActiveToken(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_ActiveToken(_userID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region LogoutByRefreshTokenID

public System.Data.SqlClient.SqlCommand GetCommand_LogoutByRefreshTokenID(Guid? _refreshTokenID, Guid? _userID, bool? _undoOnlyApp, int? timeout = null)
{
var cmd = base.CreateCommand("atu.spLogoutByRefreshTokenID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ARefreshTokenID", IsOutput = false, Value = _refreshTokenID == null ? DBNull.Value : (object)_refreshTokenID }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AUndoOnlyApp", IsOutput = false, Value = _undoOnlyApp == null ? DBNull.Value : (object)_undoOnlyApp }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> LogoutByRefreshTokenIDAsync(Guid? _refreshTokenID, Guid? _userID, bool? _undoOnlyApp, int? timeout = null)
{
	using(var cmd = GetCommand_LogoutByRefreshTokenID(_refreshTokenID, _userID, _undoOnlyApp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> LogoutByRefreshTokenIDDapperAsync<T>(Guid? _refreshTokenID, Guid? _userID, bool? _undoOnlyApp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("atu.spLogoutByRefreshTokenID",new {ARefreshTokenID=_refreshTokenID,AUserID=_userID,AUndoOnlyApp=_undoOnlyApp} , timeout );
}

public ResultSet LogoutByRefreshTokenID(Guid? _refreshTokenID, Guid? _userID, bool? _undoOnlyApp, int? timeout = null)
{
	using(var cmd = GetCommand_LogoutByRefreshTokenID(_refreshTokenID, _userID, _undoOnlyApp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region AddIssuedToken

public System.Data.SqlClient.SqlCommand GetCommand_AddIssuedToken(Guid? _id, Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
var cmd = base.CreateCommand("atu.spAddIssuedToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ARefreshTokenID", IsOutput = false, Value = _refreshTokenID == null ? DBNull.Value : (object)_refreshTokenID }, 
					new Parameter { Name = "@AClientID", IsOutput = false, Value = _clientID == null ? DBNull.Value : (object)_clientID }, 
					new Parameter { Name = "@AIssuedDate", IsOutput = false, Value = _issuedDate == null ? DBNull.Value : (object)_issuedDate }, 
					new Parameter { Name = "@AExpireDate", IsOutput = false, Value = _expireDate == null ? DBNull.Value : (object)_expireDate }, 
					new Parameter { Name = "@AToken", IsOutput = false, Value = string.IsNullOrWhiteSpace(_token) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_token) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> AddIssuedTokenAsync(Guid? _id, Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
	using(var cmd = GetCommand_AddIssuedToken(_id, _userID, _refreshTokenID, _clientID, _issuedDate, _expireDate, _token, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> AddIssuedTokenDapperAsync<T>(Guid? _id, Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
	return await  DapperQueryAsync<T>("atu.spAddIssuedToken",new {AID=_id,AUserID=_userID,ARefreshTokenID=_refreshTokenID,AClientID=_clientID,AIssuedDate=_issuedDate,AExpireDate=_expireDate,AToken=string.IsNullOrWhiteSpace(_token) ? _token : ReplaceArabicWithPersianChars(_token)} , timeout );
}

public ResultSet AddIssuedToken(Guid? _id, Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
	using(var cmd = GetCommand_AddIssuedToken(_id, _userID, _refreshTokenID, _clientID, _issuedDate, _expireDate, _token, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region AddRefreshToken

public System.Data.SqlClient.SqlCommand GetCommand_AddRefreshToken(Guid? _id, Guid? _userID, DateTime? _issuedDate, DateTime? _expireDate, string _protectedTicket, string _ssoTicket, short? _os, string _oSVersion, short? _browser, string _browserVersion, short? _deviceType, int? timeout = null)
{
var cmd = base.CreateCommand("atu.spAddRefreshToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AIssuedDate", IsOutput = false, Value = _issuedDate == null ? DBNull.Value : (object)_issuedDate }, 
					new Parameter { Name = "@AExpireDate", IsOutput = false, Value = _expireDate == null ? DBNull.Value : (object)_expireDate }, 
					new Parameter { Name = "@AProtectedTicket", IsOutput = false, Value = string.IsNullOrWhiteSpace(_protectedTicket) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_protectedTicket) }, 
					new Parameter { Name = "@ASsoTicket", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ssoTicket) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ssoTicket) }, 
					new Parameter { Name = "@AOS", IsOutput = false, Value = _os == null ? DBNull.Value : (object)_os }, 
					new Parameter { Name = "@AOSVersion", IsOutput = false, Value = string.IsNullOrWhiteSpace(_oSVersion) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_oSVersion) }, 
					new Parameter { Name = "@ABrowser", IsOutput = false, Value = _browser == null ? DBNull.Value : (object)_browser }, 
					new Parameter { Name = "@ABrowserVersion", IsOutput = false, Value = string.IsNullOrWhiteSpace(_browserVersion) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_browserVersion) }, 
					new Parameter { Name = "@ADeviceType", IsOutput = false, Value = _deviceType == null ? DBNull.Value : (object)_deviceType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> AddRefreshTokenAsync(Guid? _id, Guid? _userID, DateTime? _issuedDate, DateTime? _expireDate, string _protectedTicket, string _ssoTicket, short? _os, string _oSVersion, short? _browser, string _browserVersion, short? _deviceType, int? timeout = null)
{
	using(var cmd = GetCommand_AddRefreshToken(_id, _userID, _issuedDate, _expireDate, _protectedTicket, _ssoTicket, _os, _oSVersion, _browser, _browserVersion, _deviceType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> AddRefreshTokenDapperAsync<T>(Guid? _id, Guid? _userID, DateTime? _issuedDate, DateTime? _expireDate, string _protectedTicket, string _ssoTicket, short? _os, string _oSVersion, short? _browser, string _browserVersion, short? _deviceType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("atu.spAddRefreshToken",new {AID=_id,AUserID=_userID,AIssuedDate=_issuedDate,AExpireDate=_expireDate,AProtectedTicket=string.IsNullOrWhiteSpace(_protectedTicket) ? _protectedTicket : ReplaceArabicWithPersianChars(_protectedTicket),ASsoTicket=string.IsNullOrWhiteSpace(_ssoTicket) ? _ssoTicket : ReplaceArabicWithPersianChars(_ssoTicket),AOS=_os,AOSVersion=string.IsNullOrWhiteSpace(_oSVersion) ? _oSVersion : ReplaceArabicWithPersianChars(_oSVersion),ABrowser=_browser,ABrowserVersion=string.IsNullOrWhiteSpace(_browserVersion) ? _browserVersion : ReplaceArabicWithPersianChars(_browserVersion),ADeviceType=_deviceType} , timeout );
}

public ResultSet AddRefreshToken(Guid? _id, Guid? _userID, DateTime? _issuedDate, DateTime? _expireDate, string _protectedTicket, string _ssoTicket, short? _os, string _oSVersion, short? _browser, string _browserVersion, short? _deviceType, int? timeout = null)
{
	using(var cmd = GetCommand_AddRefreshToken(_id, _userID, _issuedDate, _expireDate, _protectedTicket, _ssoTicket, _os, _oSVersion, _browser, _browserVersion, _deviceType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetRefreshToken

public System.Data.SqlClient.SqlCommand GetCommand_GetRefreshToken(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("atu.spGetRefreshToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetRefreshTokenAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetRefreshToken(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetRefreshTokenDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("atu.spGetRefreshToken",new {AID=_id} , timeout );
}

public ResultSet GetRefreshToken(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetRefreshToken(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIssuedTokenByToken

public System.Data.SqlClient.SqlCommand GetCommand_GetIssuedTokenByToken(string _token, int? timeout = null)
{
var cmd = base.CreateCommand("atu.spGetIssuedTokenByToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AToken", IsOutput = false, Value = string.IsNullOrWhiteSpace(_token) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_token) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIssuedTokenByTokenAsync(string _token, int? timeout = null)
{
	using(var cmd = GetCommand_GetIssuedTokenByToken(_token, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIssuedTokenByTokenDapperAsync<T>(string _token, int? timeout = null)
{
	return await  DapperQueryAsync<T>("atu.spGetIssuedTokenByToken",new {AToken=string.IsNullOrWhiteSpace(_token) ? _token : ReplaceArabicWithPersianChars(_token)} , timeout );
}

public ResultSet GetIssuedTokenByToken(string _token, int? timeout = null)
{
	using(var cmd = GetCommand_GetIssuedTokenByToken(_token, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region Logout

public System.Data.SqlClient.SqlCommand GetCommand_Logout(string _token, bool? _undoOnlyApp, int? timeout = null)
{
var cmd = base.CreateCommand("atu.spLogout", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AToken", IsOutput = false, Value = string.IsNullOrWhiteSpace(_token) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_token) }, 
					new Parameter { Name = "@AUndoOnlyApp", IsOutput = false, Value = _undoOnlyApp == null ? DBNull.Value : (object)_undoOnlyApp }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> LogoutAsync(string _token, bool? _undoOnlyApp, int? timeout = null)
{
	using(var cmd = GetCommand_Logout(_token, _undoOnlyApp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> LogoutDapperAsync<T>(string _token, bool? _undoOnlyApp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("atu.spLogout",new {AToken=string.IsNullOrWhiteSpace(_token) ? _token : ReplaceArabicWithPersianChars(_token),AUndoOnlyApp=_undoOnlyApp} , timeout );
}

public ResultSet Logout(string _token, bool? _undoOnlyApp, int? timeout = null)
{
	using(var cmd = GetCommand_Logout(_token, _undoOnlyApp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

}

public class ORG: Database
{
#region Constructors
public ORG(string connectionString)
	:base(connectionString){}

public ORG(string connectionString, IModelValueBinder modelValueBinder)
	:base(connectionString, modelValueBinder){}
#endregion

#region GetAssignedApplicationsByPoistionID

public System.Data.SqlClient.SqlCommand GetCommand_GetAssignedApplicationsByPoistionID(Guid? _positionID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetAssignedApplicationsByPoistionID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAssignedApplicationsByPoistionIDAsync(Guid? _positionID, int? timeout = null)
{
	using(var cmd = GetCommand_GetAssignedApplicationsByPoistionID(_positionID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAssignedApplicationsByPoistionIDDapperAsync<T>(Guid? _positionID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetAssignedApplicationsByPoistionID",new {APositionID=_positionID} , timeout );
}

public ResultSet GetAssignedApplicationsByPoistionID(Guid? _positionID, int? timeout = null)
{
	using(var cmd = GetCommand_GetAssignedApplicationsByPoistionID(_positionID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSecurityStampByCellPhone

public System.Data.SqlClient.SqlCommand GetCommand_GetSecurityStampByCellPhone(string _cellPhone, byte? _usageType, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetSecurityStampByCellPhone", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACellPhone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellPhone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellPhone) }, 
					new Parameter { Name = "@AUsageType", IsOutput = false, Value = _usageType == null ? DBNull.Value : (object)_usageType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSecurityStampByCellPhoneAsync(string _cellPhone, byte? _usageType, int? timeout = null)
{
	using(var cmd = GetCommand_GetSecurityStampByCellPhone(_cellPhone, _usageType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSecurityStampByCellPhoneDapperAsync<T>(string _cellPhone, byte? _usageType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetSecurityStampByCellPhone",new {ACellPhone=string.IsNullOrWhiteSpace(_cellPhone) ? _cellPhone : ReplaceArabicWithPersianChars(_cellPhone),AUsageType=_usageType} , timeout );
}

public ResultSet GetSecurityStampByCellPhone(string _cellPhone, byte? _usageType, int? timeout = null)
{
	using(var cmd = GetCommand_GetSecurityStampByCellPhone(_cellPhone, _usageType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteBudgetCodeAssignment

public System.Data.SqlClient.SqlCommand GetCommand_DeleteBudgetCodeAssignment(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteBudgetCodeAssignment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteBudgetCodeAssignmentAsync(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteBudgetCodeAssignment(_id, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteBudgetCodeAssignmentDapperAsync<T>(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteBudgetCodeAssignment",new {AID=_id,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet DeleteBudgetCodeAssignment(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteBudgetCodeAssignment(_id, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNeededIndividualsForSacrificialInquiry

public System.Data.SqlClient.SqlCommand GetCommand_GetNeededIndividualsForSacrificialInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetNeededIndividualsForSacrificialInquiry", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNeededIndividualsForSacrificialInquiryAsync(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForSacrificialInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNeededIndividualsForSacrificialInquiryDapperAsync<T>(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetNeededIndividualsForSacrificialInquiry",new {APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNeededIndividualsForSacrificialInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForSacrificialInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserCellphone

public System.Data.SqlClient.SqlCommand GetCommand_GetUserCellphone(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserCellphone", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserCellphoneAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserCellphone(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserCellphoneDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserCellphone",new {AID=_id} , timeout );
}

public ResultSet GetUserCellphone(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserCellphone(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetBudgetCodeAssignment

public System.Data.SqlClient.SqlCommand GetCommand_GetBudgetCodeAssignment(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetBudgetCodeAssignment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetBudgetCodeAssignmentAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetBudgetCodeAssignment(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetBudgetCodeAssignmentDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetBudgetCodeAssignment",new {AID=_id} , timeout );
}

public ResultSet GetBudgetCodeAssignment(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetBudgetCodeAssignment(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyBugetCodeAssignment

public System.Data.SqlClient.SqlCommand GetCommand_ModifyBugetCodeAssignment(bool? _isNewRecord, Guid? _id, Guid? _positionSubTypeID, Guid? _departmentBudgetID, Guid? _applicationID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyBugetCodeAssignment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@APositionSubTypeID", IsOutput = false, Value = _positionSubTypeID == null ? DBNull.Value : (object)_positionSubTypeID }, 
					new Parameter { Name = "@ADepartmentBudgetID", IsOutput = false, Value = _departmentBudgetID == null ? DBNull.Value : (object)_departmentBudgetID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyBugetCodeAssignmentAsync(bool? _isNewRecord, Guid? _id, Guid? _positionSubTypeID, Guid? _departmentBudgetID, Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyBugetCodeAssignment(_isNewRecord, _id, _positionSubTypeID, _departmentBudgetID, _applicationID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyBugetCodeAssignmentDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _positionSubTypeID, Guid? _departmentBudgetID, Guid? _applicationID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyBugetCodeAssignment",new {AIsNewRecord=_isNewRecord,AID=_id,APositionSubTypeID=_positionSubTypeID,ADepartmentBudgetID=_departmentBudgetID,AApplicationID=_applicationID} , timeout );
}

public ResultSet ModifyBugetCodeAssignment(bool? _isNewRecord, Guid? _id, Guid? _positionSubTypeID, Guid? _departmentBudgetID, Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyBugetCodeAssignment(_isNewRecord, _id, _positionSubTypeID, _departmentBudgetID, _applicationID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetMasterPasswords

public System.Data.SqlClient.SqlCommand GetCommand_GetMasterPasswords(Guid? _userID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetMasterPasswords", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetMasterPasswordsAsync(Guid? _userID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetMasterPasswords(_userID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetMasterPasswordsDapperAsync<T>(Guid? _userID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetMasterPasswords",new {AUserID=_userID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetMasterPasswords(Guid? _userID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetMasterPasswords(_userID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPlaces

public System.Data.SqlClient.SqlCommand GetCommand_GetPlaces(string _iDs, Guid? _parentID, byte? _type, int? _ancestorLevel, string _name, byte? _developmentType, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPlaces", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_iDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_iDs) }, 
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@AAncestorLevel", IsOutput = false, Value = _ancestorLevel == null ? DBNull.Value : (object)_ancestorLevel }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ADevelopmentType", IsOutput = false, Value = _developmentType == null ? DBNull.Value : (object)_developmentType }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPlacesAsync(string _iDs, Guid? _parentID, byte? _type, int? _ancestorLevel, string _name, byte? _developmentType, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetPlaces(_iDs, _parentID, _type, _ancestorLevel, _name, _developmentType, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPlacesDapperAsync<T>(string _iDs, Guid? _parentID, byte? _type, int? _ancestorLevel, string _name, byte? _developmentType, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPlaces",new {AIDs=string.IsNullOrWhiteSpace(_iDs) ? _iDs : ReplaceArabicWithPersianChars(_iDs),AParentID=_parentID,AType=_type,AAncestorLevel=_ancestorLevel,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ADevelopmentType=_developmentType,APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetPlaces(string _iDs, Guid? _parentID, byte? _type, int? _ancestorLevel, string _name, byte? _developmentType, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetPlaces(_iDs, _parentID, _type, _ancestorLevel, _name, _developmentType, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region CreateCaptcha

public System.Data.SqlClient.SqlCommand GetCommand_CreateCaptcha(Guid? _id, string _text, byte? _type, int? timeout = null)
{
var cmd = base.CreateCommand("org.spCreateCaptcha", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AText", IsOutput = false, Value = string.IsNullOrWhiteSpace(_text) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_text) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> CreateCaptchaAsync(Guid? _id, string _text, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_CreateCaptcha(_id, _text, _type, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> CreateCaptchaDapperAsync<T>(Guid? _id, string _text, byte? _type, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spCreateCaptcha",new {AID=_id,AText=string.IsNullOrWhiteSpace(_text) ? _text : ReplaceArabicWithPersianChars(_text),AType=_type} , timeout );
}

public ResultSet CreateCaptcha(Guid? _id, string _text, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_CreateCaptcha(_id, _text, _type, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetMasterPassword

public System.Data.SqlClient.SqlCommand GetCommand_GetMasterPassword(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetMasterPassword", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetMasterPasswordAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetMasterPassword(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetMasterPasswordDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetMasterPassword",new {AID=_id} , timeout );
}

public ResultSet GetMasterPassword(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetMasterPassword(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyPushWebServiceUser

public System.Data.SqlClient.SqlCommand GetCommand_ModifyPushWebServiceUser(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _departmentID, bool? _enable, string _url, string _comment, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyPushWebServiceUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AEnable", IsOutput = false, Value = _enable == null ? DBNull.Value : (object)_enable }, 
					new Parameter { Name = "@AUrl", IsOutput = false, Value = string.IsNullOrWhiteSpace(_url) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_url) }, 
					new Parameter { Name = "@AComment", IsOutput = false, Value = string.IsNullOrWhiteSpace(_comment) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_comment) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyPushWebServiceUserAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _departmentID, bool? _enable, string _url, string _comment, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPushWebServiceUser(_isNewRecord, _id, _applicationID, _departmentID, _enable, _url, _comment, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyPushWebServiceUserDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _departmentID, bool? _enable, string _url, string _comment, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyPushWebServiceUser",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,ADepartmentID=_departmentID,AEnable=_enable,AUrl=string.IsNullOrWhiteSpace(_url) ? _url : ReplaceArabicWithPersianChars(_url),AComment=string.IsNullOrWhiteSpace(_comment) ? _comment : ReplaceArabicWithPersianChars(_comment)} , timeout );
}

public ResultSet ModifyPushWebServiceUser(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _departmentID, bool? _enable, string _url, string _comment, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPushWebServiceUser(_isNewRecord, _id, _applicationID, _departmentID, _enable, _url, _comment, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteCaptcha

public System.Data.SqlClient.SqlCommand GetCommand_DeleteCaptcha(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteCaptcha", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteCaptchaAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteCaptcha(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteCaptchaDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteCaptcha",new {AID=_id} , timeout );
}

public ResultSet DeleteCaptcha(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteCaptcha(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region AddNewCallBackUrl

public System.Data.SqlClient.SqlCommand GetCommand_AddNewCallBackUrl(string _callBackUrl, Guid? _applicationID, Guid? _client, bool? _getType, int? timeout = null)
{
var cmd = base.CreateCommand("org.spAddNewCallBackUrl", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACallBackUrl", IsOutput = false, Value = string.IsNullOrWhiteSpace(_callBackUrl) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_callBackUrl) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AClient", IsOutput = false, Value = _client == null ? DBNull.Value : (object)_client }, 
					new Parameter { Name = "@AGetType", IsOutput = false, Value = _getType == null ? DBNull.Value : (object)_getType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> AddNewCallBackUrlAsync(string _callBackUrl, Guid? _applicationID, Guid? _client, bool? _getType, int? timeout = null)
{
	using(var cmd = GetCommand_AddNewCallBackUrl(_callBackUrl, _applicationID, _client, _getType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> AddNewCallBackUrlDapperAsync<T>(string _callBackUrl, Guid? _applicationID, Guid? _client, bool? _getType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spAddNewCallBackUrl",new {ACallBackUrl=string.IsNullOrWhiteSpace(_callBackUrl) ? _callBackUrl : ReplaceArabicWithPersianChars(_callBackUrl),AApplicationID=_applicationID,AClient=_client,AGetType=_getType} , timeout );
}

public ResultSet AddNewCallBackUrl(string _callBackUrl, Guid? _applicationID, Guid? _client, bool? _getType, int? timeout = null)
{
	using(var cmd = GetCommand_AddNewCallBackUrl(_callBackUrl, _applicationID, _client, _getType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPrivateDepartmentsSummary

public System.Data.SqlClient.SqlCommand GetCommand_GetPrivateDepartmentsSummary(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, string _systemEnablements, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _noLoadTestDepartment, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPrivateDepartmentsSummary", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AProvinceID", IsOutput = false, Value = _provinceID == null ? DBNull.Value : (object)_provinceID }, 
					new Parameter { Name = "@AUnitType", IsOutput = false, Value = _unitType == null ? DBNull.Value : (object)_unitType }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ATypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_types) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_types) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@ASubType", IsOutput = false, Value = _subType == null ? DBNull.Value : (object)_subType }, 
					new Parameter { Name = "@ACouncilType", IsOutput = false, Value = _councilType == null ? DBNull.Value : (object)_councilType }, 
					new Parameter { Name = "@AOrganType", IsOutput = false, Value = _organType == null ? DBNull.Value : (object)_organType }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@ABudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_budgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_budgetCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ACodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_codes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_codes) }, 
					new Parameter { Name = "@ACOFOG", IsOutput = false, Value = _cOFOG == null ? DBNull.Value : (object)_cOFOG }, 
					new Parameter { Name = "@ALevel", IsOutput = false, Value = _level == null ? DBNull.Value : (object)_level }, 
					new Parameter { Name = "@ALoadLabel", IsOutput = false, Value = _loadLabel == null ? DBNull.Value : (object)_loadLabel }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ANeedsChartType", IsOutput = false, Value = _needsChartType == null ? DBNull.Value : (object)_needsChartType }, 
					new Parameter { Name = "@AWebServiceSaveType", IsOutput = false, Value = _webServiceSaveType == null ? DBNull.Value : (object)_webServiceSaveType }, 
					new Parameter { Name = "@ASystemEnablements", IsOutput = false, Value = string.IsNullOrWhiteSpace(_systemEnablements) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_systemEnablements) }, 
					new Parameter { Name = "@AMainOrganType", IsOutput = false, Value = _mainOrganType == null ? DBNull.Value : (object)_mainOrganType }, 
					new Parameter { Name = "@AElaboratedBudgetType", IsOutput = false, Value = _elaboratedBudgetType == null ? DBNull.Value : (object)_elaboratedBudgetType }, 
					new Parameter { Name = "@ATreasurySupervisionType", IsOutput = false, Value = _treasurySupervisionType == null ? DBNull.Value : (object)_treasurySupervisionType }, 
					new Parameter { Name = "@AUserDefinitionReferenceType", IsOutput = false, Value = _userDefinitionReferenceType == null ? DBNull.Value : (object)_userDefinitionReferenceType }, 
					new Parameter { Name = "@ABoardOfTrusteesType", IsOutput = false, Value = _boardOfTrusteesType == null ? DBNull.Value : (object)_boardOfTrusteesType }, 
					new Parameter { Name = "@AArrangementTypeInSalary", IsOutput = false, Value = _arrangementTypeInSalary == null ? DBNull.Value : (object)_arrangementTypeInSalary }, 
					new Parameter { Name = "@ABriefNameType", IsOutput = false, Value = _briefNameType == null ? DBNull.Value : (object)_briefNameType }, 
					new Parameter { Name = "@ADepartmentShowType", IsOutput = false, Value = _departmentShowType == null ? DBNull.Value : (object)_departmentShowType }, 
					new Parameter { Name = "@AUserDefinitionReferenceTypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes) }, 
					new Parameter { Name = "@AIsDiscludedInPakna", IsOutput = false, Value = _isDiscludedInPakna == null ? DBNull.Value : (object)_isDiscludedInPakna }, 
					new Parameter { Name = "@ANoLoadTestDepartment", IsOutput = false, Value = _noLoadTestDepartment == null ? DBNull.Value : (object)_noLoadTestDepartment }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPrivateDepartmentsSummaryAsync(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, string _systemEnablements, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _noLoadTestDepartment, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetPrivateDepartmentsSummary(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _codes, _cOFOG, _level, _loadLabel, _nationalCode, _needsChartType, _webServiceSaveType, _systemEnablements, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _userDefinitionReferenceTypes, _isDiscludedInPakna, _noLoadTestDepartment, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPrivateDepartmentsSummaryDapperAsync<T>(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, string _systemEnablements, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _noLoadTestDepartment, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPrivateDepartmentsSummary",new {AParentID=_parentID,AProvinceID=_provinceID,AUnitType=_unitType,AType=_type,ATypes=string.IsNullOrWhiteSpace(_types) ? _types : ReplaceArabicWithPersianChars(_types),AEnabled=_enabled,ASubType=_subType,ACouncilType=_councilType,AOrganType=_organType,ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),ABudgetCode=string.IsNullOrWhiteSpace(_budgetCode) ? _budgetCode : ReplaceArabicWithPersianChars(_budgetCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ACodes=string.IsNullOrWhiteSpace(_codes) ? _codes : ReplaceArabicWithPersianChars(_codes),ACOFOG=_cOFOG,ALevel=_level,ALoadLabel=_loadLabel,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ANeedsChartType=_needsChartType,AWebServiceSaveType=_webServiceSaveType,ASystemEnablements=string.IsNullOrWhiteSpace(_systemEnablements) ? _systemEnablements : ReplaceArabicWithPersianChars(_systemEnablements),AMainOrganType=_mainOrganType,AElaboratedBudgetType=_elaboratedBudgetType,ATreasurySupervisionType=_treasurySupervisionType,AUserDefinitionReferenceType=_userDefinitionReferenceType,ABoardOfTrusteesType=_boardOfTrusteesType,AArrangementTypeInSalary=_arrangementTypeInSalary,ABriefNameType=_briefNameType,ADepartmentShowType=_departmentShowType,AUserDefinitionReferenceTypes=string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? _userDefinitionReferenceTypes : ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes),AIsDiscludedInPakna=_isDiscludedInPakna,ANoLoadTestDepartment=_noLoadTestDepartment,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetPrivateDepartmentsSummary(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, string _systemEnablements, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _noLoadTestDepartment, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetPrivateDepartmentsSummary(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _codes, _cOFOG, _level, _loadLabel, _nationalCode, _needsChartType, _webServiceSaveType, _systemEnablements, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _userDefinitionReferenceTypes, _isDiscludedInPakna, _noLoadTestDepartment, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetCaptcha

public System.Data.SqlClient.SqlCommand GetCommand_GetCaptcha(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetCaptcha", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetCaptchaAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetCaptcha(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetCaptchaDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetCaptcha",new {AID=_id} , timeout );
}

public ResultSet GetCaptcha(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetCaptcha(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyDepartmentEnableState

public System.Data.SqlClient.SqlCommand GetCommand_ModifyDepartmentEnableState(Guid? _departmentID, string _enableStates, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyDepartmentEnableState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AEnableStates", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enableStates) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enableStates) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyDepartmentEnableStateAsync(Guid? _departmentID, string _enableStates, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDepartmentEnableState(_departmentID, _enableStates, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyDepartmentEnableStateDapperAsync<T>(Guid? _departmentID, string _enableStates, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyDepartmentEnableState",new {ADepartmentID=_departmentID,AEnableStates=string.IsNullOrWhiteSpace(_enableStates) ? _enableStates : ReplaceArabicWithPersianChars(_enableStates)} , timeout );
}

public ResultSet ModifyDepartmentEnableState(Guid? _departmentID, string _enableStates, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDepartmentEnableState(_departmentID, _enableStates, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyIndividualCellPhone

public System.Data.SqlClient.SqlCommand GetCommand_ModifyIndividualCellPhone(Guid? _id, string _cellPhone, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyIndividualCellPhone", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACellPhone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellPhone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellPhone) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyIndividualCellPhoneAsync(Guid? _id, string _cellPhone, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyIndividualCellPhone(_id, _cellPhone, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyIndividualCellPhoneDapperAsync<T>(Guid? _id, string _cellPhone, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyIndividualCellPhone",new {AID=_id,ACellPhone=string.IsNullOrWhiteSpace(_cellPhone) ? _cellPhone : ReplaceArabicWithPersianChars(_cellPhone)} , timeout );
}

public ResultSet ModifyIndividualCellPhone(Guid? _id, string _cellPhone, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyIndividualCellPhone(_id, _cellPhone, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region CheckSmsLogin

public System.Data.SqlClient.SqlCommand GetCommand_CheckSmsLogin(Guid? _applicationID, Guid? _client, string _userID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spCheckSmsLogin", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AClient", IsOutput = false, Value = _client == null ? DBNull.Value : (object)_client }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userID) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userID) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> CheckSmsLoginAsync(Guid? _applicationID, Guid? _client, string _userID, int? timeout = null)
{
	using(var cmd = GetCommand_CheckSmsLogin(_applicationID, _client, _userID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> CheckSmsLoginDapperAsync<T>(Guid? _applicationID, Guid? _client, string _userID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spCheckSmsLogin",new {AApplicationID=_applicationID,AClient=_client,AUserID=string.IsNullOrWhiteSpace(_userID) ? _userID : ReplaceArabicWithPersianChars(_userID)} , timeout );
}

public ResultSet CheckSmsLogin(Guid? _applicationID, Guid? _client, string _userID, int? timeout = null)
{
	using(var cmd = GetCommand_CheckSmsLogin(_applicationID, _client, _userID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserCellphones

public System.Data.SqlClient.SqlCommand GetCommand_GetUserCellphones(Guid? _userID, string _nationalCode, bool? _onlyActive, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserCellphones", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AOnlyActive", IsOutput = false, Value = _onlyActive == null ? DBNull.Value : (object)_onlyActive }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserCellphonesAsync(Guid? _userID, string _nationalCode, bool? _onlyActive, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserCellphones(_userID, _nationalCode, _onlyActive, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserCellphonesDapperAsync<T>(Guid? _userID, string _nationalCode, bool? _onlyActive, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserCellphones",new {AUserID=_userID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AOnlyActive=_onlyActive} , timeout );
}

public ResultSet GetUserCellphones(Guid? _userID, string _nationalCode, bool? _onlyActive, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserCellphones(_userID, _nationalCode, _onlyActive, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteClient

public System.Data.SqlClient.SqlCommand GetCommand_DeleteClient(Guid? _id, Guid? _currentUserID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteClient", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteClientAsync(Guid? _id, Guid? _currentUserID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteClient(_id, _currentUserID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteClientDapperAsync<T>(Guid? _id, Guid? _currentUserID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteClient",new {AID=_id,ACurrentUserID=_currentUserID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteClient(Guid? _id, Guid? _currentUserID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteClient(_id, _currentUserID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region EditListApp

public System.Data.SqlClient.SqlCommand GetCommand_EditListApp(bool? _smsLogin, string _applicationIDS, int? timeout = null)
{
var cmd = base.CreateCommand("org.spEditListApp", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ASmsLogin", IsOutput = false, Value = _smsLogin == null ? DBNull.Value : (object)_smsLogin }, 
					new Parameter { Name = "@AApplicationIDS", IsOutput = false, Value = string.IsNullOrWhiteSpace(_applicationIDS) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_applicationIDS) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> EditListAppAsync(bool? _smsLogin, string _applicationIDS, int? timeout = null)
{
	using(var cmd = GetCommand_EditListApp(_smsLogin, _applicationIDS, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> EditListAppDapperAsync<T>(bool? _smsLogin, string _applicationIDS, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spEditListApp",new {ASmsLogin=_smsLogin,AApplicationIDS=string.IsNullOrWhiteSpace(_applicationIDS) ? _applicationIDS : ReplaceArabicWithPersianChars(_applicationIDS)} , timeout );
}

public ResultSet EditListApp(bool? _smsLogin, string _applicationIDS, int? timeout = null)
{
	using(var cmd = GetCommand_EditListApp(_smsLogin, _applicationIDS, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPrivateDepartments

public System.Data.SqlClient.SqlCommand GetCommand_GetPrivateDepartments(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, string _systemEnablements, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _fetchedWithDeleted, bool? _noLoadTestDepartment, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPrivateDepartments", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AProvinceID", IsOutput = false, Value = _provinceID == null ? DBNull.Value : (object)_provinceID }, 
					new Parameter { Name = "@AUnitType", IsOutput = false, Value = _unitType == null ? DBNull.Value : (object)_unitType }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ATypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_types) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_types) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@ASubType", IsOutput = false, Value = _subType == null ? DBNull.Value : (object)_subType }, 
					new Parameter { Name = "@ACouncilType", IsOutput = false, Value = _councilType == null ? DBNull.Value : (object)_councilType }, 
					new Parameter { Name = "@AOrganType", IsOutput = false, Value = _organType == null ? DBNull.Value : (object)_organType }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@ABudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_budgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_budgetCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ACodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_codes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_codes) }, 
					new Parameter { Name = "@ACOFOG", IsOutput = false, Value = _cOFOG == null ? DBNull.Value : (object)_cOFOG }, 
					new Parameter { Name = "@ALevel", IsOutput = false, Value = _level == null ? DBNull.Value : (object)_level }, 
					new Parameter { Name = "@ALoadLabel", IsOutput = false, Value = _loadLabel == null ? DBNull.Value : (object)_loadLabel }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ANeedsChartType", IsOutput = false, Value = _needsChartType == null ? DBNull.Value : (object)_needsChartType }, 
					new Parameter { Name = "@AWebServiceSaveType", IsOutput = false, Value = _webServiceSaveType == null ? DBNull.Value : (object)_webServiceSaveType }, 
					new Parameter { Name = "@ASystemEnablements", IsOutput = false, Value = string.IsNullOrWhiteSpace(_systemEnablements) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_systemEnablements) }, 
					new Parameter { Name = "@AMainOrganType", IsOutput = false, Value = _mainOrganType == null ? DBNull.Value : (object)_mainOrganType }, 
					new Parameter { Name = "@AElaboratedBudgetType", IsOutput = false, Value = _elaboratedBudgetType == null ? DBNull.Value : (object)_elaboratedBudgetType }, 
					new Parameter { Name = "@ATreasurySupervisionType", IsOutput = false, Value = _treasurySupervisionType == null ? DBNull.Value : (object)_treasurySupervisionType }, 
					new Parameter { Name = "@AUserDefinitionReferenceType", IsOutput = false, Value = _userDefinitionReferenceType == null ? DBNull.Value : (object)_userDefinitionReferenceType }, 
					new Parameter { Name = "@ABoardOfTrusteesType", IsOutput = false, Value = _boardOfTrusteesType == null ? DBNull.Value : (object)_boardOfTrusteesType }, 
					new Parameter { Name = "@AArrangementTypeInSalary", IsOutput = false, Value = _arrangementTypeInSalary == null ? DBNull.Value : (object)_arrangementTypeInSalary }, 
					new Parameter { Name = "@ABriefNameType", IsOutput = false, Value = _briefNameType == null ? DBNull.Value : (object)_briefNameType }, 
					new Parameter { Name = "@ADepartmentShowType", IsOutput = false, Value = _departmentShowType == null ? DBNull.Value : (object)_departmentShowType }, 
					new Parameter { Name = "@AUserDefinitionReferenceTypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes) }, 
					new Parameter { Name = "@AIsDiscludedInPakna", IsOutput = false, Value = _isDiscludedInPakna == null ? DBNull.Value : (object)_isDiscludedInPakna }, 
					new Parameter { Name = "@AFetchedWithDeleted", IsOutput = false, Value = _fetchedWithDeleted == null ? DBNull.Value : (object)_fetchedWithDeleted }, 
					new Parameter { Name = "@ANoLoadTestDepartment", IsOutput = false, Value = _noLoadTestDepartment == null ? DBNull.Value : (object)_noLoadTestDepartment }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPrivateDepartmentsAsync(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, string _systemEnablements, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _fetchedWithDeleted, bool? _noLoadTestDepartment, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetPrivateDepartments(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _codes, _cOFOG, _level, _loadLabel, _nationalCode, _needsChartType, _webServiceSaveType, _systemEnablements, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _userDefinitionReferenceTypes, _isDiscludedInPakna, _fetchedWithDeleted, _noLoadTestDepartment, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPrivateDepartmentsDapperAsync<T>(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, string _systemEnablements, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _fetchedWithDeleted, bool? _noLoadTestDepartment, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPrivateDepartments",new {AParentID=_parentID,AProvinceID=_provinceID,AUnitType=_unitType,AType=_type,ATypes=string.IsNullOrWhiteSpace(_types) ? _types : ReplaceArabicWithPersianChars(_types),AEnabled=_enabled,ASubType=_subType,ACouncilType=_councilType,AOrganType=_organType,ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),ABudgetCode=string.IsNullOrWhiteSpace(_budgetCode) ? _budgetCode : ReplaceArabicWithPersianChars(_budgetCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ACodes=string.IsNullOrWhiteSpace(_codes) ? _codes : ReplaceArabicWithPersianChars(_codes),ACOFOG=_cOFOG,ALevel=_level,ALoadLabel=_loadLabel,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ANeedsChartType=_needsChartType,AWebServiceSaveType=_webServiceSaveType,ASystemEnablements=string.IsNullOrWhiteSpace(_systemEnablements) ? _systemEnablements : ReplaceArabicWithPersianChars(_systemEnablements),AMainOrganType=_mainOrganType,AElaboratedBudgetType=_elaboratedBudgetType,ATreasurySupervisionType=_treasurySupervisionType,AUserDefinitionReferenceType=_userDefinitionReferenceType,ABoardOfTrusteesType=_boardOfTrusteesType,AArrangementTypeInSalary=_arrangementTypeInSalary,ABriefNameType=_briefNameType,ADepartmentShowType=_departmentShowType,AUserDefinitionReferenceTypes=string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? _userDefinitionReferenceTypes : ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes),AIsDiscludedInPakna=_isDiscludedInPakna,AFetchedWithDeleted=_fetchedWithDeleted,ANoLoadTestDepartment=_noLoadTestDepartment,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetPrivateDepartments(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, string _systemEnablements, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _fetchedWithDeleted, bool? _noLoadTestDepartment, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetPrivateDepartments(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _codes, _cOFOG, _level, _loadLabel, _nationalCode, _needsChartType, _webServiceSaveType, _systemEnablements, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _userDefinitionReferenceTypes, _isDiscludedInPakna, _fetchedWithDeleted, _noLoadTestDepartment, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSsoApplication

public System.Data.SqlClient.SqlCommand GetCommand_GetSsoApplication(Guid? _userID, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetSsoApplication", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSsoApplicationAsync(Guid? _userID, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetSsoApplication(_userID, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSsoApplicationDapperAsync<T>(Guid? _userID, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetSsoApplication",new {AUserID=_userID,APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetSsoApplication(Guid? _userID, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetSsoApplication(_userID, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyTextTemplate

public System.Data.SqlClient.SqlCommand GetCommand_ModifyTextTemplate(Guid? _id, Guid? _applicationID, string _name, string _title, string _content, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyTextTemplate", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_content) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_content) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyTextTemplateAsync(Guid? _id, Guid? _applicationID, string _name, string _title, string _content, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyTextTemplate(_id, _applicationID, _name, _title, _content, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyTextTemplateDapperAsync<T>(Guid? _id, Guid? _applicationID, string _name, string _title, string _content, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyTextTemplate",new {AID=_id,AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AContent=string.IsNullOrWhiteSpace(_content) ? _content : ReplaceArabicWithPersianChars(_content),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyTextTemplate(Guid? _id, Guid? _applicationID, string _name, string _title, string _content, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyTextTemplate(_id, _applicationID, _name, _title, _content, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetCommandsByNationalCode

public System.Data.SqlClient.SqlCommand GetCommand_GetCommandsByNationalCode(Guid? _applicationID, string _nationalCode, Guid? _roleID, byte? _positionType, Guid? _commandID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetCommandsByNationalCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ARoleID", IsOutput = false, Value = _roleID == null ? DBNull.Value : (object)_roleID }, 
					new Parameter { Name = "@APositionType", IsOutput = false, Value = _positionType == null ? DBNull.Value : (object)_positionType }, 
					new Parameter { Name = "@ACommandID", IsOutput = false, Value = _commandID == null ? DBNull.Value : (object)_commandID }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetCommandsByNationalCodeAsync(Guid? _applicationID, string _nationalCode, Guid? _roleID, byte? _positionType, Guid? _commandID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetCommandsByNationalCode(_applicationID, _nationalCode, _roleID, _positionType, _commandID, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetCommandsByNationalCodeDapperAsync<T>(Guid? _applicationID, string _nationalCode, Guid? _roleID, byte? _positionType, Guid? _commandID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetCommandsByNationalCode",new {AApplicationID=_applicationID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ARoleID=_roleID,APositionType=_positionType,ACommandID=_commandID,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetCommandsByNationalCode(Guid? _applicationID, string _nationalCode, Guid? _roleID, byte? _positionType, Guid? _commandID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetCommandsByNationalCode(_applicationID, _nationalCode, _roleID, _positionType, _commandID, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteCommand

public System.Data.SqlClient.SqlCommand GetCommand_DeleteCommand(Guid? _id, Guid? _applicationID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteCommand", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteCommandAsync(Guid? _id, Guid? _applicationID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteCommand(_id, _applicationID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteCommandDapperAsync<T>(Guid? _id, Guid? _applicationID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteCommand",new {AID=_id,AApplicationID=_applicationID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteCommand(Guid? _id, Guid? _applicationID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteCommand(_id, _applicationID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplications2

public System.Data.SqlClient.SqlCommand GetCommand_GetApplications2(string _name, bool? _ssoState, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetApplications2", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ASsoState", IsOutput = false, Value = _ssoState == null ? DBNull.Value : (object)_ssoState }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplications2Async(string _name, bool? _ssoState, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplications2(_name, _ssoState, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplications2DapperAsync<T>(string _name, bool? _ssoState, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetApplications2",new {AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ASsoState=_ssoState} , timeout );
}

public ResultSet GetApplications2(string _name, bool? _ssoState, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplications2(_name, _ssoState, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAggregateCommands

public System.Data.SqlClient.SqlCommand GetCommand_GetAggregateCommands(Guid? _applicationID, string _roleIDs, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetAggregateCommands", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ARoleIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_roleIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_roleIDs) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAggregateCommandsAsync(Guid? _applicationID, string _roleIDs, int? timeout = null)
{
	using(var cmd = GetCommand_GetAggregateCommands(_applicationID, _roleIDs, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAggregateCommandsDapperAsync<T>(Guid? _applicationID, string _roleIDs, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetAggregateCommands",new {AApplicationID=_applicationID,ARoleIDs=string.IsNullOrWhiteSpace(_roleIDs) ? _roleIDs : ReplaceArabicWithPersianChars(_roleIDs)} , timeout );
}

public ResultSet GetAggregateCommands(Guid? _applicationID, string _roleIDs, int? timeout = null)
{
	using(var cmd = GetCommand_GetAggregateCommands(_applicationID, _roleIDs, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyToken

public System.Data.SqlClient.SqlCommand GetCommand_ModifyToken(bool? _isNewRecord, Guid? _id, Guid? _userID, Guid? _applicationID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AIssuedDate", IsOutput = false, Value = _issuedDate == null ? DBNull.Value : (object)_issuedDate }, 
					new Parameter { Name = "@AExpireDate", IsOutput = false, Value = _expireDate == null ? DBNull.Value : (object)_expireDate }, 
					new Parameter { Name = "@AToken", IsOutput = false, Value = string.IsNullOrWhiteSpace(_token) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_token) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyTokenAsync(bool? _isNewRecord, Guid? _id, Guid? _userID, Guid? _applicationID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyToken(_isNewRecord, _id, _userID, _applicationID, _issuedDate, _expireDate, _token, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyTokenDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _userID, Guid? _applicationID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyToken",new {AIsNewRecord=_isNewRecord,AID=_id,AUserID=_userID,AApplicationID=_applicationID,AIssuedDate=_issuedDate,AExpireDate=_expireDate,AToken=string.IsNullOrWhiteSpace(_token) ? _token : ReplaceArabicWithPersianChars(_token)} , timeout );
}

public ResultSet ModifyToken(bool? _isNewRecord, Guid? _id, Guid? _userID, Guid? _applicationID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyToken(_isNewRecord, _id, _userID, _applicationID, _issuedDate, _expireDate, _token, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetOutsideSettings

public System.Data.SqlClient.SqlCommand GetCommand_GetOutsideSettings(string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetOutsideSettings", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetOutsideSettingsAsync(string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetOutsideSettings(_sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetOutsideSettingsDapperAsync<T>(string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetOutsideSettings",new {ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetOutsideSettings(string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetOutsideSettings(_sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAssignedApplicationsByPoistionIDs

public System.Data.SqlClient.SqlCommand GetCommand_GetAssignedApplicationsByPoistionIDs(string _positionIDs, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetAssignedApplicationsByPoistionIDs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_positionIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_positionIDs) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAssignedApplicationsByPoistionIDsAsync(string _positionIDs, int? timeout = null)
{
	using(var cmd = GetCommand_GetAssignedApplicationsByPoistionIDs(_positionIDs, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAssignedApplicationsByPoistionIDsDapperAsync<T>(string _positionIDs, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetAssignedApplicationsByPoistionIDs",new {APositionIDs=string.IsNullOrWhiteSpace(_positionIDs) ? _positionIDs : ReplaceArabicWithPersianChars(_positionIDs)} , timeout );
}

public ResultSet GetAssignedApplicationsByPoistionIDs(string _positionIDs, int? timeout = null)
{
	using(var cmd = GetCommand_GetAssignedApplicationsByPoistionIDs(_positionIDs, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region AddUserCellphone

public System.Data.SqlClient.SqlCommand GetCommand_AddUserCellphone(Guid? _id, Guid? _userID, Guid? _individualID, string _cellPhone, string _nationalCode, int? timeout = null)
{
var cmd = base.CreateCommand("org.spAddUserCellphone", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@ACellPhone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellPhone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellPhone) }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> AddUserCellphoneAsync(Guid? _id, Guid? _userID, Guid? _individualID, string _cellPhone, string _nationalCode, int? timeout = null)
{
	using(var cmd = GetCommand_AddUserCellphone(_id, _userID, _individualID, _cellPhone, _nationalCode, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> AddUserCellphoneDapperAsync<T>(Guid? _id, Guid? _userID, Guid? _individualID, string _cellPhone, string _nationalCode, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spAddUserCellphone",new {AID=_id,AUserID=_userID,AIndividualID=_individualID,ACellPhone=string.IsNullOrWhiteSpace(_cellPhone) ? _cellPhone : ReplaceArabicWithPersianChars(_cellPhone),ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode)} , timeout );
}

public ResultSet AddUserCellphone(Guid? _id, Guid? _userID, Guid? _individualID, string _cellPhone, string _nationalCode, int? timeout = null)
{
	using(var cmd = GetCommand_AddUserCellphone(_id, _userID, _individualID, _cellPhone, _nationalCode, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTokens

public System.Data.SqlClient.SqlCommand GetCommand_GetTokens(Guid? _userID, Guid? _applicationID, string _token, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetTokens", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AToken", IsOutput = false, Value = string.IsNullOrWhiteSpace(_token) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_token) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTokensAsync(Guid? _userID, Guid? _applicationID, string _token, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetTokens(_userID, _applicationID, _token, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTokensDapperAsync<T>(Guid? _userID, Guid? _applicationID, string _token, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetTokens",new {AUserID=_userID,AApplicationID=_applicationID,AToken=string.IsNullOrWhiteSpace(_token) ? _token : ReplaceArabicWithPersianChars(_token),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetTokens(Guid? _userID, Guid? _applicationID, string _token, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetTokens(_userID, _applicationID, _token, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetToken

public System.Data.SqlClient.SqlCommand GetCommand_GetToken(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTokenAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetToken(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTokenDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetToken",new {AID=_id} , timeout );
}

public ResultSet GetToken(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetToken(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteTokenByUserID

public System.Data.SqlClient.SqlCommand GetCommand_DeleteTokenByUserID(Guid? _userID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteTokenByUserID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteTokenByUserIDAsync(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteTokenByUserID(_userID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteTokenByUserIDDapperAsync<T>(Guid? _userID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteTokenByUserID",new {AUserID=_userID} , timeout );
}

public ResultSet DeleteTokenByUserID(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteTokenByUserID(_userID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIndividualPostInformation

public System.Data.SqlClient.SqlCommand GetCommand_GetIndividualPostInformation(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetIndividualPostInformation", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIndividualPostInformationAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetIndividualPostInformation(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIndividualPostInformationDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetIndividualPostInformation",new {AID=_id} , timeout );
}

public ResultSet GetIndividualPostInformation(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetIndividualPostInformation(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionTypes123

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionTypes123(Guid? _applicationID, short? _positionType, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionTypes123", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@APositionType", IsOutput = false, Value = _positionType == null ? DBNull.Value : (object)_positionType }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionTypes123Async(Guid? _applicationID, short? _positionType, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionTypes123(_applicationID, _positionType, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionTypes123DapperAsync<T>(Guid? _applicationID, short? _positionType, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionTypes123",new {AApplicationID=_applicationID,APositionType=_positionType,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetPositionTypes123(Guid? _applicationID, short? _positionType, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionTypes123(_applicationID, _positionType, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTextTemplateByCode

public System.Data.SqlClient.SqlCommand GetCommand_GetTextTemplateByCode(int? _code, Guid? _applicationID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetTextTemplateByCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACode", IsOutput = false, Value = _code == null ? DBNull.Value : (object)_code }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTextTemplateByCodeAsync(int? _code, Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_GetTextTemplateByCode(_code, _applicationID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTextTemplateByCodeDapperAsync<T>(int? _code, Guid? _applicationID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetTextTemplateByCode",new {ACode=_code,AApplicationID=_applicationID} , timeout );
}

public ResultSet GetTextTemplateByCode(int? _code, Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_GetTextTemplateByCode(_code, _applicationID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteToken

public System.Data.SqlClient.SqlCommand GetCommand_DeleteToken(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteTokenAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteToken(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteTokenDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteToken",new {AID=_id} , timeout );
}

public ResultSet DeleteToken(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteToken(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteExpiredTokens

public System.Data.SqlClient.SqlCommand GetCommand_DeleteExpiredTokens(int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteExpiredTokens", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteExpiredTokensAsync(int? timeout = null)
{
	using(var cmd = GetCommand_DeleteExpiredTokens(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteExpiredTokensDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteExpiredTokens",new {} , timeout );
}

public ResultSet DeleteExpiredTokens(int? timeout = null)
{
	using(var cmd = GetCommand_DeleteExpiredTokens(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetTreeOrder

public System.Data.SqlClient.SqlCommand GetCommand_SetTreeOrder(string _treeOrders, int? timeout = null)
{
var cmd = base.CreateCommand("org.spSetTreeOrder", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ATreeOrders", IsOutput = false, Value = string.IsNullOrWhiteSpace(_treeOrders) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_treeOrders) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetTreeOrderAsync(string _treeOrders, int? timeout = null)
{
	using(var cmd = GetCommand_SetTreeOrder(_treeOrders, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetTreeOrderDapperAsync<T>(string _treeOrders, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spSetTreeOrder",new {ATreeOrders=string.IsNullOrWhiteSpace(_treeOrders) ? _treeOrders : ReplaceArabicWithPersianChars(_treeOrders)} , timeout );
}

public ResultSet SetTreeOrder(string _treeOrders, int? timeout = null)
{
	using(var cmd = GetCommand_SetTreeOrder(_treeOrders, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyClient

public System.Data.SqlClient.SqlCommand GetCommand_ModifyClient(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, string _secret, byte? _type, bool? _enabled, string _abbreviation, string _allowedOrigin, int? _refreshTokenLifeTime, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyClient", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ASecret", IsOutput = false, Value = string.IsNullOrWhiteSpace(_secret) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_secret) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@AAbbreviation", IsOutput = false, Value = string.IsNullOrWhiteSpace(_abbreviation) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_abbreviation) }, 
					new Parameter { Name = "@AAllowedOrigin", IsOutput = false, Value = string.IsNullOrWhiteSpace(_allowedOrigin) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_allowedOrigin) }, 
					new Parameter { Name = "@ARefreshTokenLifeTime", IsOutput = false, Value = _refreshTokenLifeTime == null ? DBNull.Value : (object)_refreshTokenLifeTime }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyClientAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, string _secret, byte? _type, bool? _enabled, string _abbreviation, string _allowedOrigin, int? _refreshTokenLifeTime, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyClient(_isNewRecord, _id, _applicationID, _name, _secret, _type, _enabled, _abbreviation, _allowedOrigin, _refreshTokenLifeTime, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyClientDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, string _secret, byte? _type, bool? _enabled, string _abbreviation, string _allowedOrigin, int? _refreshTokenLifeTime, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyClient",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ASecret=string.IsNullOrWhiteSpace(_secret) ? _secret : ReplaceArabicWithPersianChars(_secret),AType=_type,AEnabled=_enabled,AAbbreviation=string.IsNullOrWhiteSpace(_abbreviation) ? _abbreviation : ReplaceArabicWithPersianChars(_abbreviation),AAllowedOrigin=string.IsNullOrWhiteSpace(_allowedOrigin) ? _allowedOrigin : ReplaceArabicWithPersianChars(_allowedOrigin),ARefreshTokenLifeTime=_refreshTokenLifeTime,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyClient(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, string _secret, byte? _type, bool? _enabled, string _abbreviation, string _allowedOrigin, int? _refreshTokenLifeTime, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyClient(_isNewRecord, _id, _applicationID, _name, _secret, _type, _enabled, _abbreviation, _allowedOrigin, _refreshTokenLifeTime, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteDepartmentBudget

public System.Data.SqlClient.SqlCommand GetCommand_DeleteDepartmentBudget(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteDepartmentBudget", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteDepartmentBudgetAsync(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteDepartmentBudget(_id, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteDepartmentBudgetDapperAsync<T>(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteDepartmentBudget",new {AID=_id,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet DeleteDepartmentBudget(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteDepartmentBudget(_id, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentBudgetsForSalary

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentBudgetsForSalary(Guid? _departmentID, Guid? _positionSubTypeID, Guid? _applicationID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentBudgetsForSalary", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@APositionSubTypeID", IsOutput = false, Value = _positionSubTypeID == null ? DBNull.Value : (object)_positionSubTypeID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentBudgetsForSalaryAsync(Guid? _departmentID, Guid? _positionSubTypeID, Guid? _applicationID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentBudgetsForSalary(_departmentID, _positionSubTypeID, _applicationID, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentBudgetsForSalaryDapperAsync<T>(Guid? _departmentID, Guid? _positionSubTypeID, Guid? _applicationID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentBudgetsForSalary",new {ADepartmentID=_departmentID,APositionSubTypeID=_positionSubTypeID,AApplicationID=_applicationID,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDepartmentBudgetsForSalary(Guid? _departmentID, Guid? _positionSubTypeID, Guid? _applicationID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentBudgetsForSalary(_departmentID, _positionSubTypeID, _applicationID, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserPass

public System.Data.SqlClient.SqlCommand GetCommand_GetUserPass(string _userName, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserPass", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserPassAsync(string _userName, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserPass(_userName, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserPassDapperAsync<T>(string _userName, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserPass",new {AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName)} , timeout );
}

public ResultSet GetUserPass(string _userName, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserPass(_userName, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentBudget

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentBudget(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentBudget", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentBudgetAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentBudget(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentBudgetDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentBudget",new {AID=_id} , timeout );
}

public ResultSet GetDepartmentBudget(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentBudget(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentsSubsetCount

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentsSubsetCount(Guid? _id, int? _level, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentsSubsetCount", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALevel", IsOutput = false, Value = _level == null ? DBNull.Value : (object)_level }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentsSubsetCountAsync(Guid? _id, int? _level, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsSubsetCount(_id, _level, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentsSubsetCountDapperAsync<T>(Guid? _id, int? _level, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentsSubsetCount",new {AID=_id,ALevel=_level} , timeout );
}

public ResultSet GetDepartmentsSubsetCount(Guid? _id, int? _level, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsSubsetCount(_id, _level, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentsBudget

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentsBudget(Guid? _departmentID, string _departmentIDs, byte? _enableType, string _budgetCode, string _salaryInputBudgetCode, string _name, byte? _type, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentsBudget", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@ADepartmentIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_departmentIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_departmentIDs) }, 
					new Parameter { Name = "@AEnableType", IsOutput = false, Value = _enableType == null ? DBNull.Value : (object)_enableType }, 
					new Parameter { Name = "@ABudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_budgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_budgetCode) }, 
					new Parameter { Name = "@ASalaryInputBudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_salaryInputBudgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_salaryInputBudgetCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentsBudgetAsync(Guid? _departmentID, string _departmentIDs, byte? _enableType, string _budgetCode, string _salaryInputBudgetCode, string _name, byte? _type, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsBudget(_departmentID, _departmentIDs, _enableType, _budgetCode, _salaryInputBudgetCode, _name, _type, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentsBudgetDapperAsync<T>(Guid? _departmentID, string _departmentIDs, byte? _enableType, string _budgetCode, string _salaryInputBudgetCode, string _name, byte? _type, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentsBudget",new {ADepartmentID=_departmentID,ADepartmentIDs=string.IsNullOrWhiteSpace(_departmentIDs) ? _departmentIDs : ReplaceArabicWithPersianChars(_departmentIDs),AEnableType=_enableType,ABudgetCode=string.IsNullOrWhiteSpace(_budgetCode) ? _budgetCode : ReplaceArabicWithPersianChars(_budgetCode),ASalaryInputBudgetCode=string.IsNullOrWhiteSpace(_salaryInputBudgetCode) ? _salaryInputBudgetCode : ReplaceArabicWithPersianChars(_salaryInputBudgetCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AType=_type,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDepartmentsBudget(Guid? _departmentID, string _departmentIDs, byte? _enableType, string _budgetCode, string _salaryInputBudgetCode, string _name, byte? _type, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsBudget(_departmentID, _departmentIDs, _enableType, _budgetCode, _salaryInputBudgetCode, _name, _type, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDynamicPermissionObjectsByPositionAndOrgan

public System.Data.SqlClient.SqlCommand GetCommand_GetDynamicPermissionObjectsByPositionAndOrgan(Guid? _positionID, Guid? _applicationID, Guid? _organID, byte? _type, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDynamicPermissionObjectsByPositionAndOrgan", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AOrganID", IsOutput = false, Value = _organID == null ? DBNull.Value : (object)_organID }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDynamicPermissionObjectsByPositionAndOrganAsync(Guid? _positionID, Guid? _applicationID, Guid? _organID, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermissionObjectsByPositionAndOrgan(_positionID, _applicationID, _organID, _type, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDynamicPermissionObjectsByPositionAndOrganDapperAsync<T>(Guid? _positionID, Guid? _applicationID, Guid? _organID, byte? _type, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDynamicPermissionObjectsByPositionAndOrgan",new {APositionID=_positionID,AApplicationID=_applicationID,AOrganID=_organID,AType=_type} , timeout );
}

public ResultSet GetDynamicPermissionObjectsByPositionAndOrgan(Guid? _positionID, Guid? _applicationID, Guid? _organID, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermissionObjectsByPositionAndOrgan(_positionID, _applicationID, _organID, _type, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyDepartmentBudget

public System.Data.SqlClient.SqlCommand GetCommand_ModifyDepartmentBudget(bool? _isNewRecord, Guid? _id, Guid? _departmentID, string _name, string _budgetCode, string _salaryInputBudgetCode, bool? _enabled, byte? _type, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyDepartmentBudget", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ABudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_budgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_budgetCode) }, 
					new Parameter { Name = "@ASalaryInputBudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_salaryInputBudgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_salaryInputBudgetCode) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyDepartmentBudgetAsync(bool? _isNewRecord, Guid? _id, Guid? _departmentID, string _name, string _budgetCode, string _salaryInputBudgetCode, bool? _enabled, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDepartmentBudget(_isNewRecord, _id, _departmentID, _name, _budgetCode, _salaryInputBudgetCode, _enabled, _type, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyDepartmentBudgetDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _departmentID, string _name, string _budgetCode, string _salaryInputBudgetCode, bool? _enabled, byte? _type, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyDepartmentBudget",new {AIsNewRecord=_isNewRecord,AID=_id,ADepartmentID=_departmentID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ABudgetCode=string.IsNullOrWhiteSpace(_budgetCode) ? _budgetCode : ReplaceArabicWithPersianChars(_budgetCode),ASalaryInputBudgetCode=string.IsNullOrWhiteSpace(_salaryInputBudgetCode) ? _salaryInputBudgetCode : ReplaceArabicWithPersianChars(_salaryInputBudgetCode),AEnabled=_enabled,AType=_type} , timeout );
}

public ResultSet ModifyDepartmentBudget(bool? _isNewRecord, Guid? _id, Guid? _departmentID, string _name, string _budgetCode, string _salaryInputBudgetCode, bool? _enabled, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDepartmentBudget(_isNewRecord, _id, _departmentID, _name, _budgetCode, _salaryInputBudgetCode, _enabled, _type, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentsBudgetDistinct

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentsBudgetDistinct(Guid? _departmentID, string _departmentIDs, Guid? _parentDepartmentID, byte? _enableType, string _budgetCode, string _departmentCode, string _salaryInputBudgetCode, string _name, byte? _type, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentsBudgetDistinct", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@ADepartmentIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_departmentIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_departmentIDs) }, 
					new Parameter { Name = "@AParentDepartmentID", IsOutput = false, Value = _parentDepartmentID == null ? DBNull.Value : (object)_parentDepartmentID }, 
					new Parameter { Name = "@AEnableType", IsOutput = false, Value = _enableType == null ? DBNull.Value : (object)_enableType }, 
					new Parameter { Name = "@ABudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_budgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_budgetCode) }, 
					new Parameter { Name = "@ADepartmentCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_departmentCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_departmentCode) }, 
					new Parameter { Name = "@ASalaryInputBudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_salaryInputBudgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_salaryInputBudgetCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentsBudgetDistinctAsync(Guid? _departmentID, string _departmentIDs, Guid? _parentDepartmentID, byte? _enableType, string _budgetCode, string _departmentCode, string _salaryInputBudgetCode, string _name, byte? _type, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsBudgetDistinct(_departmentID, _departmentIDs, _parentDepartmentID, _enableType, _budgetCode, _departmentCode, _salaryInputBudgetCode, _name, _type, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentsBudgetDistinctDapperAsync<T>(Guid? _departmentID, string _departmentIDs, Guid? _parentDepartmentID, byte? _enableType, string _budgetCode, string _departmentCode, string _salaryInputBudgetCode, string _name, byte? _type, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentsBudgetDistinct",new {ADepartmentID=_departmentID,ADepartmentIDs=string.IsNullOrWhiteSpace(_departmentIDs) ? _departmentIDs : ReplaceArabicWithPersianChars(_departmentIDs),AParentDepartmentID=_parentDepartmentID,AEnableType=_enableType,ABudgetCode=string.IsNullOrWhiteSpace(_budgetCode) ? _budgetCode : ReplaceArabicWithPersianChars(_budgetCode),ADepartmentCode=string.IsNullOrWhiteSpace(_departmentCode) ? _departmentCode : ReplaceArabicWithPersianChars(_departmentCode),ASalaryInputBudgetCode=string.IsNullOrWhiteSpace(_salaryInputBudgetCode) ? _salaryInputBudgetCode : ReplaceArabicWithPersianChars(_salaryInputBudgetCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AType=_type,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDepartmentsBudgetDistinct(Guid? _departmentID, string _departmentIDs, Guid? _parentDepartmentID, byte? _enableType, string _budgetCode, string _departmentCode, string _salaryInputBudgetCode, string _name, byte? _type, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsBudgetDistinct(_departmentID, _departmentIDs, _parentDepartmentID, _enableType, _budgetCode, _departmentCode, _salaryInputBudgetCode, _name, _type, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteDepartmentPostImport

public System.Data.SqlClient.SqlCommand GetCommand_DeleteDepartmentPostImport(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteDepartmentPostImport", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteDepartmentPostImportAsync(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteDepartmentPostImport(_id, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteDepartmentPostImportDapperAsync<T>(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteDepartmentPostImport",new {AID=_id,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet DeleteDepartmentPostImport(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteDepartmentPostImport(_id, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region AddUAC

public System.Data.SqlClient.SqlCommand GetCommand_AddUAC(Guid? _d, Guid? _ppId, string _ost, string _ort, string _gent, string _serId, bool? _ctiveState, string _atestTokenPayload, int? timeout = null)
{
var cmd = base.CreateCommand("org.spAddUAC", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ID", IsOutput = false, Value = _d == null ? DBNull.Value : (object)_d }, 
					new Parameter { Name = "@AppId", IsOutput = false, Value = _ppId == null ? DBNull.Value : (object)_ppId }, 
					new Parameter { Name = "@Host", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ost) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ost) }, 
					new Parameter { Name = "@Port", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ort) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ort) }, 
					new Parameter { Name = "@Agent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_gent) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_gent) }, 
					new Parameter { Name = "@UserId", IsOutput = false, Value = string.IsNullOrWhiteSpace(_serId) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_serId) }, 
					new Parameter { Name = "@ActiveState", IsOutput = false, Value = _ctiveState == null ? DBNull.Value : (object)_ctiveState }, 
					new Parameter { Name = "@LatestTokenPayload", IsOutput = false, Value = string.IsNullOrWhiteSpace(_atestTokenPayload) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_atestTokenPayload) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> AddUACAsync(Guid? _d, Guid? _ppId, string _ost, string _ort, string _gent, string _serId, bool? _ctiveState, string _atestTokenPayload, int? timeout = null)
{
	using(var cmd = GetCommand_AddUAC(_d, _ppId, _ost, _ort, _gent, _serId, _ctiveState, _atestTokenPayload, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> AddUACDapperAsync<T>(Guid? _d, Guid? _ppId, string _ost, string _ort, string _gent, string _serId, bool? _ctiveState, string _atestTokenPayload, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spAddUAC",new {ID=_d,AppId=_ppId,Host=string.IsNullOrWhiteSpace(_ost) ? _ost : ReplaceArabicWithPersianChars(_ost),Port=string.IsNullOrWhiteSpace(_ort) ? _ort : ReplaceArabicWithPersianChars(_ort),Agent=string.IsNullOrWhiteSpace(_gent) ? _gent : ReplaceArabicWithPersianChars(_gent),UserId=string.IsNullOrWhiteSpace(_serId) ? _serId : ReplaceArabicWithPersianChars(_serId),ActiveState=_ctiveState,LatestTokenPayload=string.IsNullOrWhiteSpace(_atestTokenPayload) ? _atestTokenPayload : ReplaceArabicWithPersianChars(_atestTokenPayload)} , timeout );
}

public ResultSet AddUAC(Guid? _d, Guid? _ppId, string _ost, string _ort, string _gent, string _serId, bool? _ctiveState, string _atestTokenPayload, int? timeout = null)
{
	using(var cmd = GetCommand_AddUAC(_d, _ppId, _ost, _ort, _gent, _serId, _ctiveState, _atestTokenPayload, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentPostImport

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentPostImport(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentPostImport", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentPostImportAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentPostImport(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentPostImportDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentPostImport",new {AID=_id} , timeout );
}

public ResultSet GetDepartmentPostImport(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentPostImport(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteDepartment

public System.Data.SqlClient.SqlCommand GetCommand_DeleteDepartment(Guid? _id, Guid? _currentUserID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteDepartment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteDepartmentAsync(Guid? _id, Guid? _currentUserID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteDepartment(_id, _currentUserID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteDepartmentDapperAsync<T>(Guid? _id, Guid? _currentUserID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteDepartment",new {AID=_id,ACurrentUserID=_currentUserID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteDepartment(Guid? _id, Guid? _currentUserID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteDepartment(_id, _currentUserID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region UpdateUAC

public System.Data.SqlClient.SqlCommand GetCommand_UpdateUAC(Guid? _d, Guid? _ppId, string _ost, string _ort, string _gent, string _serId, bool? _ctiveState, string _atestTokenPayload, int? timeout = null)
{
var cmd = base.CreateCommand("org.spUpdateUAC", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ID", IsOutput = false, Value = _d == null ? DBNull.Value : (object)_d }, 
					new Parameter { Name = "@AppId", IsOutput = false, Value = _ppId == null ? DBNull.Value : (object)_ppId }, 
					new Parameter { Name = "@Host", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ost) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ost) }, 
					new Parameter { Name = "@Port", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ort) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ort) }, 
					new Parameter { Name = "@Agent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_gent) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_gent) }, 
					new Parameter { Name = "@UserId", IsOutput = false, Value = string.IsNullOrWhiteSpace(_serId) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_serId) }, 
					new Parameter { Name = "@ActiveState", IsOutput = false, Value = _ctiveState == null ? DBNull.Value : (object)_ctiveState }, 
					new Parameter { Name = "@LatestTokenPayload", IsOutput = false, Value = string.IsNullOrWhiteSpace(_atestTokenPayload) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_atestTokenPayload) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UpdateUACAsync(Guid? _d, Guid? _ppId, string _ost, string _ort, string _gent, string _serId, bool? _ctiveState, string _atestTokenPayload, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateUAC(_d, _ppId, _ost, _ort, _gent, _serId, _ctiveState, _atestTokenPayload, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UpdateUACDapperAsync<T>(Guid? _d, Guid? _ppId, string _ost, string _ort, string _gent, string _serId, bool? _ctiveState, string _atestTokenPayload, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spUpdateUAC",new {ID=_d,AppId=_ppId,Host=string.IsNullOrWhiteSpace(_ost) ? _ost : ReplaceArabicWithPersianChars(_ost),Port=string.IsNullOrWhiteSpace(_ort) ? _ort : ReplaceArabicWithPersianChars(_ort),Agent=string.IsNullOrWhiteSpace(_gent) ? _gent : ReplaceArabicWithPersianChars(_gent),UserId=string.IsNullOrWhiteSpace(_serId) ? _serId : ReplaceArabicWithPersianChars(_serId),ActiveState=_ctiveState,LatestTokenPayload=string.IsNullOrWhiteSpace(_atestTokenPayload) ? _atestTokenPayload : ReplaceArabicWithPersianChars(_atestTokenPayload)} , timeout );
}

public ResultSet UpdateUAC(Guid? _d, Guid? _ppId, string _ost, string _ort, string _gent, string _serId, bool? _ctiveState, string _atestTokenPayload, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateUAC(_d, _ppId, _ost, _ort, _gent, _serId, _ctiveState, _atestTokenPayload, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyDepartmentPostImport

public System.Data.SqlClient.SqlCommand GetCommand_ModifyDepartmentPostImport(bool? _isNewRecord, Guid? _id, Guid? _departmentID, byte? _employmentType, int? _limitedNumber, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyDepartmentPostImport", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AEmploymentType", IsOutput = false, Value = _employmentType == null ? DBNull.Value : (object)_employmentType }, 
					new Parameter { Name = "@ALimitedNumber", IsOutput = false, Value = _limitedNumber == null ? DBNull.Value : (object)_limitedNumber }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyDepartmentPostImportAsync(bool? _isNewRecord, Guid? _id, Guid? _departmentID, byte? _employmentType, int? _limitedNumber, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDepartmentPostImport(_isNewRecord, _id, _departmentID, _employmentType, _limitedNumber, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyDepartmentPostImportDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _departmentID, byte? _employmentType, int? _limitedNumber, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyDepartmentPostImport",new {AIsNewRecord=_isNewRecord,AID=_id,ADepartmentID=_departmentID,AEmploymentType=_employmentType,ALimitedNumber=_limitedNumber} , timeout );
}

public ResultSet ModifyDepartmentPostImport(bool? _isNewRecord, Guid? _id, Guid? _departmentID, byte? _employmentType, int? _limitedNumber, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDepartmentPostImport(_isNewRecord, _id, _departmentID, _employmentType, _limitedNumber, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteDynamicPermission

public System.Data.SqlClient.SqlCommand GetCommand_DeleteDynamicPermission(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteDynamicPermission", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteDynamicPermissionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteDynamicPermission(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteDynamicPermissionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteDynamicPermission",new {AID=_id} , timeout );
}

public ResultSet DeleteDynamicPermission(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteDynamicPermission(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentsPostImport

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentsPostImport(Guid? _departmentID, byte? _employmentType, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentsPostImport", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AEmploymentType", IsOutput = false, Value = _employmentType == null ? DBNull.Value : (object)_employmentType }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentsPostImportAsync(Guid? _departmentID, byte? _employmentType, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsPostImport(_departmentID, _employmentType, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentsPostImportDapperAsync<T>(Guid? _departmentID, byte? _employmentType, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentsPostImport",new {ADepartmentID=_departmentID,AEmploymentType=_employmentType,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDepartmentsPostImport(Guid? _departmentID, byte? _employmentType, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsPostImport(_departmentID, _employmentType, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region MergeIndividuals

public System.Data.SqlClient.SqlCommand GetCommand_MergeIndividuals(Guid? _individualID, Guid? _mergedIndividualID, string _nationalCode, int? timeout = null)
{
var cmd = base.CreateCommand("org.spMergeIndividuals", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AMergedIndividualID", IsOutput = false, Value = _mergedIndividualID == null ? DBNull.Value : (object)_mergedIndividualID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> MergeIndividualsAsync(Guid? _individualID, Guid? _mergedIndividualID, string _nationalCode, int? timeout = null)
{
	using(var cmd = GetCommand_MergeIndividuals(_individualID, _mergedIndividualID, _nationalCode, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> MergeIndividualsDapperAsync<T>(Guid? _individualID, Guid? _mergedIndividualID, string _nationalCode, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spMergeIndividuals",new {AIndividualID=_individualID,AMergedIndividualID=_mergedIndividualID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode)} , timeout );
}

public ResultSet MergeIndividuals(Guid? _individualID, Guid? _mergedIndividualID, string _nationalCode, int? timeout = null)
{
	using(var cmd = GetCommand_MergeIndividuals(_individualID, _mergedIndividualID, _nationalCode, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDynamicPermission

public System.Data.SqlClient.SqlCommand GetCommand_GetDynamicPermission(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDynamicPermission", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDynamicPermissionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermission(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDynamicPermissionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDynamicPermission",new {AID=_id} , timeout );
}

public ResultSet GetDynamicPermission(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermission(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNeededIndividualsForVaccineInquiry

public System.Data.SqlClient.SqlCommand GetCommand_GetNeededIndividualsForVaccineInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetNeededIndividualsForVaccineInquiry", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNeededIndividualsForVaccineInquiryAsync(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForVaccineInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNeededIndividualsForVaccineInquiryDapperAsync<T>(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetNeededIndividualsForVaccineInquiry",new {APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNeededIndividualsForVaccineInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForVaccineInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDynamicPermissionObjectsByPosition

public System.Data.SqlClient.SqlCommand GetCommand_GetDynamicPermissionObjectsByPosition(Guid? _positionID, Guid? _applicationID, byte? _type, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDynamicPermissionObjectsByPosition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDynamicPermissionObjectsByPositionAsync(Guid? _positionID, Guid? _applicationID, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermissionObjectsByPosition(_positionID, _applicationID, _type, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDynamicPermissionObjectsByPositionDapperAsync<T>(Guid? _positionID, Guid? _applicationID, byte? _type, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDynamicPermissionObjectsByPosition",new {APositionID=_positionID,AApplicationID=_applicationID,AType=_type} , timeout );
}

public ResultSet GetDynamicPermissionObjectsByPosition(Guid? _positionID, Guid? _applicationID, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermissionObjectsByPosition(_positionID, _applicationID, _type, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyUser

public System.Data.SqlClient.SqlCommand GetCommand_ModifyUser(bool? _isNewRecord, Guid? _id, bool? _enabled, string _username, string _password, DateTime? _passwordExpireDate, string _firstName, string _lastName, string _nationalCode, string _email, string _cellPhone, Guid? _applicationID, bool? _emailVerified, bool? _cellPhoneVerified, bool? _twoStepVerification, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@AUsername", IsOutput = false, Value = string.IsNullOrWhiteSpace(_username) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_username) }, 
					new Parameter { Name = "@APassword", IsOutput = false, Value = string.IsNullOrWhiteSpace(_password) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_password) }, 
					new Parameter { Name = "@APasswordExpireDate", IsOutput = false, Value = _passwordExpireDate == null ? DBNull.Value : (object)_passwordExpireDate }, 
					new Parameter { Name = "@AFirstName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_firstName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_firstName) }, 
					new Parameter { Name = "@ALastName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastName) }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AEmail", IsOutput = false, Value = string.IsNullOrWhiteSpace(_email) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_email) }, 
					new Parameter { Name = "@ACellPhone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellPhone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellPhone) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AEmailVerified", IsOutput = false, Value = _emailVerified == null ? DBNull.Value : (object)_emailVerified }, 
					new Parameter { Name = "@ACellPhoneVerified", IsOutput = false, Value = _cellPhoneVerified == null ? DBNull.Value : (object)_cellPhoneVerified }, 
					new Parameter { Name = "@ATwoStepVerification", IsOutput = false, Value = _twoStepVerification == null ? DBNull.Value : (object)_twoStepVerification }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyUserAsync(bool? _isNewRecord, Guid? _id, bool? _enabled, string _username, string _password, DateTime? _passwordExpireDate, string _firstName, string _lastName, string _nationalCode, string _email, string _cellPhone, Guid? _applicationID, bool? _emailVerified, bool? _cellPhoneVerified, bool? _twoStepVerification, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyUser(_isNewRecord, _id, _enabled, _username, _password, _passwordExpireDate, _firstName, _lastName, _nationalCode, _email, _cellPhone, _applicationID, _emailVerified, _cellPhoneVerified, _twoStepVerification, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyUserDapperAsync<T>(bool? _isNewRecord, Guid? _id, bool? _enabled, string _username, string _password, DateTime? _passwordExpireDate, string _firstName, string _lastName, string _nationalCode, string _email, string _cellPhone, Guid? _applicationID, bool? _emailVerified, bool? _cellPhoneVerified, bool? _twoStepVerification, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyUser",new {AIsNewRecord=_isNewRecord,AID=_id,AEnabled=_enabled,AUsername=string.IsNullOrWhiteSpace(_username) ? _username : ReplaceArabicWithPersianChars(_username),APassword=string.IsNullOrWhiteSpace(_password) ? _password : ReplaceArabicWithPersianChars(_password),APasswordExpireDate=_passwordExpireDate,AFirstName=string.IsNullOrWhiteSpace(_firstName) ? _firstName : ReplaceArabicWithPersianChars(_firstName),ALastName=string.IsNullOrWhiteSpace(_lastName) ? _lastName : ReplaceArabicWithPersianChars(_lastName),ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AEmail=string.IsNullOrWhiteSpace(_email) ? _email : ReplaceArabicWithPersianChars(_email),ACellPhone=string.IsNullOrWhiteSpace(_cellPhone) ? _cellPhone : ReplaceArabicWithPersianChars(_cellPhone),AApplicationID=_applicationID,AEmailVerified=_emailVerified,ACellPhoneVerified=_cellPhoneVerified,ATwoStepVerification=_twoStepVerification,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyUser(bool? _isNewRecord, Guid? _id, bool? _enabled, string _username, string _password, DateTime? _passwordExpireDate, string _firstName, string _lastName, string _nationalCode, string _email, string _cellPhone, Guid? _applicationID, bool? _emailVerified, bool? _cellPhoneVerified, bool? _twoStepVerification, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyUser(_isNewRecord, _id, _enabled, _username, _password, _passwordExpireDate, _firstName, _lastName, _nationalCode, _email, _cellPhone, _applicationID, _emailVerified, _cellPhoneVerified, _twoStepVerification, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region AddIssuedToken

public System.Data.SqlClient.SqlCommand GetCommand_AddIssuedToken(Guid? _id, Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
var cmd = base.CreateCommand("org.spAddIssuedToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ARefreshTokenID", IsOutput = false, Value = _refreshTokenID == null ? DBNull.Value : (object)_refreshTokenID }, 
					new Parameter { Name = "@AClientID", IsOutput = false, Value = _clientID == null ? DBNull.Value : (object)_clientID }, 
					new Parameter { Name = "@AIssuedDate", IsOutput = false, Value = _issuedDate == null ? DBNull.Value : (object)_issuedDate }, 
					new Parameter { Name = "@AExpireDate", IsOutput = false, Value = _expireDate == null ? DBNull.Value : (object)_expireDate }, 
					new Parameter { Name = "@AToken", IsOutput = false, Value = string.IsNullOrWhiteSpace(_token) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_token) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> AddIssuedTokenAsync(Guid? _id, Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
	using(var cmd = GetCommand_AddIssuedToken(_id, _userID, _refreshTokenID, _clientID, _issuedDate, _expireDate, _token, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> AddIssuedTokenDapperAsync<T>(Guid? _id, Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spAddIssuedToken",new {AID=_id,AUserID=_userID,ARefreshTokenID=_refreshTokenID,AClientID=_clientID,AIssuedDate=_issuedDate,AExpireDate=_expireDate,AToken=string.IsNullOrWhiteSpace(_token) ? _token : ReplaceArabicWithPersianChars(_token)} , timeout );
}

public ResultSet AddIssuedToken(Guid? _id, Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
	using(var cmd = GetCommand_AddIssuedToken(_id, _userID, _refreshTokenID, _clientID, _issuedDate, _expireDate, _token, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTextTemplates

public System.Data.SqlClient.SqlCommand GetCommand_GetTextTemplates(Guid? _applicationID, string _name, string _title, int? _code, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetTextTemplates", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = _code == null ? DBNull.Value : (object)_code }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTextTemplatesAsync(Guid? _applicationID, string _name, string _title, int? _code, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetTextTemplates(_applicationID, _name, _title, _code, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTextTemplatesDapperAsync<T>(Guid? _applicationID, string _name, string _title, int? _code, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetTextTemplates",new {AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),ACode=_code,APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetTextTemplates(Guid? _applicationID, string _name, string _title, int? _code, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetTextTemplates(_applicationID, _name, _title, _code, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyDynamicPermission

public System.Data.SqlClient.SqlCommand GetCommand_ModifyDynamicPermission(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _objectID, int? _order, byte? _type, string _details, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyDynamicPermission", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AObjectID", IsOutput = false, Value = _objectID == null ? DBNull.Value : (object)_objectID }, 
					new Parameter { Name = "@AOrder", IsOutput = false, Value = _order == null ? DBNull.Value : (object)_order }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ADetails", IsOutput = false, Value = string.IsNullOrWhiteSpace(_details) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_details) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyDynamicPermissionAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _objectID, int? _order, byte? _type, string _details, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDynamicPermission(_isNewRecord, _id, _applicationID, _objectID, _order, _type, _details, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyDynamicPermissionDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _objectID, int? _order, byte? _type, string _details, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyDynamicPermission",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,AObjectID=_objectID,AOrder=_order,AType=_type,ADetails=string.IsNullOrWhiteSpace(_details) ? _details : ReplaceArabicWithPersianChars(_details)} , timeout );
}

public ResultSet ModifyDynamicPermission(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _objectID, int? _order, byte? _type, string _details, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDynamicPermission(_isNewRecord, _id, _applicationID, _objectID, _order, _type, _details, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region AddIndividuals

public System.Data.SqlClient.SqlCommand GetCommand_AddIndividuals(string _individuals, int? timeout = null)
{
var cmd = base.CreateCommand("org.spAddIndividuals", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividuals", IsOutput = false, Value = string.IsNullOrWhiteSpace(_individuals) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_individuals) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> AddIndividualsAsync(string _individuals, int? timeout = null)
{
	using(var cmd = GetCommand_AddIndividuals(_individuals, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> AddIndividualsDapperAsync<T>(string _individuals, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spAddIndividuals",new {AIndividuals=string.IsNullOrWhiteSpace(_individuals) ? _individuals : ReplaceArabicWithPersianChars(_individuals)} , timeout );
}

public ResultSet AddIndividuals(string _individuals, int? timeout = null)
{
	using(var cmd = GetCommand_AddIndividuals(_individuals, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region AddUserByIndividual

public System.Data.SqlClient.SqlCommand GetCommand_AddUserByIndividual(string _nationalCode, string _cellPhone, int? timeout = null)
{
var cmd = base.CreateCommand("org.spAddUserByIndividual", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ACellPhone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellPhone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellPhone) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> AddUserByIndividualAsync(string _nationalCode, string _cellPhone, int? timeout = null)
{
	using(var cmd = GetCommand_AddUserByIndividual(_nationalCode, _cellPhone, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> AddUserByIndividualDapperAsync<T>(string _nationalCode, string _cellPhone, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spAddUserByIndividual",new {ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ACellPhone=string.IsNullOrWhiteSpace(_cellPhone) ? _cellPhone : ReplaceArabicWithPersianChars(_cellPhone)} , timeout );
}

public ResultSet AddUserByIndividual(string _nationalCode, string _cellPhone, int? timeout = null)
{
	using(var cmd = GetCommand_AddUserByIndividual(_nationalCode, _cellPhone, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDynamicPermissionPositions

public System.Data.SqlClient.SqlCommand GetCommand_GetDynamicPermissionPositions(Guid? _objectID, Guid? _applicationID, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDynamicPermissionPositions", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AObjectID", IsOutput = false, Value = _objectID == null ? DBNull.Value : (object)_objectID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDynamicPermissionPositionsAsync(Guid? _objectID, Guid? _applicationID, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermissionPositions(_objectID, _applicationID, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDynamicPermissionPositionsDapperAsync<T>(Guid? _objectID, Guid? _applicationID, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDynamicPermissionPositions",new {AObjectID=_objectID,AApplicationID=_applicationID,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDynamicPermissionPositions(Guid? _objectID, Guid? _applicationID, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermissionPositions(_objectID, _applicationID, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionByUser

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionByUser(Guid? _userID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionByUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionByUserAsync(Guid? _userID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionByUser(_userID, _getTotalCount, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionByUserDapperAsync<T>(Guid? _userID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionByUser",new {AUserID=_userID,AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetPositionByUser(Guid? _userID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionByUser(_userID, _getTotalCount, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIndividual

public System.Data.SqlClient.SqlCommand GetCommand_GetIndividual(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetIndividual", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIndividualAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetIndividual(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIndividualDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetIndividual",new {AID=_id} , timeout );
}

public ResultSet GetIndividual(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetIndividual(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationAssignments

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationAssignments(Guid? _positionID, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetApplicationAssignments", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationAssignmentsAsync(Guid? _positionID, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationAssignments(_positionID, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationAssignmentsDapperAsync<T>(Guid? _positionID, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetApplicationAssignments",new {APositionID=_positionID,APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetApplicationAssignments(Guid? _positionID, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationAssignments(_positionID, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetConfirmType

public System.Data.SqlClient.SqlCommand GetCommand_SetConfirmType(Guid? _id, byte? _confirmType, byte? _gender, bool? _isDead, DateTime? _birthDate, string _bCNumber, string _fatherName, int? timeout = null)
{
var cmd = base.CreateCommand("org.spSetConfirmType", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AConfirmType", IsOutput = false, Value = _confirmType == null ? DBNull.Value : (object)_confirmType }, 
					new Parameter { Name = "@AGender", IsOutput = false, Value = _gender == null ? DBNull.Value : (object)_gender }, 
					new Parameter { Name = "@AIsDead", IsOutput = false, Value = _isDead == null ? DBNull.Value : (object)_isDead }, 
					new Parameter { Name = "@ABirthDate", IsOutput = false, Value = _birthDate == null ? DBNull.Value : (object)_birthDate }, 
					new Parameter { Name = "@ABCNumber", IsOutput = false, Value = string.IsNullOrWhiteSpace(_bCNumber) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_bCNumber) }, 
					new Parameter { Name = "@AFatherName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_fatherName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_fatherName) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetConfirmTypeAsync(Guid? _id, byte? _confirmType, byte? _gender, bool? _isDead, DateTime? _birthDate, string _bCNumber, string _fatherName, int? timeout = null)
{
	using(var cmd = GetCommand_SetConfirmType(_id, _confirmType, _gender, _isDead, _birthDate, _bCNumber, _fatherName, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetConfirmTypeDapperAsync<T>(Guid? _id, byte? _confirmType, byte? _gender, bool? _isDead, DateTime? _birthDate, string _bCNumber, string _fatherName, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spSetConfirmType",new {AID=_id,AConfirmType=_confirmType,AGender=_gender,AIsDead=_isDead,ABirthDate=_birthDate,ABCNumber=string.IsNullOrWhiteSpace(_bCNumber) ? _bCNumber : ReplaceArabicWithPersianChars(_bCNumber),AFatherName=string.IsNullOrWhiteSpace(_fatherName) ? _fatherName : ReplaceArabicWithPersianChars(_fatherName)} , timeout );
}

public ResultSet SetConfirmType(Guid? _id, byte? _confirmType, byte? _gender, bool? _isDead, DateTime? _birthDate, string _bCNumber, string _fatherName, int? timeout = null)
{
	using(var cmd = GetCommand_SetConfirmType(_id, _confirmType, _gender, _isDead, _birthDate, _bCNumber, _fatherName, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserByUserNamePassword

public System.Data.SqlClient.SqlCommand GetCommand_GetUserByUserNamePassword(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserByUserNamePassword", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
					new Parameter { Name = "@APassword", IsOutput = false, Value = string.IsNullOrWhiteSpace(_password) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_password) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserByUserNamePasswordAsync(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByUserNamePassword(_userName, _password, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserByUserNamePasswordDapperAsync<T>(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserByUserNamePassword",new {AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName),APassword=string.IsNullOrWhiteSpace(_password) ? _password : ReplaceArabicWithPersianChars(_password),AApplicationID=_applicationID,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet GetUserByUserNamePassword(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByUserNamePassword(_userName, _password, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplication

public System.Data.SqlClient.SqlCommand GetCommand_GetApplication(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetApplication", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplication(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetApplication",new {AID=_id} , timeout );
}

public ResultSet GetApplication(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplication(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region UpdateIndividualsState

public System.Data.SqlClient.SqlCommand GetCommand_UpdateIndividualsState(int? timeout = null)
{
var cmd = base.CreateCommand("org.spUpdateIndividualsState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UpdateIndividualsStateAsync(int? timeout = null)
{
	using(var cmd = GetCommand_UpdateIndividualsState(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UpdateIndividualsStateDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spUpdateIndividualsState",new {} , timeout );
}

public ResultSet UpdateIndividualsState(int? timeout = null)
{
	using(var cmd = GetCommand_UpdateIndividualsState(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteExpiredIssuedTokens

public System.Data.SqlClient.SqlCommand GetCommand_DeleteExpiredIssuedTokens(int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteExpiredIssuedTokens", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteExpiredIssuedTokensAsync(int? timeout = null)
{
	using(var cmd = GetCommand_DeleteExpiredIssuedTokens(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteExpiredIssuedTokensDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteExpiredIssuedTokens",new {} , timeout );
}

public ResultSet DeleteExpiredIssuedTokens(int? timeout = null)
{
	using(var cmd = GetCommand_DeleteExpiredIssuedTokens(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetRole

public System.Data.SqlClient.SqlCommand GetCommand_GetRole(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetRole", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetRoleAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetRole(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetRoleDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetRole",new {AID=_id} , timeout );
}

public ResultSet GetRole(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetRole(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteIssuedToken

public System.Data.SqlClient.SqlCommand GetCommand_DeleteIssuedToken(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteIssuedToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteIssuedTokenAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteIssuedToken(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteIssuedTokenDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteIssuedToken",new {AID=_id} , timeout );
}

public ResultSet DeleteIssuedToken(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteIssuedToken(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIndividuals

public System.Data.SqlClient.SqlCommand GetCommand_GetIndividuals(string _iDs, string _firstName, string _lastName, string _nationalCode, DateTime? _birthDate, byte? _confirmType, string _nationalCodes, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetIndividuals", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_iDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_iDs) }, 
					new Parameter { Name = "@AFirstName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_firstName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_firstName) }, 
					new Parameter { Name = "@ALastName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastName) }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ABirthDate", IsOutput = false, Value = _birthDate == null ? DBNull.Value : (object)_birthDate }, 
					new Parameter { Name = "@AConfirmType", IsOutput = false, Value = _confirmType == null ? DBNull.Value : (object)_confirmType }, 
					new Parameter { Name = "@ANationalCodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCodes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCodes) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIndividualsAsync(string _iDs, string _firstName, string _lastName, string _nationalCode, DateTime? _birthDate, byte? _confirmType, string _nationalCodes, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetIndividuals(_iDs, _firstName, _lastName, _nationalCode, _birthDate, _confirmType, _nationalCodes, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIndividualsDapperAsync<T>(string _iDs, string _firstName, string _lastName, string _nationalCode, DateTime? _birthDate, byte? _confirmType, string _nationalCodes, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetIndividuals",new {AIDs=string.IsNullOrWhiteSpace(_iDs) ? _iDs : ReplaceArabicWithPersianChars(_iDs),AFirstName=string.IsNullOrWhiteSpace(_firstName) ? _firstName : ReplaceArabicWithPersianChars(_firstName),ALastName=string.IsNullOrWhiteSpace(_lastName) ? _lastName : ReplaceArabicWithPersianChars(_lastName),ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ABirthDate=_birthDate,AConfirmType=_confirmType,ANationalCodes=string.IsNullOrWhiteSpace(_nationalCodes) ? _nationalCodes : ReplaceArabicWithPersianChars(_nationalCodes),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetIndividuals(string _iDs, string _firstName, string _lastName, string _nationalCode, DateTime? _birthDate, byte? _confirmType, string _nationalCodes, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetIndividuals(_iDs, _firstName, _lastName, _nationalCode, _birthDate, _confirmType, _nationalCodes, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyRole

public System.Data.SqlClient.SqlCommand GetCommand_ModifyRole(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, string _permissions, string _log, byte? _positionType, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyRole", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@APermissions", IsOutput = false, Value = string.IsNullOrWhiteSpace(_permissions) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_permissions) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
					new Parameter { Name = "@APositionType", IsOutput = false, Value = _positionType == null ? DBNull.Value : (object)_positionType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyRoleAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, string _permissions, string _log, byte? _positionType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyRole(_isNewRecord, _id, _applicationID, _name, _permissions, _log, _positionType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyRoleDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, string _permissions, string _log, byte? _positionType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyRole",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),APermissions=string.IsNullOrWhiteSpace(_permissions) ? _permissions : ReplaceArabicWithPersianChars(_permissions),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log),APositionType=_positionType} , timeout );
}

public ResultSet ModifyRole(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, string _permissions, string _log, byte? _positionType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyRole(_isNewRecord, _id, _applicationID, _name, _permissions, _log, _positionType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentEnableStates

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentEnableStates(Guid? _departmentID, string _departmentIDs, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentEnableStates", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@ADepartmentIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_departmentIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_departmentIDs) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentEnableStatesAsync(Guid? _departmentID, string _departmentIDs, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentEnableStates(_departmentID, _departmentIDs, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentEnableStatesDapperAsync<T>(Guid? _departmentID, string _departmentIDs, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentEnableStates",new {ADepartmentID=_departmentID,ADepartmentIDs=string.IsNullOrWhiteSpace(_departmentIDs) ? _departmentIDs : ReplaceArabicWithPersianChars(_departmentIDs)} , timeout );
}

public ResultSet GetDepartmentEnableStates(Guid? _departmentID, string _departmentIDs, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentEnableStates(_departmentID, _departmentIDs, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteIssuedTokenByUserID

public System.Data.SqlClient.SqlCommand GetCommand_DeleteIssuedTokenByUserID(Guid? _userID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteIssuedTokenByUserID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteIssuedTokenByUserIDAsync(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteIssuedTokenByUserID(_userID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteIssuedTokenByUserIDDapperAsync<T>(Guid? _userID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteIssuedTokenByUserID",new {AUserID=_userID} , timeout );
}

public ResultSet DeleteIssuedTokenByUserID(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteIssuedTokenByUserID(_userID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNeededIndividualsForEducationInquiry

public System.Data.SqlClient.SqlCommand GetCommand_GetNeededIndividualsForEducationInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetNeededIndividualsForEducationInquiry", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNeededIndividualsForEducationInquiryAsync(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForEducationInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNeededIndividualsForEducationInquiryDapperAsync<T>(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetNeededIndividualsForEducationInquiry",new {APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNeededIndividualsForEducationInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForEducationInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteRole

public System.Data.SqlClient.SqlCommand GetCommand_DeleteRole(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteRole", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteRoleAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteRole(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteRoleDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteRole",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteRole(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteRole(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIssuedToken

public System.Data.SqlClient.SqlCommand GetCommand_GetIssuedToken(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetIssuedToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIssuedTokenAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetIssuedToken(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIssuedTokenDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetIssuedToken",new {AID=_id} , timeout );
}

public ResultSet GetIssuedToken(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetIssuedToken(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNeededIndividualsForImageSmartInquiry

public System.Data.SqlClient.SqlCommand GetCommand_GetNeededIndividualsForImageSmartInquiry(int? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetNeededIndividualsForImageSmartInquiry", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNeededIndividualsForImageSmartInquiryAsync(int? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForImageSmartInquiry(_type, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNeededIndividualsForImageSmartInquiryDapperAsync<T>(int? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetNeededIndividualsForImageSmartInquiry",new {AType=_type,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNeededIndividualsForImageSmartInquiry(int? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForImageSmartInquiry(_type, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetRoles

public System.Data.SqlClient.SqlCommand GetCommand_GetRoles(Guid? _applicationID, string _name, byte? _positionType, byte? _userType, Guid? _positionID, Guid? _userID, Guid? _commandID, string _nationalCode, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetRoles", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@APositionType", IsOutput = false, Value = _positionType == null ? DBNull.Value : (object)_positionType }, 
					new Parameter { Name = "@AUserType", IsOutput = false, Value = _userType == null ? DBNull.Value : (object)_userType }, 
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ACommandID", IsOutput = false, Value = _commandID == null ? DBNull.Value : (object)_commandID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetRolesAsync(Guid? _applicationID, string _name, byte? _positionType, byte? _userType, Guid? _positionID, Guid? _userID, Guid? _commandID, string _nationalCode, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetRoles(_applicationID, _name, _positionType, _userType, _positionID, _userID, _commandID, _nationalCode, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetRolesDapperAsync<T>(Guid? _applicationID, string _name, byte? _positionType, byte? _userType, Guid? _positionID, Guid? _userID, Guid? _commandID, string _nationalCode, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetRoles",new {AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),APositionType=_positionType,AUserType=_userType,APositionID=_positionID,AUserID=_userID,ACommandID=_commandID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetRoles(Guid? _applicationID, string _name, byte? _positionType, byte? _userType, Guid? _positionID, Guid? _userID, Guid? _commandID, string _nationalCode, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetRoles(_applicationID, _name, _positionType, _userType, _positionID, _userID, _commandID, _nationalCode, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIssuedTokenByToken

public System.Data.SqlClient.SqlCommand GetCommand_GetIssuedTokenByToken(string _token, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetIssuedTokenByToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AToken", IsOutput = false, Value = string.IsNullOrWhiteSpace(_token) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_token) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIssuedTokenByTokenAsync(string _token, int? timeout = null)
{
	using(var cmd = GetCommand_GetIssuedTokenByToken(_token, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIssuedTokenByTokenDapperAsync<T>(string _token, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetIssuedTokenByToken",new {AToken=string.IsNullOrWhiteSpace(_token) ? _token : ReplaceArabicWithPersianChars(_token)} , timeout );
}

public ResultSet GetIssuedTokenByToken(string _token, int? timeout = null)
{
	using(var cmd = GetCommand_GetIssuedTokenByToken(_token, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region UpdatePositionEnableStates

public System.Data.SqlClient.SqlCommand GetCommand_UpdatePositionEnableStates(Guid? _applicationID, Guid? _departmentID, byte? _enableState, int? timeout = null)
{
var cmd = base.CreateCommand("org.spUpdatePositionEnableStates", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AEnableState", IsOutput = false, Value = _enableState == null ? DBNull.Value : (object)_enableState }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UpdatePositionEnableStatesAsync(Guid? _applicationID, Guid? _departmentID, byte? _enableState, int? timeout = null)
{
	using(var cmd = GetCommand_UpdatePositionEnableStates(_applicationID, _departmentID, _enableState, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UpdatePositionEnableStatesDapperAsync<T>(Guid? _applicationID, Guid? _departmentID, byte? _enableState, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spUpdatePositionEnableStates",new {AApplicationID=_applicationID,ADepartmentID=_departmentID,AEnableState=_enableState} , timeout );
}

public ResultSet UpdatePositionEnableStates(Guid? _applicationID, Guid? _departmentID, byte? _enableState, int? timeout = null)
{
	using(var cmd = GetCommand_UpdatePositionEnableStates(_applicationID, _departmentID, _enableState, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNeededIndividualsForInsuranceInquiry

public System.Data.SqlClient.SqlCommand GetCommand_GetNeededIndividualsForInsuranceInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetNeededIndividualsForInsuranceInquiry", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNeededIndividualsForInsuranceInquiryAsync(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForInsuranceInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNeededIndividualsForInsuranceInquiryDapperAsync<T>(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetNeededIndividualsForInsuranceInquiry",new {APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNeededIndividualsForInsuranceInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForInsuranceInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIssuedTokens

public System.Data.SqlClient.SqlCommand GetCommand_GetIssuedTokens(Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, string _token, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetIssuedTokens", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ARefreshTokenID", IsOutput = false, Value = _refreshTokenID == null ? DBNull.Value : (object)_refreshTokenID }, 
					new Parameter { Name = "@AClientID", IsOutput = false, Value = _clientID == null ? DBNull.Value : (object)_clientID }, 
					new Parameter { Name = "@AToken", IsOutput = false, Value = string.IsNullOrWhiteSpace(_token) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_token) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIssuedTokensAsync(Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, string _token, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetIssuedTokens(_userID, _refreshTokenID, _clientID, _token, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIssuedTokensDapperAsync<T>(Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, string _token, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetIssuedTokens",new {AUserID=_userID,ARefreshTokenID=_refreshTokenID,AClientID=_clientID,AToken=string.IsNullOrWhiteSpace(_token) ? _token : ReplaceArabicWithPersianChars(_token),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetIssuedTokens(Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, string _token, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetIssuedTokens(_userID, _refreshTokenID, _clientID, _token, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationAssignmentsByPositionIDs

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationAssignmentsByPositionIDs(string _positionIDs, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetApplicationAssignmentsByPositionIDs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_positionIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_positionIDs) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationAssignmentsByPositionIDsAsync(string _positionIDs, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationAssignmentsByPositionIDs(_positionIDs, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationAssignmentsByPositionIDsDapperAsync<T>(string _positionIDs, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetApplicationAssignmentsByPositionIDs",new {APositionIDs=string.IsNullOrWhiteSpace(_positionIDs) ? _positionIDs : ReplaceArabicWithPersianChars(_positionIDs)} , timeout );
}

public ResultSet GetApplicationAssignmentsByPositionIDs(string _positionIDs, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationAssignmentsByPositionIDs(_positionIDs, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSsoUser

public System.Data.SqlClient.SqlCommand GetCommand_GetSsoUser(string _userID, string _userHash, string _callBackUrl, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetSsoUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userID) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userID) }, 
					new Parameter { Name = "@AUserHash", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userHash) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userHash) }, 
					new Parameter { Name = "@ACallBackUrl", IsOutput = false, Value = string.IsNullOrWhiteSpace(_callBackUrl) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_callBackUrl) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSsoUserAsync(string _userID, string _userHash, string _callBackUrl, int? timeout = null)
{
	using(var cmd = GetCommand_GetSsoUser(_userID, _userHash, _callBackUrl, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSsoUserDapperAsync<T>(string _userID, string _userHash, string _callBackUrl, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetSsoUser",new {AUserID=string.IsNullOrWhiteSpace(_userID) ? _userID : ReplaceArabicWithPersianChars(_userID),AUserHash=string.IsNullOrWhiteSpace(_userHash) ? _userHash : ReplaceArabicWithPersianChars(_userHash),ACallBackUrl=string.IsNullOrWhiteSpace(_callBackUrl) ? _callBackUrl : ReplaceArabicWithPersianChars(_callBackUrl)} , timeout );
}

public ResultSet GetSsoUser(string _userID, string _userHash, string _callBackUrl, int? timeout = null)
{
	using(var cmd = GetCommand_GetSsoUser(_userID, _userHash, _callBackUrl, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNeededIndividualsForOmidBatchVaccineInquiry

public System.Data.SqlClient.SqlCommand GetCommand_GetNeededIndividualsForOmidBatchVaccineInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetNeededIndividualsForOmidBatchVaccineInquiry", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNeededIndividualsForOmidBatchVaccineInquiryAsync(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForOmidBatchVaccineInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNeededIndividualsForOmidBatchVaccineInquiryDapperAsync<T>(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetNeededIndividualsForOmidBatchVaccineInquiry",new {APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNeededIndividualsForOmidBatchVaccineInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForOmidBatchVaccineInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region UpdateListPositionEnableDisable

public System.Data.SqlClient.SqlCommand GetCommand_UpdateListPositionEnableDisable(string _iDs, byte? _enableState, int? timeout = null)
{
var cmd = base.CreateCommand("org.spUpdateListPositionEnableDisable", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_iDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_iDs) }, 
					new Parameter { Name = "@AEnableState", IsOutput = false, Value = _enableState == null ? DBNull.Value : (object)_enableState }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UpdateListPositionEnableDisableAsync(string _iDs, byte? _enableState, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateListPositionEnableDisable(_iDs, _enableState, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UpdateListPositionEnableDisableDapperAsync<T>(string _iDs, byte? _enableState, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spUpdateListPositionEnableDisable",new {AIDs=string.IsNullOrWhiteSpace(_iDs) ? _iDs : ReplaceArabicWithPersianChars(_iDs),AEnableState=_enableState} , timeout );
}

public ResultSet UpdateListPositionEnableDisable(string _iDs, byte? _enableState, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateListPositionEnableDisable(_iDs, _enableState, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNeededIndividualsForOmidVaccineInquiry

public System.Data.SqlClient.SqlCommand GetCommand_GetNeededIndividualsForOmidVaccineInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetNeededIndividualsForOmidVaccineInquiry", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNeededIndividualsForOmidVaccineInquiryAsync(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForOmidVaccineInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNeededIndividualsForOmidVaccineInquiryDapperAsync<T>(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetNeededIndividualsForOmidVaccineInquiry",new {APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNeededIndividualsForOmidVaccineInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForOmidVaccineInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteWebServiceUserPermission

public System.Data.SqlClient.SqlCommand GetCommand_DeleteWebServiceUserPermission(Guid? _id, Guid? _curentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteWebServiceUserPermission", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurentUserID", IsOutput = false, Value = _curentUserID == null ? DBNull.Value : (object)_curentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteWebServiceUserPermissionAsync(Guid? _id, Guid? _curentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteWebServiceUserPermission(_id, _curentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteWebServiceUserPermissionDapperAsync<T>(Guid? _id, Guid? _curentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteWebServiceUserPermission",new {AID=_id,ACurentUserID=_curentUserID} , timeout );
}

public ResultSet DeleteWebServiceUserPermission(Guid? _id, Guid? _curentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteWebServiceUserPermission(_id, _curentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserByUserNameMasterPass

public System.Data.SqlClient.SqlCommand GetCommand_GetUserByUserNameMasterPass(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserByUserNameMasterPass", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
					new Parameter { Name = "@APassword", IsOutput = false, Value = string.IsNullOrWhiteSpace(_password) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_password) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserByUserNameMasterPassAsync(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByUserNameMasterPass(_userName, _password, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserByUserNameMasterPassDapperAsync<T>(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserByUserNameMasterPass",new {AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName),APassword=string.IsNullOrWhiteSpace(_password) ? _password : ReplaceArabicWithPersianChars(_password),AApplicationID=_applicationID,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet GetUserByUserNameMasterPass(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByUserNameMasterPass(_userName, _password, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNeededIndividualsForRetirementInquiry

public System.Data.SqlClient.SqlCommand GetCommand_GetNeededIndividualsForRetirementInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetNeededIndividualsForRetirementInquiry", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNeededIndividualsForRetirementInquiryAsync(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForRetirementInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNeededIndividualsForRetirementInquiryDapperAsync<T>(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetNeededIndividualsForRetirementInquiry",new {APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNeededIndividualsForRetirementInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForRetirementInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceUserPermission

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceUserPermission(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceUserPermission", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceUserPermissionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUserPermission(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceUserPermissionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceUserPermission",new {AID=_id} , timeout );
}

public ResultSet GetWebServiceUserPermission(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUserPermission(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region CreateWebServiceUserAction

public System.Data.SqlClient.SqlCommand GetCommand_CreateWebServiceUserAction(Guid? _id, Guid? _actionID, Guid? _userID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spCreateWebServiceUserAction", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AActionID", IsOutput = false, Value = _actionID == null ? DBNull.Value : (object)_actionID }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> CreateWebServiceUserActionAsync(Guid? _id, Guid? _actionID, Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_CreateWebServiceUserAction(_id, _actionID, _userID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> CreateWebServiceUserActionDapperAsync<T>(Guid? _id, Guid? _actionID, Guid? _userID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spCreateWebServiceUserAction",new {AID=_id,AActionID=_actionID,AUserID=_userID} , timeout );
}

public ResultSet CreateWebServiceUserAction(Guid? _id, Guid? _actionID, Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_CreateWebServiceUserAction(_id, _actionID, _userID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteWebServiceUserAction

public System.Data.SqlClient.SqlCommand GetCommand_DeleteWebServiceUserAction(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteWebServiceUserAction", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteWebServiceUserActionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteWebServiceUserAction(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteWebServiceUserActionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteWebServiceUserAction",new {AID=_id} , timeout );
}

public ResultSet DeleteWebServiceUserAction(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteWebServiceUserAction(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceUserAction

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceUserAction(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceUserAction", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceUserActionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUserAction(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceUserActionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceUserAction",new {AID=_id} , timeout );
}

public ResultSet GetWebServiceUserAction(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUserAction(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIndividualByNationalCode

public System.Data.SqlClient.SqlCommand GetCommand_GetIndividualByNationalCode(string _nationalCode, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetIndividualByNationalCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIndividualByNationalCodeAsync(string _nationalCode, int? timeout = null)
{
	using(var cmd = GetCommand_GetIndividualByNationalCode(_nationalCode, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIndividualByNationalCodeDapperAsync<T>(string _nationalCode, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetIndividualByNationalCode",new {ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode)} , timeout );
}

public ResultSet GetIndividualByNationalCode(string _nationalCode, int? timeout = null)
{
	using(var cmd = GetCommand_GetIndividualByNationalCode(_nationalCode, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNeededIndividualsForVaccineInquiry2

public System.Data.SqlClient.SqlCommand GetCommand_GetNeededIndividualsForVaccineInquiry2(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetNeededIndividualsForVaccineInquiry2", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNeededIndividualsForVaccineInquiry2Async(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForVaccineInquiry2(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNeededIndividualsForVaccineInquiry2DapperAsync<T>(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetNeededIndividualsForVaccineInquiry2",new {APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNeededIndividualsForVaccineInquiry2(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNeededIndividualsForVaccineInquiry2(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteOutsideSetting

public System.Data.SqlClient.SqlCommand GetCommand_DeleteOutsideSetting(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteOutsideSetting", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteOutsideSettingAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteOutsideSetting(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteOutsideSettingDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteOutsideSetting",new {AID=_id} , timeout );
}

public ResultSet DeleteOutsideSetting(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteOutsideSetting(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetRepeatedIndividuals

public System.Data.SqlClient.SqlCommand GetCommand_GetRepeatedIndividuals(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetRepeatedIndividuals", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetRepeatedIndividualsAsync(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetRepeatedIndividuals(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetRepeatedIndividualsDapperAsync<T>(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetRepeatedIndividuals",new {APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetRepeatedIndividuals(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetRepeatedIndividuals(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetOutsideSetting

public System.Data.SqlClient.SqlCommand GetCommand_GetOutsideSetting(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetOutsideSetting", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetOutsideSettingAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetOutsideSetting(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetOutsideSettingDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetOutsideSetting",new {AID=_id} , timeout );
}

public ResultSet GetOutsideSetting(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetOutsideSetting(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPosition

public System.Data.SqlClient.SqlCommand GetCommand_GetPosition(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPosition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPosition(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPosition",new {AID=_id} , timeout );
}

public ResultSet GetPosition(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPosition(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyOutsideSetting

public System.Data.SqlClient.SqlCommand GetCommand_ModifyOutsideSetting(bool? _isNewRecord, Guid? _id, byte? _elementType, bool? _show, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyOutsideSetting", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AElementType", IsOutput = false, Value = _elementType == null ? DBNull.Value : (object)_elementType }, 
					new Parameter { Name = "@AShow", IsOutput = false, Value = _show == null ? DBNull.Value : (object)_show }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyOutsideSettingAsync(bool? _isNewRecord, Guid? _id, byte? _elementType, bool? _show, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyOutsideSetting(_isNewRecord, _id, _elementType, _show, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyOutsideSettingDapperAsync<T>(bool? _isNewRecord, Guid? _id, byte? _elementType, bool? _show, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyOutsideSetting",new {AIsNewRecord=_isNewRecord,AID=_id,AElementType=_elementType,AShow=_show} , timeout );
}

public ResultSet ModifyOutsideSetting(bool? _isNewRecord, Guid? _id, byte? _elementType, bool? _show, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyOutsideSetting(_isNewRecord, _id, _elementType, _show, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPasswordSettings

public System.Data.SqlClient.SqlCommand GetCommand_GetPasswordSettings(int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPasswordSettings", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPasswordSettingsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetPasswordSettings(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPasswordSettingsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPasswordSettings",new {} , timeout );
}

public ResultSet GetPasswordSettings(int? timeout = null)
{
	using(var cmd = GetCommand_GetPasswordSettings(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyPasswordSettings

public System.Data.SqlClient.SqlCommand GetCommand_ModifyPasswordSettings(byte? _characterLength, bool? _number, bool? _upper, bool? _lower, bool? _special, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyPasswordSettings", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACharacterLength", IsOutput = false, Value = _characterLength == null ? DBNull.Value : (object)_characterLength }, 
					new Parameter { Name = "@ANumber", IsOutput = false, Value = _number == null ? DBNull.Value : (object)_number }, 
					new Parameter { Name = "@AUpper", IsOutput = false, Value = _upper == null ? DBNull.Value : (object)_upper }, 
					new Parameter { Name = "@ALower", IsOutput = false, Value = _lower == null ? DBNull.Value : (object)_lower }, 
					new Parameter { Name = "@ASpecial", IsOutput = false, Value = _special == null ? DBNull.Value : (object)_special }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyPasswordSettingsAsync(byte? _characterLength, bool? _number, bool? _upper, bool? _lower, bool? _special, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPasswordSettings(_characterLength, _number, _upper, _lower, _special, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyPasswordSettingsDapperAsync<T>(byte? _characterLength, bool? _number, bool? _upper, bool? _lower, bool? _special, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyPasswordSettings",new {ACharacterLength=_characterLength,ANumber=_number,AUpper=_upper,ALower=_lower,ASpecial=_special} , timeout );
}

public ResultSet ModifyPasswordSettings(byte? _characterLength, bool? _number, bool? _upper, bool? _lower, bool? _special, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPasswordSettings(_characterLength, _number, _upper, _lower, _special, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyApplication

public System.Data.SqlClient.SqlCommand GetCommand_ModifyApplication(bool? _isNewRecord, Guid? _id, string _code, string _name, bool? _enabled, string _abbreviation, string _comment, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyApplication", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@AAbbreviation", IsOutput = false, Value = string.IsNullOrWhiteSpace(_abbreviation) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_abbreviation) }, 
					new Parameter { Name = "@AComment", IsOutput = false, Value = string.IsNullOrWhiteSpace(_comment) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_comment) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyApplicationAsync(bool? _isNewRecord, Guid? _id, string _code, string _name, bool? _enabled, string _abbreviation, string _comment, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplication(_isNewRecord, _id, _code, _name, _enabled, _abbreviation, _comment, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyApplicationDapperAsync<T>(bool? _isNewRecord, Guid? _id, string _code, string _name, bool? _enabled, string _abbreviation, string _comment, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyApplication",new {AIsNewRecord=_isNewRecord,AID=_id,ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AEnabled=_enabled,AAbbreviation=string.IsNullOrWhiteSpace(_abbreviation) ? _abbreviation : ReplaceArabicWithPersianChars(_abbreviation),AComment=string.IsNullOrWhiteSpace(_comment) ? _comment : ReplaceArabicWithPersianChars(_comment),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyApplication(bool? _isNewRecord, Guid? _id, string _code, string _name, bool? _enabled, string _abbreviation, string _comment, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplication(_isNewRecord, _id, _code, _name, _enabled, _abbreviation, _comment, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeletePlace

public System.Data.SqlClient.SqlCommand GetCommand_DeletePlace(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeletePlace", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeletePlaceAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeletePlace(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeletePlaceDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeletePlace",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeletePlace(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeletePlace(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentsBudgetWithHierarchy

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentsBudgetWithHierarchy(Guid? _parentID, byte? _enableType, string _code, string _budgetCode, string _name, string _codes, int? _level, bool? _searchWithHierarchy, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentsBudgetWithHierarchy", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AEnableType", IsOutput = false, Value = _enableType == null ? DBNull.Value : (object)_enableType }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@ABudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_budgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_budgetCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ACodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_codes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_codes) }, 
					new Parameter { Name = "@ALevel", IsOutput = false, Value = _level == null ? DBNull.Value : (object)_level }, 
					new Parameter { Name = "@ASearchWithHierarchy", IsOutput = false, Value = _searchWithHierarchy == null ? DBNull.Value : (object)_searchWithHierarchy }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentsBudgetWithHierarchyAsync(Guid? _parentID, byte? _enableType, string _code, string _budgetCode, string _name, string _codes, int? _level, bool? _searchWithHierarchy, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsBudgetWithHierarchy(_parentID, _enableType, _code, _budgetCode, _name, _codes, _level, _searchWithHierarchy, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentsBudgetWithHierarchyDapperAsync<T>(Guid? _parentID, byte? _enableType, string _code, string _budgetCode, string _name, string _codes, int? _level, bool? _searchWithHierarchy, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentsBudgetWithHierarchy",new {AParentID=_parentID,AEnableType=_enableType,ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),ABudgetCode=string.IsNullOrWhiteSpace(_budgetCode) ? _budgetCode : ReplaceArabicWithPersianChars(_budgetCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ACodes=string.IsNullOrWhiteSpace(_codes) ? _codes : ReplaceArabicWithPersianChars(_codes),ALevel=_level,ASearchWithHierarchy=_searchWithHierarchy,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDepartmentsBudgetWithHierarchy(Guid? _parentID, byte? _enableType, string _code, string _budgetCode, string _name, string _codes, int? _level, bool? _searchWithHierarchy, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsBudgetWithHierarchy(_parentID, _enableType, _code, _budgetCode, _name, _codes, _level, _searchWithHierarchy, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPlace

public System.Data.SqlClient.SqlCommand GetCommand_GetPlace(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPlace", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPlaceAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPlace(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPlaceDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPlace",new {AID=_id} , timeout );
}

public ResultSet GetPlace(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPlace(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIsDepartmentExist

public System.Data.SqlClient.SqlCommand GetCommand_GetIsDepartmentExist(string _name, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetIsDepartmentExist", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIsDepartmentExistAsync(string _name, int? timeout = null)
{
	using(var cmd = GetCommand_GetIsDepartmentExist(_name, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIsDepartmentExistDapperAsync<T>(string _name, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetIsDepartmentExist",new {AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name)} , timeout );
}

public ResultSet GetIsDepartmentExist(string _name, int? timeout = null)
{
	using(var cmd = GetCommand_GetIsDepartmentExist(_name, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPlaceByCode

public System.Data.SqlClient.SqlCommand GetCommand_GetPlaceByCode(string _code, byte? _type, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPlaceByCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPlaceByCodeAsync(string _code, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_GetPlaceByCode(_code, _type, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPlaceByCodeDapperAsync<T>(string _code, byte? _type, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPlaceByCode",new {ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),AType=_type} , timeout );
}

public ResultSet GetPlaceByCode(string _code, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_GetPlaceByCode(_code, _type, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyPlace

public System.Data.SqlClient.SqlCommand GetCommand_ModifyPlace(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _node, byte? _type, string _name, string _latinName, byte? _developmentType, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyPlace", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@ANode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_node) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_node) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ALatinName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_latinName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_latinName) }, 
					new Parameter { Name = "@ADevelopmentType", IsOutput = false, Value = _developmentType == null ? DBNull.Value : (object)_developmentType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyPlaceAsync(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _node, byte? _type, string _name, string _latinName, byte? _developmentType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPlace(_isNewRecord, _id, _parentID, _node, _type, _name, _latinName, _developmentType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyPlaceDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _node, byte? _type, string _name, string _latinName, byte? _developmentType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyPlace",new {AIsNewRecord=_isNewRecord,AID=_id,AParentID=_parentID,ANode=string.IsNullOrWhiteSpace(_node) ? _node : ReplaceArabicWithPersianChars(_node),AType=_type,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ALatinName=string.IsNullOrWhiteSpace(_latinName) ? _latinName : ReplaceArabicWithPersianChars(_latinName),ADevelopmentType=_developmentType} , timeout );
}

public ResultSet ModifyPlace(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _node, byte? _type, string _name, string _latinName, byte? _developmentType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPlace(_isNewRecord, _id, _parentID, _node, _type, _name, _latinName, _developmentType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region TestAhmad

public System.Data.SqlClient.SqlCommand GetCommand_TestAhmad(int? timeout = null)
{
var cmd = base.CreateCommand("org.spTestAhmad", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> TestAhmadAsync(int? timeout = null)
{
	using(var cmd = GetCommand_TestAhmad(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> TestAhmadDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spTestAhmad",new {} , timeout );
}

public ResultSet TestAhmad(int? timeout = null)
{
	using(var cmd = GetCommand_TestAhmad(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeletePosition

public System.Data.SqlClient.SqlCommand GetCommand_DeletePosition(Guid? _id, Guid? _removerID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeletePosition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ARemoverID", IsOutput = false, Value = _removerID == null ? DBNull.Value : (object)_removerID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeletePositionAsync(Guid? _id, Guid? _removerID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeletePosition(_id, _removerID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeletePositionDapperAsync<T>(Guid? _id, Guid? _removerID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeletePosition",new {AID=_id,ARemoverID=_removerID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeletePosition(Guid? _id, Guid? _removerID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeletePosition(_id, _removerID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationByUser

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationByUser(Guid? _userID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetApplicationByUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationByUserAsync(Guid? _userID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationByUser(_userID, _getTotalCount, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationByUserDapperAsync<T>(Guid? _userID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetApplicationByUser",new {AUserID=_userID,AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetApplicationByUser(Guid? _userID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationByUser(_userID, _getTotalCount, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentByUser

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentByUser(Guid? _userID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentByUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentByUserAsync(Guid? _userID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentByUser(_userID, _getTotalCount, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentByUserDapperAsync<T>(Guid? _userID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentByUser",new {AUserID=_userID,AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDepartmentByUser(Guid? _userID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentByUser(_userID, _getTotalCount, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetOnlineUsersAndPositionsCount

public System.Data.SqlClient.SqlCommand GetCommand_GetOnlineUsersAndPositionsCount(Guid? _applicationID, int? _accessTokenExpireTimeSpan, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetOnlineUsersAndPositionsCount", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AAccessTokenExpireTimeSpan", IsOutput = false, Value = _accessTokenExpireTimeSpan == null ? DBNull.Value : (object)_accessTokenExpireTimeSpan }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetOnlineUsersAndPositionsCountAsync(Guid? _applicationID, int? _accessTokenExpireTimeSpan, int? timeout = null)
{
	using(var cmd = GetCommand_GetOnlineUsersAndPositionsCount(_applicationID, _accessTokenExpireTimeSpan, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetOnlineUsersAndPositionsCountDapperAsync<T>(Guid? _applicationID, int? _accessTokenExpireTimeSpan, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetOnlineUsersAndPositionsCount",new {AApplicationID=_applicationID,AAccessTokenExpireTimeSpan=_accessTokenExpireTimeSpan} , timeout );
}

public ResultSet GetOnlineUsersAndPositionsCount(Guid? _applicationID, int? _accessTokenExpireTimeSpan, int? timeout = null)
{
	using(var cmd = GetCommand_GetOnlineUsersAndPositionsCount(_applicationID, _accessTokenExpireTimeSpan, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyIndividual

public System.Data.SqlClient.SqlCommand GetCommand_ModifyIndividual(bool? _isNewRecord, Guid? _id, string _firstName, string _lastName, string _fatherName, string _bCNumber, byte? _gender, bool? _isDead, string _nationalCode, DateTime? _birthDate, byte? _confirmType, byte? _isaargar, Guid? _bpProvinceID, string _bpProvinceName, Guid? _bpCityID, string _bpCityName, DateTime? _confirmDate, bool? _withoutInquiry, string _cellPhone, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyIndividual", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AFirstName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_firstName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_firstName) }, 
					new Parameter { Name = "@ALastName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastName) }, 
					new Parameter { Name = "@AFatherName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_fatherName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_fatherName) }, 
					new Parameter { Name = "@ABCNumber", IsOutput = false, Value = string.IsNullOrWhiteSpace(_bCNumber) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_bCNumber) }, 
					new Parameter { Name = "@AGender", IsOutput = false, Value = _gender == null ? DBNull.Value : (object)_gender }, 
					new Parameter { Name = "@AIsDead", IsOutput = false, Value = _isDead == null ? DBNull.Value : (object)_isDead }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ABirthDate", IsOutput = false, Value = _birthDate == null ? DBNull.Value : (object)_birthDate }, 
					new Parameter { Name = "@AConfirmType", IsOutput = false, Value = _confirmType == null ? DBNull.Value : (object)_confirmType }, 
					new Parameter { Name = "@AIsaargar", IsOutput = false, Value = _isaargar == null ? DBNull.Value : (object)_isaargar }, 
					new Parameter { Name = "@ABpProvinceID", IsOutput = false, Value = _bpProvinceID == null ? DBNull.Value : (object)_bpProvinceID }, 
					new Parameter { Name = "@ABpProvinceName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_bpProvinceName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_bpProvinceName) }, 
					new Parameter { Name = "@ABpCityID", IsOutput = false, Value = _bpCityID == null ? DBNull.Value : (object)_bpCityID }, 
					new Parameter { Name = "@ABpCityName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_bpCityName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_bpCityName) }, 
					new Parameter { Name = "@AConfirmDate", IsOutput = false, Value = _confirmDate == null ? DBNull.Value : (object)_confirmDate }, 
					new Parameter { Name = "@AWithoutInquiry", IsOutput = false, Value = _withoutInquiry == null ? DBNull.Value : (object)_withoutInquiry }, 
					new Parameter { Name = "@ACellPhone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellPhone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellPhone) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyIndividualAsync(bool? _isNewRecord, Guid? _id, string _firstName, string _lastName, string _fatherName, string _bCNumber, byte? _gender, bool? _isDead, string _nationalCode, DateTime? _birthDate, byte? _confirmType, byte? _isaargar, Guid? _bpProvinceID, string _bpProvinceName, Guid? _bpCityID, string _bpCityName, DateTime? _confirmDate, bool? _withoutInquiry, string _cellPhone, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyIndividual(_isNewRecord, _id, _firstName, _lastName, _fatherName, _bCNumber, _gender, _isDead, _nationalCode, _birthDate, _confirmType, _isaargar, _bpProvinceID, _bpProvinceName, _bpCityID, _bpCityName, _confirmDate, _withoutInquiry, _cellPhone, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyIndividualDapperAsync<T>(bool? _isNewRecord, Guid? _id, string _firstName, string _lastName, string _fatherName, string _bCNumber, byte? _gender, bool? _isDead, string _nationalCode, DateTime? _birthDate, byte? _confirmType, byte? _isaargar, Guid? _bpProvinceID, string _bpProvinceName, Guid? _bpCityID, string _bpCityName, DateTime? _confirmDate, bool? _withoutInquiry, string _cellPhone, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyIndividual",new {AIsNewRecord=_isNewRecord,AID=_id,AFirstName=string.IsNullOrWhiteSpace(_firstName) ? _firstName : ReplaceArabicWithPersianChars(_firstName),ALastName=string.IsNullOrWhiteSpace(_lastName) ? _lastName : ReplaceArabicWithPersianChars(_lastName),AFatherName=string.IsNullOrWhiteSpace(_fatherName) ? _fatherName : ReplaceArabicWithPersianChars(_fatherName),ABCNumber=string.IsNullOrWhiteSpace(_bCNumber) ? _bCNumber : ReplaceArabicWithPersianChars(_bCNumber),AGender=_gender,AIsDead=_isDead,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ABirthDate=_birthDate,AConfirmType=_confirmType,AIsaargar=_isaargar,ABpProvinceID=_bpProvinceID,ABpProvinceName=string.IsNullOrWhiteSpace(_bpProvinceName) ? _bpProvinceName : ReplaceArabicWithPersianChars(_bpProvinceName),ABpCityID=_bpCityID,ABpCityName=string.IsNullOrWhiteSpace(_bpCityName) ? _bpCityName : ReplaceArabicWithPersianChars(_bpCityName),AConfirmDate=_confirmDate,AWithoutInquiry=_withoutInquiry,ACellPhone=string.IsNullOrWhiteSpace(_cellPhone) ? _cellPhone : ReplaceArabicWithPersianChars(_cellPhone)} , timeout );
}

public ResultSet ModifyIndividual(bool? _isNewRecord, Guid? _id, string _firstName, string _lastName, string _fatherName, string _bCNumber, byte? _gender, bool? _isDead, string _nationalCode, DateTime? _birthDate, byte? _confirmType, byte? _isaargar, Guid? _bpProvinceID, string _bpProvinceName, Guid? _bpCityID, string _bpCityName, DateTime? _confirmDate, bool? _withoutInquiry, string _cellPhone, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyIndividual(_isNewRecord, _id, _firstName, _lastName, _fatherName, _bCNumber, _gender, _isDead, _nationalCode, _birthDate, _confirmType, _isaargar, _bpProvinceID, _bpProvinceName, _bpCityID, _bpCityName, _confirmDate, _withoutInquiry, _cellPhone, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyDepartmentPostalCode

public System.Data.SqlClient.SqlCommand GetCommand_ModifyDepartmentPostalCode(Guid? _id, string _postalCode, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyDepartmentPostalCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@APostalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_postalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_postalCode) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyDepartmentPostalCodeAsync(Guid? _id, string _postalCode, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDepartmentPostalCode(_id, _postalCode, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyDepartmentPostalCodeDapperAsync<T>(Guid? _id, string _postalCode, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyDepartmentPostalCode",new {AID=_id,APostalCode=string.IsNullOrWhiteSpace(_postalCode) ? _postalCode : ReplaceArabicWithPersianChars(_postalCode)} , timeout );
}

public ResultSet ModifyDepartmentPostalCode(Guid? _id, string _postalCode, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDepartmentPostalCode(_id, _postalCode, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUser

public System.Data.SqlClient.SqlCommand GetCommand_GetUser(Guid? _id, string _userName, string _nationalCode, string _email, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AEmail", IsOutput = false, Value = string.IsNullOrWhiteSpace(_email) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_email) }, 
					new Parameter { Name = "@APassword", IsOutput = false, Value = string.IsNullOrWhiteSpace(_password) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_password) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserAsync(Guid? _id, string _userName, string _nationalCode, string _email, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUser(_id, _userName, _nationalCode, _email, _password, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserDapperAsync<T>(Guid? _id, string _userName, string _nationalCode, string _email, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUser",new {AID=_id,AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName),ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AEmail=string.IsNullOrWhiteSpace(_email) ? _email : ReplaceArabicWithPersianChars(_email),APassword=string.IsNullOrWhiteSpace(_password) ? _password : ReplaceArabicWithPersianChars(_password),AApplicationID=_applicationID,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet GetUser(Guid? _id, string _userName, string _nationalCode, string _email, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUser(_id, _userName, _nationalCode, _email, _password, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionsWithRoles

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionsWithRoles(string _iDs, Guid? _applicationID, Guid? _departmentID, string _departmentName, byte? _type, string _types, byte? _userType, Guid? _userID, string _nationalCode, string _name, string _firstName, string _lastName, string _email, string _cellphone, byte? _enableState, Guid? _roleID, string _departmentIDs, byte? _subType, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionsWithRoles", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_iDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_iDs) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@ADepartmentName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_departmentName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_departmentName) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ATypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_types) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_types) }, 
					new Parameter { Name = "@AUserType", IsOutput = false, Value = _userType == null ? DBNull.Value : (object)_userType }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AFirstName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_firstName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_firstName) }, 
					new Parameter { Name = "@ALastName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastName) }, 
					new Parameter { Name = "@AEmail", IsOutput = false, Value = string.IsNullOrWhiteSpace(_email) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_email) }, 
					new Parameter { Name = "@ACellphone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellphone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellphone) }, 
					new Parameter { Name = "@AEnableState", IsOutput = false, Value = _enableState == null ? DBNull.Value : (object)_enableState }, 
					new Parameter { Name = "@ARoleID", IsOutput = false, Value = _roleID == null ? DBNull.Value : (object)_roleID }, 
					new Parameter { Name = "@ADepartmentIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_departmentIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_departmentIDs) }, 
					new Parameter { Name = "@ASubType", IsOutput = false, Value = _subType == null ? DBNull.Value : (object)_subType }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionsWithRolesAsync(string _iDs, Guid? _applicationID, Guid? _departmentID, string _departmentName, byte? _type, string _types, byte? _userType, Guid? _userID, string _nationalCode, string _name, string _firstName, string _lastName, string _email, string _cellphone, byte? _enableState, Guid? _roleID, string _departmentIDs, byte? _subType, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionsWithRoles(_iDs, _applicationID, _departmentID, _departmentName, _type, _types, _userType, _userID, _nationalCode, _name, _firstName, _lastName, _email, _cellphone, _enableState, _roleID, _departmentIDs, _subType, _getTotalCount, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionsWithRolesDapperAsync<T>(string _iDs, Guid? _applicationID, Guid? _departmentID, string _departmentName, byte? _type, string _types, byte? _userType, Guid? _userID, string _nationalCode, string _name, string _firstName, string _lastName, string _email, string _cellphone, byte? _enableState, Guid? _roleID, string _departmentIDs, byte? _subType, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionsWithRoles",new {AIDs=string.IsNullOrWhiteSpace(_iDs) ? _iDs : ReplaceArabicWithPersianChars(_iDs),AApplicationID=_applicationID,ADepartmentID=_departmentID,ADepartmentName=string.IsNullOrWhiteSpace(_departmentName) ? _departmentName : ReplaceArabicWithPersianChars(_departmentName),AType=_type,ATypes=string.IsNullOrWhiteSpace(_types) ? _types : ReplaceArabicWithPersianChars(_types),AUserType=_userType,AUserID=_userID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AFirstName=string.IsNullOrWhiteSpace(_firstName) ? _firstName : ReplaceArabicWithPersianChars(_firstName),ALastName=string.IsNullOrWhiteSpace(_lastName) ? _lastName : ReplaceArabicWithPersianChars(_lastName),AEmail=string.IsNullOrWhiteSpace(_email) ? _email : ReplaceArabicWithPersianChars(_email),ACellphone=string.IsNullOrWhiteSpace(_cellphone) ? _cellphone : ReplaceArabicWithPersianChars(_cellphone),AEnableState=_enableState,ARoleID=_roleID,ADepartmentIDs=string.IsNullOrWhiteSpace(_departmentIDs) ? _departmentIDs : ReplaceArabicWithPersianChars(_departmentIDs),ASubType=_subType,AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetPositionsWithRoles(string _iDs, Guid? _applicationID, Guid? _departmentID, string _departmentName, byte? _type, string _types, byte? _userType, Guid? _userID, string _nationalCode, string _name, string _firstName, string _lastName, string _email, string _cellphone, byte? _enableState, Guid? _roleID, string _departmentIDs, byte? _subType, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionsWithRoles(_iDs, _applicationID, _departmentID, _departmentName, _type, _types, _userType, _userID, _nationalCode, _name, _firstName, _lastName, _email, _cellphone, _enableState, _roleID, _departmentIDs, _subType, _getTotalCount, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeActiveRefreshToken

public System.Data.SqlClient.SqlCommand GetCommand_DeActiveRefreshToken(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeActiveRefreshToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeActiveRefreshTokenAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeActiveRefreshToken(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeActiveRefreshTokenDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeActiveRefreshToken",new {AID=_id} , timeout );
}

public ResultSet DeActiveRefreshToken(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeActiveRefreshToken(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserByMasterPass

public System.Data.SqlClient.SqlCommand GetCommand_GetUserByMasterPass(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserByMasterPass", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
					new Parameter { Name = "@APassword", IsOutput = false, Value = string.IsNullOrWhiteSpace(_password) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_password) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserByMasterPassAsync(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByMasterPass(_userName, _password, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserByMasterPassDapperAsync<T>(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserByMasterPass",new {AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName),APassword=string.IsNullOrWhiteSpace(_password) ? _password : ReplaceArabicWithPersianChars(_password),AApplicationID=_applicationID,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet GetUserByMasterPass(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByMasterPass(_userName, _password, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceUserActions

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceUserActions(string _userName, Guid? _organID, Guid? _userID, byte? _enabled, string _comment, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceUserActions", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
					new Parameter { Name = "@AOrganID", IsOutput = false, Value = _organID == null ? DBNull.Value : (object)_organID }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@AComment", IsOutput = false, Value = string.IsNullOrWhiteSpace(_comment) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_comment) }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceUserActionsAsync(string _userName, Guid? _organID, Guid? _userID, byte? _enabled, string _comment, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUserActions(_userName, _organID, _userID, _enabled, _comment, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceUserActionsDapperAsync<T>(string _userName, Guid? _organID, Guid? _userID, byte? _enabled, string _comment, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceUserActions",new {AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName),AOrganID=_organID,AUserID=_userID,AEnabled=_enabled,AComment=string.IsNullOrWhiteSpace(_comment) ? _comment : ReplaceArabicWithPersianChars(_comment),ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetWebServiceUserActions(string _userName, Guid? _organID, Guid? _userID, byte? _enabled, string _comment, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUserActions(_userName, _organID, _userID, _enabled, _comment, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSuperiorPosition

public System.Data.SqlClient.SqlCommand GetCommand_GetSuperiorPosition(Guid? _magistrateID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetSuperiorPosition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AMagistrateID", IsOutput = false, Value = _magistrateID == null ? DBNull.Value : (object)_magistrateID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSuperiorPositionAsync(Guid? _magistrateID, int? timeout = null)
{
	using(var cmd = GetCommand_GetSuperiorPosition(_magistrateID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSuperiorPositionDapperAsync<T>(Guid? _magistrateID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetSuperiorPosition",new {AMagistrateID=_magistrateID} , timeout );
}

public ResultSet GetSuperiorPosition(Guid? _magistrateID, int? timeout = null)
{
	using(var cmd = GetCommand_GetSuperiorPosition(_magistrateID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserByPassword

public System.Data.SqlClient.SqlCommand GetCommand_GetUserByPassword(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserByPassword", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
					new Parameter { Name = "@APassword", IsOutput = false, Value = string.IsNullOrWhiteSpace(_password) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_password) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserByPasswordAsync(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByPassword(_userName, _password, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserByPasswordDapperAsync<T>(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserByPassword",new {AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName),APassword=string.IsNullOrWhiteSpace(_password) ? _password : ReplaceArabicWithPersianChars(_password),AApplicationID=_applicationID,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet GetUserByPassword(string _userName, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByPassword(_userName, _password, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyPosition

public System.Data.SqlClient.SqlCommand GetCommand_ModifyPosition(bool? _isNewRecord, Guid? _id, Guid? _parentID, Guid? _applicationID, Guid? _departmentID, Guid? _userID, byte? _type, string _roleIDs, bool? _enabled, byte? _subType, string _log, Guid? _positionSubTypeID, string _comment, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyPosition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ARoleIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_roleIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_roleIDs) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@ASubType", IsOutput = false, Value = _subType == null ? DBNull.Value : (object)_subType }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
					new Parameter { Name = "@APositionSubTypeID", IsOutput = false, Value = _positionSubTypeID == null ? DBNull.Value : (object)_positionSubTypeID }, 
					new Parameter { Name = "@AComment", IsOutput = false, Value = string.IsNullOrWhiteSpace(_comment) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_comment) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyPositionAsync(bool? _isNewRecord, Guid? _id, Guid? _parentID, Guid? _applicationID, Guid? _departmentID, Guid? _userID, byte? _type, string _roleIDs, bool? _enabled, byte? _subType, string _log, Guid? _positionSubTypeID, string _comment, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPosition(_isNewRecord, _id, _parentID, _applicationID, _departmentID, _userID, _type, _roleIDs, _enabled, _subType, _log, _positionSubTypeID, _comment, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyPositionDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _parentID, Guid? _applicationID, Guid? _departmentID, Guid? _userID, byte? _type, string _roleIDs, bool? _enabled, byte? _subType, string _log, Guid? _positionSubTypeID, string _comment, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyPosition",new {AIsNewRecord=_isNewRecord,AID=_id,AParentID=_parentID,AApplicationID=_applicationID,ADepartmentID=_departmentID,AUserID=_userID,AType=_type,ARoleIDs=string.IsNullOrWhiteSpace(_roleIDs) ? _roleIDs : ReplaceArabicWithPersianChars(_roleIDs),AEnabled=_enabled,ASubType=_subType,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log),APositionSubTypeID=_positionSubTypeID,AComment=string.IsNullOrWhiteSpace(_comment) ? _comment : ReplaceArabicWithPersianChars(_comment)} , timeout );
}

public ResultSet ModifyPosition(bool? _isNewRecord, Guid? _id, Guid? _parentID, Guid? _applicationID, Guid? _departmentID, Guid? _userID, byte? _type, string _roleIDs, bool? _enabled, byte? _subType, string _log, Guid? _positionSubTypeID, string _comment, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPosition(_isNewRecord, _id, _parentID, _applicationID, _departmentID, _userID, _type, _roleIDs, _enabled, _subType, _log, _positionSubTypeID, _comment, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetClientBySsoUser

public System.Data.SqlClient.SqlCommand GetCommand_GetClientBySsoUser(string _userID, string _userHash, string _callBackUrl, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetClientBySsoUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userID) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userID) }, 
					new Parameter { Name = "@AUserHash", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userHash) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userHash) }, 
					new Parameter { Name = "@ACallBackUrl", IsOutput = false, Value = string.IsNullOrWhiteSpace(_callBackUrl) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_callBackUrl) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetClientBySsoUserAsync(string _userID, string _userHash, string _callBackUrl, int? timeout = null)
{
	using(var cmd = GetCommand_GetClientBySsoUser(_userID, _userHash, _callBackUrl, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetClientBySsoUserDapperAsync<T>(string _userID, string _userHash, string _callBackUrl, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetClientBySsoUser",new {AUserID=string.IsNullOrWhiteSpace(_userID) ? _userID : ReplaceArabicWithPersianChars(_userID),AUserHash=string.IsNullOrWhiteSpace(_userHash) ? _userHash : ReplaceArabicWithPersianChars(_userHash),ACallBackUrl=string.IsNullOrWhiteSpace(_callBackUrl) ? _callBackUrl : ReplaceArabicWithPersianChars(_callBackUrl)} , timeout );
}

public ResultSet GetClientBySsoUser(string _userID, string _userHash, string _callBackUrl, int? timeout = null)
{
	using(var cmd = GetCommand_GetClientBySsoUser(_userID, _userHash, _callBackUrl, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteController

public System.Data.SqlClient.SqlCommand GetCommand_DeleteController(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteController", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteControllerAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteController(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteControllerDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteController",new {AID=_id} , timeout );
}

public ResultSet DeleteController(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteController(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region RemoveUserFromPosition

public System.Data.SqlClient.SqlCommand GetCommand_RemoveUserFromPosition(Guid? _positionID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spRemoveUserFromPosition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> RemoveUserFromPositionAsync(Guid? _positionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_RemoveUserFromPosition(_positionID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> RemoveUserFromPositionDapperAsync<T>(Guid? _positionID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spRemoveUserFromPosition",new {APositionID=_positionID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet RemoveUserFromPosition(Guid? _positionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_RemoveUserFromPosition(_positionID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserSetting

public System.Data.SqlClient.SqlCommand GetCommand_GetUserSetting(Guid? _userID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserSetting", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserSettingAsync(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserSetting(_userID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserSettingDapperAsync<T>(Guid? _userID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserSetting",new {AUserID=_userID} , timeout );
}

public ResultSet GetUserSetting(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserSetting(_userID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetDefaultPosition

public System.Data.SqlClient.SqlCommand GetCommand_SetDefaultPosition(Guid? _positionID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spSetDefaultPosition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetDefaultPositionAsync(Guid? _positionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_SetDefaultPosition(_positionID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetDefaultPositionDapperAsync<T>(Guid? _positionID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spSetDefaultPosition",new {APositionID=_positionID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet SetDefaultPosition(Guid? _positionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_SetDefaultPosition(_positionID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceUser

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceUser(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceUserAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUser(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceUserDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceUser",new {AID=_id} , timeout );
}

public ResultSet GetWebServiceUser(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUser(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region UndoIssuedToken

public System.Data.SqlClient.SqlCommand GetCommand_UndoIssuedToken(string _token, bool? _undoOnlyApp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spUndoIssuedToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AToken", IsOutput = false, Value = string.IsNullOrWhiteSpace(_token) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_token) }, 
					new Parameter { Name = "@AUndoOnlyApp", IsOutput = false, Value = _undoOnlyApp == null ? DBNull.Value : (object)_undoOnlyApp }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UndoIssuedTokenAsync(string _token, bool? _undoOnlyApp, int? timeout = null)
{
	using(var cmd = GetCommand_UndoIssuedToken(_token, _undoOnlyApp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UndoIssuedTokenDapperAsync<T>(string _token, bool? _undoOnlyApp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spUndoIssuedToken",new {AToken=string.IsNullOrWhiteSpace(_token) ? _token : ReplaceArabicWithPersianChars(_token),AUndoOnlyApp=_undoOnlyApp} , timeout );
}

public ResultSet UndoIssuedToken(string _token, bool? _undoOnlyApp, int? timeout = null)
{
	using(var cmd = GetCommand_UndoIssuedToken(_token, _undoOnlyApp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetInquiryDetailsForChart

public System.Data.SqlClient.SqlCommand GetCommand_GetInquiryDetailsForChart(Guid? _webServiceID, DateTime? _creationDateFrom, DateTime? _creationDateTo, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetInquiryDetailsForChart", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AWebServiceID", IsOutput = false, Value = _webServiceID == null ? DBNull.Value : (object)_webServiceID }, 
					new Parameter { Name = "@ACreationDateFrom", IsOutput = false, Value = _creationDateFrom == null ? DBNull.Value : (object)_creationDateFrom }, 
					new Parameter { Name = "@ACreationDateTo", IsOutput = false, Value = _creationDateTo == null ? DBNull.Value : (object)_creationDateTo }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetInquiryDetailsForChartAsync(Guid? _webServiceID, DateTime? _creationDateFrom, DateTime? _creationDateTo, int? timeout = null)
{
	using(var cmd = GetCommand_GetInquiryDetailsForChart(_webServiceID, _creationDateFrom, _creationDateTo, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetInquiryDetailsForChartDapperAsync<T>(Guid? _webServiceID, DateTime? _creationDateFrom, DateTime? _creationDateTo, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetInquiryDetailsForChart",new {AWebServiceID=_webServiceID,ACreationDateFrom=_creationDateFrom,ACreationDateTo=_creationDateTo} , timeout );
}

public ResultSet GetInquiryDetailsForChart(Guid? _webServiceID, DateTime? _creationDateFrom, DateTime? _creationDateTo, int? timeout = null)
{
	using(var cmd = GetCommand_GetInquiryDetailsForChart(_webServiceID, _creationDateFrom, _creationDateTo, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region MapDepartmentsToPosition

public System.Data.SqlClient.SqlCommand GetCommand_MapDepartmentsToPosition(Guid? _applicationID, byte? _positionType, string _mappings, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spMapDepartmentsToPosition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@APositionType", IsOutput = false, Value = _positionType == null ? DBNull.Value : (object)_positionType }, 
					new Parameter { Name = "@AMappings", IsOutput = false, Value = string.IsNullOrWhiteSpace(_mappings) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_mappings) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> MapDepartmentsToPositionAsync(Guid? _applicationID, byte? _positionType, string _mappings, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_MapDepartmentsToPosition(_applicationID, _positionType, _mappings, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> MapDepartmentsToPositionDapperAsync<T>(Guid? _applicationID, byte? _positionType, string _mappings, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spMapDepartmentsToPosition",new {AApplicationID=_applicationID,APositionType=_positionType,AMappings=string.IsNullOrWhiteSpace(_mappings) ? _mappings : ReplaceArabicWithPersianChars(_mappings),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet MapDepartmentsToPosition(Guid? _applicationID, byte? _positionType, string _mappings, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_MapDepartmentsToPosition(_applicationID, _positionType, _mappings, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceUserByUserName

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceUserByUserName(string _userName, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceUserByUserName", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceUserByUserNameAsync(string _userName, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUserByUserName(_userName, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceUserByUserNameDapperAsync<T>(string _userName, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceUserByUserName",new {AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName)} , timeout );
}

public ResultSet GetWebServiceUserByUserName(string _userName, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUserByUserName(_userName, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetInquiryDetails

public System.Data.SqlClient.SqlCommand GetCommand_GetInquiryDetails(Guid? _webServiceID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetInquiryDetails", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AWebServiceID", IsOutput = false, Value = _webServiceID == null ? DBNull.Value : (object)_webServiceID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetInquiryDetailsAsync(Guid? _webServiceID, int? timeout = null)
{
	using(var cmd = GetCommand_GetInquiryDetails(_webServiceID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetInquiryDetailsDapperAsync<T>(Guid? _webServiceID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetInquiryDetails",new {AWebServiceID=_webServiceID} , timeout );
}

public ResultSet GetInquiryDetails(Guid? _webServiceID, int? timeout = null)
{
	using(var cmd = GetCommand_GetInquiryDetails(_webServiceID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyDepartment

public System.Data.SqlClient.SqlCommand GetCommand_ModifyDepartment(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _node, byte? _councilType, byte? _type, byte? _subType, byte? _organType, string _budgetCode, string _name, bool? _enabled, Guid? _provinceID, string _address, string _postalCode, byte? _cOFOG, Guid? _addressID, Guid? _unitTypeID, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, bool? _enableForPostImport, byte? _dashboardIncludeType, DateTime? _topChartApproveDate, DateTime? _elaboratedChartApproveDate, DateTime? _provincialChartApproveDate, bool? _isDiscludedInPakna, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyDepartment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@ANode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_node) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_node) }, 
					new Parameter { Name = "@ACouncilType", IsOutput = false, Value = _councilType == null ? DBNull.Value : (object)_councilType }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ASubType", IsOutput = false, Value = _subType == null ? DBNull.Value : (object)_subType }, 
					new Parameter { Name = "@AOrganType", IsOutput = false, Value = _organType == null ? DBNull.Value : (object)_organType }, 
					new Parameter { Name = "@ABudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_budgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_budgetCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@AProvinceID", IsOutput = false, Value = _provinceID == null ? DBNull.Value : (object)_provinceID }, 
					new Parameter { Name = "@AAddress", IsOutput = false, Value = string.IsNullOrWhiteSpace(_address) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_address) }, 
					new Parameter { Name = "@APostalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_postalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_postalCode) }, 
					new Parameter { Name = "@ACOFOG", IsOutput = false, Value = _cOFOG == null ? DBNull.Value : (object)_cOFOG }, 
					new Parameter { Name = "@AAddressID", IsOutput = false, Value = _addressID == null ? DBNull.Value : (object)_addressID }, 
					new Parameter { Name = "@AUnitTypeID", IsOutput = false, Value = _unitTypeID == null ? DBNull.Value : (object)_unitTypeID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ANeedsChartType", IsOutput = false, Value = _needsChartType == null ? DBNull.Value : (object)_needsChartType }, 
					new Parameter { Name = "@AWebServiceSaveType", IsOutput = false, Value = _webServiceSaveType == null ? DBNull.Value : (object)_webServiceSaveType }, 
					new Parameter { Name = "@AMainOrganType", IsOutput = false, Value = _mainOrganType == null ? DBNull.Value : (object)_mainOrganType }, 
					new Parameter { Name = "@AElaboratedBudgetType", IsOutput = false, Value = _elaboratedBudgetType == null ? DBNull.Value : (object)_elaboratedBudgetType }, 
					new Parameter { Name = "@ATreasurySupervisionType", IsOutput = false, Value = _treasurySupervisionType == null ? DBNull.Value : (object)_treasurySupervisionType }, 
					new Parameter { Name = "@AUserDefinitionReferenceType", IsOutput = false, Value = _userDefinitionReferenceType == null ? DBNull.Value : (object)_userDefinitionReferenceType }, 
					new Parameter { Name = "@ABoardOfTrusteesType", IsOutput = false, Value = _boardOfTrusteesType == null ? DBNull.Value : (object)_boardOfTrusteesType }, 
					new Parameter { Name = "@AArrangementTypeInSalary", IsOutput = false, Value = _arrangementTypeInSalary == null ? DBNull.Value : (object)_arrangementTypeInSalary }, 
					new Parameter { Name = "@ABriefNameType", IsOutput = false, Value = _briefNameType == null ? DBNull.Value : (object)_briefNameType }, 
					new Parameter { Name = "@ADepartmentShowType", IsOutput = false, Value = _departmentShowType == null ? DBNull.Value : (object)_departmentShowType }, 
					new Parameter { Name = "@AEnableForPostImport", IsOutput = false, Value = _enableForPostImport == null ? DBNull.Value : (object)_enableForPostImport }, 
					new Parameter { Name = "@ADashboardIncludeType", IsOutput = false, Value = _dashboardIncludeType == null ? DBNull.Value : (object)_dashboardIncludeType }, 
					new Parameter { Name = "@ATopChartApproveDate", IsOutput = false, Value = _topChartApproveDate == null ? DBNull.Value : (object)_topChartApproveDate }, 
					new Parameter { Name = "@AElaboratedChartApproveDate", IsOutput = false, Value = _elaboratedChartApproveDate == null ? DBNull.Value : (object)_elaboratedChartApproveDate }, 
					new Parameter { Name = "@AProvincialChartApproveDate", IsOutput = false, Value = _provincialChartApproveDate == null ? DBNull.Value : (object)_provincialChartApproveDate }, 
					new Parameter { Name = "@AIsDiscludedInPakna", IsOutput = false, Value = _isDiscludedInPakna == null ? DBNull.Value : (object)_isDiscludedInPakna }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyDepartmentAsync(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _node, byte? _councilType, byte? _type, byte? _subType, byte? _organType, string _budgetCode, string _name, bool? _enabled, Guid? _provinceID, string _address, string _postalCode, byte? _cOFOG, Guid? _addressID, Guid? _unitTypeID, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, bool? _enableForPostImport, byte? _dashboardIncludeType, DateTime? _topChartApproveDate, DateTime? _elaboratedChartApproveDate, DateTime? _provincialChartApproveDate, bool? _isDiscludedInPakna, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDepartment(_isNewRecord, _id, _parentID, _node, _councilType, _type, _subType, _organType, _budgetCode, _name, _enabled, _provinceID, _address, _postalCode, _cOFOG, _addressID, _unitTypeID, _nationalCode, _needsChartType, _webServiceSaveType, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _enableForPostImport, _dashboardIncludeType, _topChartApproveDate, _elaboratedChartApproveDate, _provincialChartApproveDate, _isDiscludedInPakna, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyDepartmentDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _node, byte? _councilType, byte? _type, byte? _subType, byte? _organType, string _budgetCode, string _name, bool? _enabled, Guid? _provinceID, string _address, string _postalCode, byte? _cOFOG, Guid? _addressID, Guid? _unitTypeID, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, bool? _enableForPostImport, byte? _dashboardIncludeType, DateTime? _topChartApproveDate, DateTime? _elaboratedChartApproveDate, DateTime? _provincialChartApproveDate, bool? _isDiscludedInPakna, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyDepartment",new {AIsNewRecord=_isNewRecord,AID=_id,AParentID=_parentID,ANode=string.IsNullOrWhiteSpace(_node) ? _node : ReplaceArabicWithPersianChars(_node),ACouncilType=_councilType,AType=_type,ASubType=_subType,AOrganType=_organType,ABudgetCode=string.IsNullOrWhiteSpace(_budgetCode) ? _budgetCode : ReplaceArabicWithPersianChars(_budgetCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AEnabled=_enabled,AProvinceID=_provinceID,AAddress=string.IsNullOrWhiteSpace(_address) ? _address : ReplaceArabicWithPersianChars(_address),APostalCode=string.IsNullOrWhiteSpace(_postalCode) ? _postalCode : ReplaceArabicWithPersianChars(_postalCode),ACOFOG=_cOFOG,AAddressID=_addressID,AUnitTypeID=_unitTypeID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ANeedsChartType=_needsChartType,AWebServiceSaveType=_webServiceSaveType,AMainOrganType=_mainOrganType,AElaboratedBudgetType=_elaboratedBudgetType,ATreasurySupervisionType=_treasurySupervisionType,AUserDefinitionReferenceType=_userDefinitionReferenceType,ABoardOfTrusteesType=_boardOfTrusteesType,AArrangementTypeInSalary=_arrangementTypeInSalary,ABriefNameType=_briefNameType,ADepartmentShowType=_departmentShowType,AEnableForPostImport=_enableForPostImport,ADashboardIncludeType=_dashboardIncludeType,ATopChartApproveDate=_topChartApproveDate,AElaboratedChartApproveDate=_elaboratedChartApproveDate,AProvincialChartApproveDate=_provincialChartApproveDate,AIsDiscludedInPakna=_isDiscludedInPakna} , timeout );
}

public ResultSet ModifyDepartment(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _node, byte? _councilType, byte? _type, byte? _subType, byte? _organType, string _budgetCode, string _name, bool? _enabled, Guid? _provinceID, string _address, string _postalCode, byte? _cOFOG, Guid? _addressID, Guid? _unitTypeID, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, bool? _enableForPostImport, byte? _dashboardIncludeType, DateTime? _topChartApproveDate, DateTime? _elaboratedChartApproveDate, DateTime? _provincialChartApproveDate, bool? _isDiscludedInPakna, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDepartment(_isNewRecord, _id, _parentID, _node, _councilType, _type, _subType, _organType, _budgetCode, _name, _enabled, _provinceID, _address, _postalCode, _cOFOG, _addressID, _unitTypeID, _nationalCode, _needsChartType, _webServiceSaveType, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _enableForPostImport, _dashboardIncludeType, _topChartApproveDate, _elaboratedChartApproveDate, _provincialChartApproveDate, _isDiscludedInPakna, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region MapPositionsToDepartment

public System.Data.SqlClient.SqlCommand GetCommand_MapPositionsToDepartment(Guid? _applicationID, byte? _departmentType, string _mappings, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spMapPositionsToDepartment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ADepartmentType", IsOutput = false, Value = _departmentType == null ? DBNull.Value : (object)_departmentType }, 
					new Parameter { Name = "@AMappings", IsOutput = false, Value = string.IsNullOrWhiteSpace(_mappings) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_mappings) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> MapPositionsToDepartmentAsync(Guid? _applicationID, byte? _departmentType, string _mappings, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_MapPositionsToDepartment(_applicationID, _departmentType, _mappings, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> MapPositionsToDepartmentDapperAsync<T>(Guid? _applicationID, byte? _departmentType, string _mappings, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spMapPositionsToDepartment",new {AApplicationID=_applicationID,ADepartmentType=_departmentType,AMappings=string.IsNullOrWhiteSpace(_mappings) ? _mappings : ReplaceArabicWithPersianChars(_mappings),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet MapPositionsToDepartment(Guid? _applicationID, byte? _departmentType, string _mappings, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_MapPositionsToDepartment(_applicationID, _departmentType, _mappings, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceUserByUserPass

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceUserByUserPass(string _userName, string _password, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceUserByUserPass", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
					new Parameter { Name = "@APassword", IsOutput = false, Value = string.IsNullOrWhiteSpace(_password) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_password) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceUserByUserPassAsync(string _userName, string _password, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUserByUserPass(_userName, _password, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceUserByUserPassDapperAsync<T>(string _userName, string _password, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceUserByUserPass",new {AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName),APassword=string.IsNullOrWhiteSpace(_password) ? _password : ReplaceArabicWithPersianChars(_password)} , timeout );
}

public ResultSet GetWebServiceUserByUserPass(string _userName, string _password, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUserByUserPass(_userName, _password, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceAcounts

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceAcounts(Guid? _applicationID, string _titlePer, string _titleEng, Guid? _parentOrganID, Guid? _organID, byte? _latestLocalInquiryResultType, byte? _latestPublicInquiryResultType, byte? _enableState, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceAcounts", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ATitlePer", IsOutput = false, Value = string.IsNullOrWhiteSpace(_titlePer) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_titlePer) }, 
					new Parameter { Name = "@ATitleEng", IsOutput = false, Value = string.IsNullOrWhiteSpace(_titleEng) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_titleEng) }, 
					new Parameter { Name = "@AParentOrganID", IsOutput = false, Value = _parentOrganID == null ? DBNull.Value : (object)_parentOrganID }, 
					new Parameter { Name = "@AOrganID", IsOutput = false, Value = _organID == null ? DBNull.Value : (object)_organID }, 
					new Parameter { Name = "@ALatestLocalInquiryResultType", IsOutput = false, Value = _latestLocalInquiryResultType == null ? DBNull.Value : (object)_latestLocalInquiryResultType }, 
					new Parameter { Name = "@ALatestPublicInquiryResultType", IsOutput = false, Value = _latestPublicInquiryResultType == null ? DBNull.Value : (object)_latestPublicInquiryResultType }, 
					new Parameter { Name = "@AEnableState", IsOutput = false, Value = _enableState == null ? DBNull.Value : (object)_enableState }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceAcountsAsync(Guid? _applicationID, string _titlePer, string _titleEng, Guid? _parentOrganID, Guid? _organID, byte? _latestLocalInquiryResultType, byte? _latestPublicInquiryResultType, byte? _enableState, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceAcounts(_applicationID, _titlePer, _titleEng, _parentOrganID, _organID, _latestLocalInquiryResultType, _latestPublicInquiryResultType, _enableState, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceAcountsDapperAsync<T>(Guid? _applicationID, string _titlePer, string _titleEng, Guid? _parentOrganID, Guid? _organID, byte? _latestLocalInquiryResultType, byte? _latestPublicInquiryResultType, byte? _enableState, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceAcounts",new {AApplicationID=_applicationID,ATitlePer=string.IsNullOrWhiteSpace(_titlePer) ? _titlePer : ReplaceArabicWithPersianChars(_titlePer),ATitleEng=string.IsNullOrWhiteSpace(_titleEng) ? _titleEng : ReplaceArabicWithPersianChars(_titleEng),AParentOrganID=_parentOrganID,AOrganID=_organID,ALatestLocalInquiryResultType=_latestLocalInquiryResultType,ALatestPublicInquiryResultType=_latestPublicInquiryResultType,AEnableState=_enableState,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetWebServiceAcounts(Guid? _applicationID, string _titlePer, string _titleEng, Guid? _parentOrganID, Guid? _organID, byte? _latestLocalInquiryResultType, byte? _latestPublicInquiryResultType, byte? _enableState, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceAcounts(_applicationID, _titlePer, _titleEng, _parentOrganID, _organID, _latestLocalInquiryResultType, _latestPublicInquiryResultType, _enableState, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeletePositionHistory

public System.Data.SqlClient.SqlCommand GetCommand_DeletePositionHistory(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeletePositionHistory", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeletePositionHistoryAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeletePositionHistory(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeletePositionHistoryDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeletePositionHistory",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeletePositionHistory(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeletePositionHistory(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceUserPermissions

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceUserPermissions(Guid? _webServiceUserID, Guid? _webServiceID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceUserPermissions", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AWebServiceUserID", IsOutput = false, Value = _webServiceUserID == null ? DBNull.Value : (object)_webServiceUserID }, 
					new Parameter { Name = "@AWebServiceID", IsOutput = false, Value = _webServiceID == null ? DBNull.Value : (object)_webServiceID }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceUserPermissionsAsync(Guid? _webServiceUserID, Guid? _webServiceID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUserPermissions(_webServiceUserID, _webServiceID, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceUserPermissionsDapperAsync<T>(Guid? _webServiceUserID, Guid? _webServiceID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceUserPermissions",new {AWebServiceUserID=_webServiceUserID,AWebServiceID=_webServiceID,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetWebServiceUserPermissions(Guid? _webServiceUserID, Guid? _webServiceID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUserPermissions(_webServiceUserID, _webServiceID, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyPositionType

public System.Data.SqlClient.SqlCommand GetCommand_ModifyPositionType(bool? _isNewRecord, Guid? _id, Guid? _parentID, byte? _positionType, byte? _userType, int? _maxPositionsPerOrgan, Guid? _applicationID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyPositionType", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@APositionType", IsOutput = false, Value = _positionType == null ? DBNull.Value : (object)_positionType }, 
					new Parameter { Name = "@AUserType", IsOutput = false, Value = _userType == null ? DBNull.Value : (object)_userType }, 
					new Parameter { Name = "@AMaxPositionsPerOrgan", IsOutput = false, Value = _maxPositionsPerOrgan == null ? DBNull.Value : (object)_maxPositionsPerOrgan }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyPositionTypeAsync(bool? _isNewRecord, Guid? _id, Guid? _parentID, byte? _positionType, byte? _userType, int? _maxPositionsPerOrgan, Guid? _applicationID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPositionType(_isNewRecord, _id, _parentID, _positionType, _userType, _maxPositionsPerOrgan, _applicationID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyPositionTypeDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _parentID, byte? _positionType, byte? _userType, int? _maxPositionsPerOrgan, Guid? _applicationID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyPositionType",new {AIsNewRecord=_isNewRecord,AID=_id,AParentID=_parentID,APositionType=_positionType,AUserType=_userType,AMaxPositionsPerOrgan=_maxPositionsPerOrgan,AApplicationID=_applicationID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyPositionType(bool? _isNewRecord, Guid? _id, Guid? _parentID, byte? _positionType, byte? _userType, int? _maxPositionsPerOrgan, Guid? _applicationID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPositionType(_isNewRecord, _id, _parentID, _positionType, _userType, _maxPositionsPerOrgan, _applicationID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceAcount

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceAcount(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceAcount", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceAcountAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceAcount(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceAcountDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceAcount",new {AID=_id} , timeout );
}

public ResultSet GetWebServiceAcount(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceAcount(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartments

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartments(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _fetchedWithDeleted, bool? _noLoadTestDepartment, bool? _getPrivateDepartments, byte? _dashboardIncludeType, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartments", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AProvinceID", IsOutput = false, Value = _provinceID == null ? DBNull.Value : (object)_provinceID }, 
					new Parameter { Name = "@AUnitType", IsOutput = false, Value = _unitType == null ? DBNull.Value : (object)_unitType }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ATypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_types) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_types) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@ASubType", IsOutput = false, Value = _subType == null ? DBNull.Value : (object)_subType }, 
					new Parameter { Name = "@ACouncilType", IsOutput = false, Value = _councilType == null ? DBNull.Value : (object)_councilType }, 
					new Parameter { Name = "@AOrganType", IsOutput = false, Value = _organType == null ? DBNull.Value : (object)_organType }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@ABudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_budgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_budgetCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ACodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_codes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_codes) }, 
					new Parameter { Name = "@ACOFOG", IsOutput = false, Value = _cOFOG == null ? DBNull.Value : (object)_cOFOG }, 
					new Parameter { Name = "@ALevel", IsOutput = false, Value = _level == null ? DBNull.Value : (object)_level }, 
					new Parameter { Name = "@ALoadLabel", IsOutput = false, Value = _loadLabel == null ? DBNull.Value : (object)_loadLabel }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ANeedsChartType", IsOutput = false, Value = _needsChartType == null ? DBNull.Value : (object)_needsChartType }, 
					new Parameter { Name = "@AWebServiceSaveType", IsOutput = false, Value = _webServiceSaveType == null ? DBNull.Value : (object)_webServiceSaveType }, 
					new Parameter { Name = "@AMainOrganType", IsOutput = false, Value = _mainOrganType == null ? DBNull.Value : (object)_mainOrganType }, 
					new Parameter { Name = "@AElaboratedBudgetType", IsOutput = false, Value = _elaboratedBudgetType == null ? DBNull.Value : (object)_elaboratedBudgetType }, 
					new Parameter { Name = "@ATreasurySupervisionType", IsOutput = false, Value = _treasurySupervisionType == null ? DBNull.Value : (object)_treasurySupervisionType }, 
					new Parameter { Name = "@AUserDefinitionReferenceType", IsOutput = false, Value = _userDefinitionReferenceType == null ? DBNull.Value : (object)_userDefinitionReferenceType }, 
					new Parameter { Name = "@ABoardOfTrusteesType", IsOutput = false, Value = _boardOfTrusteesType == null ? DBNull.Value : (object)_boardOfTrusteesType }, 
					new Parameter { Name = "@AArrangementTypeInSalary", IsOutput = false, Value = _arrangementTypeInSalary == null ? DBNull.Value : (object)_arrangementTypeInSalary }, 
					new Parameter { Name = "@ABriefNameType", IsOutput = false, Value = _briefNameType == null ? DBNull.Value : (object)_briefNameType }, 
					new Parameter { Name = "@ADepartmentShowType", IsOutput = false, Value = _departmentShowType == null ? DBNull.Value : (object)_departmentShowType }, 
					new Parameter { Name = "@AUserDefinitionReferenceTypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes) }, 
					new Parameter { Name = "@AIsDiscludedInPakna", IsOutput = false, Value = _isDiscludedInPakna == null ? DBNull.Value : (object)_isDiscludedInPakna }, 
					new Parameter { Name = "@AFetchedWithDeleted", IsOutput = false, Value = _fetchedWithDeleted == null ? DBNull.Value : (object)_fetchedWithDeleted }, 
					new Parameter { Name = "@ANoLoadTestDepartment", IsOutput = false, Value = _noLoadTestDepartment == null ? DBNull.Value : (object)_noLoadTestDepartment }, 
					new Parameter { Name = "@AGetPrivateDepartments", IsOutput = false, Value = _getPrivateDepartments == null ? DBNull.Value : (object)_getPrivateDepartments }, 
					new Parameter { Name = "@ADashboardIncludeType", IsOutput = false, Value = _dashboardIncludeType == null ? DBNull.Value : (object)_dashboardIncludeType }, 
					new Parameter { Name = "@AEnabledApplicationIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enabledApplicationIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enabledApplicationIDs) }, 
					new Parameter { Name = "@AEnabledApplicationIDsForWebService", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enabledApplicationIDsForWebService) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enabledApplicationIDsForWebService) }, 
					new Parameter { Name = "@AEnabledApplicationIDsForReport", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enabledApplicationIDsForReport) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enabledApplicationIDsForReport) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentsAsync(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _fetchedWithDeleted, bool? _noLoadTestDepartment, bool? _getPrivateDepartments, byte? _dashboardIncludeType, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartments(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _codes, _cOFOG, _level, _loadLabel, _nationalCode, _needsChartType, _webServiceSaveType, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _userDefinitionReferenceTypes, _isDiscludedInPakna, _fetchedWithDeleted, _noLoadTestDepartment, _getPrivateDepartments, _dashboardIncludeType, _enabledApplicationIDs, _enabledApplicationIDsForWebService, _enabledApplicationIDsForReport, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentsDapperAsync<T>(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _fetchedWithDeleted, bool? _noLoadTestDepartment, bool? _getPrivateDepartments, byte? _dashboardIncludeType, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartments",new {AParentID=_parentID,AProvinceID=_provinceID,AUnitType=_unitType,AType=_type,ATypes=string.IsNullOrWhiteSpace(_types) ? _types : ReplaceArabicWithPersianChars(_types),AEnabled=_enabled,ASubType=_subType,ACouncilType=_councilType,AOrganType=_organType,ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),ABudgetCode=string.IsNullOrWhiteSpace(_budgetCode) ? _budgetCode : ReplaceArabicWithPersianChars(_budgetCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ACodes=string.IsNullOrWhiteSpace(_codes) ? _codes : ReplaceArabicWithPersianChars(_codes),ACOFOG=_cOFOG,ALevel=_level,ALoadLabel=_loadLabel,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ANeedsChartType=_needsChartType,AWebServiceSaveType=_webServiceSaveType,AMainOrganType=_mainOrganType,AElaboratedBudgetType=_elaboratedBudgetType,ATreasurySupervisionType=_treasurySupervisionType,AUserDefinitionReferenceType=_userDefinitionReferenceType,ABoardOfTrusteesType=_boardOfTrusteesType,AArrangementTypeInSalary=_arrangementTypeInSalary,ABriefNameType=_briefNameType,ADepartmentShowType=_departmentShowType,AUserDefinitionReferenceTypes=string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? _userDefinitionReferenceTypes : ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes),AIsDiscludedInPakna=_isDiscludedInPakna,AFetchedWithDeleted=_fetchedWithDeleted,ANoLoadTestDepartment=_noLoadTestDepartment,AGetPrivateDepartments=_getPrivateDepartments,ADashboardIncludeType=_dashboardIncludeType,AEnabledApplicationIDs=string.IsNullOrWhiteSpace(_enabledApplicationIDs) ? _enabledApplicationIDs : ReplaceArabicWithPersianChars(_enabledApplicationIDs),AEnabledApplicationIDsForWebService=string.IsNullOrWhiteSpace(_enabledApplicationIDsForWebService) ? _enabledApplicationIDsForWebService : ReplaceArabicWithPersianChars(_enabledApplicationIDsForWebService),AEnabledApplicationIDsForReport=string.IsNullOrWhiteSpace(_enabledApplicationIDsForReport) ? _enabledApplicationIDsForReport : ReplaceArabicWithPersianChars(_enabledApplicationIDsForReport),AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDepartments(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _fetchedWithDeleted, bool? _noLoadTestDepartment, bool? _getPrivateDepartments, byte? _dashboardIncludeType, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartments(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _codes, _cOFOG, _level, _loadLabel, _nationalCode, _needsChartType, _webServiceSaveType, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _userDefinitionReferenceTypes, _isDiscludedInPakna, _fetchedWithDeleted, _noLoadTestDepartment, _getPrivateDepartments, _dashboardIncludeType, _enabledApplicationIDs, _enabledApplicationIDsForWebService, _enabledApplicationIDsForReport, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionHistory

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionHistory(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionHistory", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionHistoryAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionHistory(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionHistoryDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionHistory",new {AID=_id} , timeout );
}

public ResultSet GetPositionHistory(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionHistory(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceUsers

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceUsers(string _userName, Guid? _organID, Guid? _parentOrganID, byte? _enabled, byte? _webServiceType, byte? _passwordStatusType, string _nationalCode, string _firstName, string _lastName, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceUsers", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
					new Parameter { Name = "@AOrganID", IsOutput = false, Value = _organID == null ? DBNull.Value : (object)_organID }, 
					new Parameter { Name = "@AParentOrganID", IsOutput = false, Value = _parentOrganID == null ? DBNull.Value : (object)_parentOrganID }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@AWebServiceType", IsOutput = false, Value = _webServiceType == null ? DBNull.Value : (object)_webServiceType }, 
					new Parameter { Name = "@APasswordStatusType", IsOutput = false, Value = _passwordStatusType == null ? DBNull.Value : (object)_passwordStatusType }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AFirstName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_firstName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_firstName) }, 
					new Parameter { Name = "@ALastName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastName) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceUsersAsync(string _userName, Guid? _organID, Guid? _parentOrganID, byte? _enabled, byte? _webServiceType, byte? _passwordStatusType, string _nationalCode, string _firstName, string _lastName, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUsers(_userName, _organID, _parentOrganID, _enabled, _webServiceType, _passwordStatusType, _nationalCode, _firstName, _lastName, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceUsersDapperAsync<T>(string _userName, Guid? _organID, Guid? _parentOrganID, byte? _enabled, byte? _webServiceType, byte? _passwordStatusType, string _nationalCode, string _firstName, string _lastName, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceUsers",new {AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName),AOrganID=_organID,AParentOrganID=_parentOrganID,AEnabled=_enabled,AWebServiceType=_webServiceType,APasswordStatusType=_passwordStatusType,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AFirstName=string.IsNullOrWhiteSpace(_firstName) ? _firstName : ReplaceArabicWithPersianChars(_firstName),ALastName=string.IsNullOrWhiteSpace(_lastName) ? _lastName : ReplaceArabicWithPersianChars(_lastName),AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetWebServiceUsers(string _userName, Guid? _organID, Guid? _parentOrganID, byte? _enabled, byte? _webServiceType, byte? _passwordStatusType, string _nationalCode, string _firstName, string _lastName, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceUsers(_userName, _organID, _parentOrganID, _enabled, _webServiceType, _passwordStatusType, _nationalCode, _firstName, _lastName, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionTypes

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionTypes(Guid? _applicationID, short? _positionType, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionTypes", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@APositionType", IsOutput = false, Value = _positionType == null ? DBNull.Value : (object)_positionType }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionTypesAsync(Guid? _applicationID, short? _positionType, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionTypes(_applicationID, _positionType, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionTypesDapperAsync<T>(Guid? _applicationID, short? _positionType, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionTypes",new {AApplicationID=_applicationID,APositionType=_positionType,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetPositionTypes(Guid? _applicationID, short? _positionType, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionTypes(_applicationID, _positionType, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserByUserIDPassword

public System.Data.SqlClient.SqlCommand GetCommand_GetUserByUserIDPassword(Guid? _id, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserByUserIDPassword", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@APassword", IsOutput = false, Value = string.IsNullOrWhiteSpace(_password) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_password) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserByUserIDPasswordAsync(Guid? _id, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByUserIDPassword(_id, _password, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserByUserIDPasswordDapperAsync<T>(Guid? _id, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserByUserIDPassword",new {AID=_id,APassword=string.IsNullOrWhiteSpace(_password) ? _password : ReplaceArabicWithPersianChars(_password),AApplicationID=_applicationID,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet GetUserByUserIDPassword(Guid? _id, string _password, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByUserIDPassword(_id, _password, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ChangeOrder

public System.Data.SqlClient.SqlCommand GetCommand_ChangeOrder(Guid? _id, int? _orderNumber, int? timeout = null)
{
var cmd = base.CreateCommand("org.spChangeOrder", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AOrderNumber", IsOutput = false, Value = _orderNumber == null ? DBNull.Value : (object)_orderNumber }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ChangeOrderAsync(Guid? _id, int? _orderNumber, int? timeout = null)
{
	using(var cmd = GetCommand_ChangeOrder(_id, _orderNumber, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ChangeOrderDapperAsync<T>(Guid? _id, int? _orderNumber, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spChangeOrder",new {AID=_id,AOrderNumber=_orderNumber} , timeout );
}

public ResultSet ChangeOrder(Guid? _id, int? _orderNumber, int? timeout = null)
{
	using(var cmd = GetCommand_ChangeOrder(_id, _orderNumber, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentsWithHierarchy

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentsWithHierarchy(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, bool? _searchWithHierarchy, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _noLoadTestDepartment, byte? _dashboardIncludeType, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentsWithHierarchy", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AProvinceID", IsOutput = false, Value = _provinceID == null ? DBNull.Value : (object)_provinceID }, 
					new Parameter { Name = "@AUnitType", IsOutput = false, Value = _unitType == null ? DBNull.Value : (object)_unitType }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ATypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_types) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_types) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@ASubType", IsOutput = false, Value = _subType == null ? DBNull.Value : (object)_subType }, 
					new Parameter { Name = "@ACouncilType", IsOutput = false, Value = _councilType == null ? DBNull.Value : (object)_councilType }, 
					new Parameter { Name = "@AOrganType", IsOutput = false, Value = _organType == null ? DBNull.Value : (object)_organType }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@ABudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_budgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_budgetCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ASearchWithHierarchy", IsOutput = false, Value = _searchWithHierarchy == null ? DBNull.Value : (object)_searchWithHierarchy }, 
					new Parameter { Name = "@ACodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_codes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_codes) }, 
					new Parameter { Name = "@ACOFOG", IsOutput = false, Value = _cOFOG == null ? DBNull.Value : (object)_cOFOG }, 
					new Parameter { Name = "@ALevel", IsOutput = false, Value = _level == null ? DBNull.Value : (object)_level }, 
					new Parameter { Name = "@ALoadLabel", IsOutput = false, Value = _loadLabel == null ? DBNull.Value : (object)_loadLabel }, 
					new Parameter { Name = "@ANeedsChartType", IsOutput = false, Value = _needsChartType == null ? DBNull.Value : (object)_needsChartType }, 
					new Parameter { Name = "@AWebServiceSaveType", IsOutput = false, Value = _webServiceSaveType == null ? DBNull.Value : (object)_webServiceSaveType }, 
					new Parameter { Name = "@AMainOrganType", IsOutput = false, Value = _mainOrganType == null ? DBNull.Value : (object)_mainOrganType }, 
					new Parameter { Name = "@AElaboratedBudgetType", IsOutput = false, Value = _elaboratedBudgetType == null ? DBNull.Value : (object)_elaboratedBudgetType }, 
					new Parameter { Name = "@ATreasurySupervisionType", IsOutput = false, Value = _treasurySupervisionType == null ? DBNull.Value : (object)_treasurySupervisionType }, 
					new Parameter { Name = "@AUserDefinitionReferenceType", IsOutput = false, Value = _userDefinitionReferenceType == null ? DBNull.Value : (object)_userDefinitionReferenceType }, 
					new Parameter { Name = "@ABoardOfTrusteesType", IsOutput = false, Value = _boardOfTrusteesType == null ? DBNull.Value : (object)_boardOfTrusteesType }, 
					new Parameter { Name = "@AArrangementTypeInSalary", IsOutput = false, Value = _arrangementTypeInSalary == null ? DBNull.Value : (object)_arrangementTypeInSalary }, 
					new Parameter { Name = "@ABriefNameType", IsOutput = false, Value = _briefNameType == null ? DBNull.Value : (object)_briefNameType }, 
					new Parameter { Name = "@ADepartmentShowType", IsOutput = false, Value = _departmentShowType == null ? DBNull.Value : (object)_departmentShowType }, 
					new Parameter { Name = "@AUserDefinitionReferenceTypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes) }, 
					new Parameter { Name = "@AIsDiscludedInPakna", IsOutput = false, Value = _isDiscludedInPakna == null ? DBNull.Value : (object)_isDiscludedInPakna }, 
					new Parameter { Name = "@ANoLoadTestDepartment", IsOutput = false, Value = _noLoadTestDepartment == null ? DBNull.Value : (object)_noLoadTestDepartment }, 
					new Parameter { Name = "@ADashboardIncludeType", IsOutput = false, Value = _dashboardIncludeType == null ? DBNull.Value : (object)_dashboardIncludeType }, 
					new Parameter { Name = "@AEnabledApplicationIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enabledApplicationIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enabledApplicationIDs) }, 
					new Parameter { Name = "@AEnabledApplicationIDsForWebService", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enabledApplicationIDsForWebService) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enabledApplicationIDsForWebService) }, 
					new Parameter { Name = "@AEnabledApplicationIDsForReport", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enabledApplicationIDsForReport) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enabledApplicationIDsForReport) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentsWithHierarchyAsync(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, bool? _searchWithHierarchy, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _noLoadTestDepartment, byte? _dashboardIncludeType, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsWithHierarchy(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _searchWithHierarchy, _codes, _cOFOG, _level, _loadLabel, _needsChartType, _webServiceSaveType, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _userDefinitionReferenceTypes, _isDiscludedInPakna, _noLoadTestDepartment, _dashboardIncludeType, _enabledApplicationIDs, _enabledApplicationIDsForWebService, _enabledApplicationIDsForReport, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentsWithHierarchyDapperAsync<T>(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, bool? _searchWithHierarchy, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _noLoadTestDepartment, byte? _dashboardIncludeType, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentsWithHierarchy",new {AParentID=_parentID,AProvinceID=_provinceID,AUnitType=_unitType,AType=_type,ATypes=string.IsNullOrWhiteSpace(_types) ? _types : ReplaceArabicWithPersianChars(_types),AEnabled=_enabled,ASubType=_subType,ACouncilType=_councilType,AOrganType=_organType,ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),ABudgetCode=string.IsNullOrWhiteSpace(_budgetCode) ? _budgetCode : ReplaceArabicWithPersianChars(_budgetCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ASearchWithHierarchy=_searchWithHierarchy,ACodes=string.IsNullOrWhiteSpace(_codes) ? _codes : ReplaceArabicWithPersianChars(_codes),ACOFOG=_cOFOG,ALevel=_level,ALoadLabel=_loadLabel,ANeedsChartType=_needsChartType,AWebServiceSaveType=_webServiceSaveType,AMainOrganType=_mainOrganType,AElaboratedBudgetType=_elaboratedBudgetType,ATreasurySupervisionType=_treasurySupervisionType,AUserDefinitionReferenceType=_userDefinitionReferenceType,ABoardOfTrusteesType=_boardOfTrusteesType,AArrangementTypeInSalary=_arrangementTypeInSalary,ABriefNameType=_briefNameType,ADepartmentShowType=_departmentShowType,AUserDefinitionReferenceTypes=string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? _userDefinitionReferenceTypes : ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes),AIsDiscludedInPakna=_isDiscludedInPakna,ANoLoadTestDepartment=_noLoadTestDepartment,ADashboardIncludeType=_dashboardIncludeType,AEnabledApplicationIDs=string.IsNullOrWhiteSpace(_enabledApplicationIDs) ? _enabledApplicationIDs : ReplaceArabicWithPersianChars(_enabledApplicationIDs),AEnabledApplicationIDsForWebService=string.IsNullOrWhiteSpace(_enabledApplicationIDsForWebService) ? _enabledApplicationIDsForWebService : ReplaceArabicWithPersianChars(_enabledApplicationIDsForWebService),AEnabledApplicationIDsForReport=string.IsNullOrWhiteSpace(_enabledApplicationIDsForReport) ? _enabledApplicationIDsForReport : ReplaceArabicWithPersianChars(_enabledApplicationIDsForReport),AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDepartmentsWithHierarchy(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, bool? _searchWithHierarchy, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _noLoadTestDepartment, byte? _dashboardIncludeType, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsWithHierarchy(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _searchWithHierarchy, _codes, _cOFOG, _level, _loadLabel, _needsChartType, _webServiceSaveType, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _userDefinitionReferenceTypes, _isDiscludedInPakna, _noLoadTestDepartment, _dashboardIncludeType, _enabledApplicationIDs, _enabledApplicationIDsForWebService, _enabledApplicationIDsForReport, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyPositionHistory

public System.Data.SqlClient.SqlCommand GetCommand_ModifyPositionHistory(bool? _isNewRecord, Guid? _id, Guid? _positionID, Guid? _userID, string _letterNumber, DateTime? _date, string _comment, Guid? _creatorUserID, Guid? _creatorPositionID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyPositionHistory", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ALetterNumber", IsOutput = false, Value = string.IsNullOrWhiteSpace(_letterNumber) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_letterNumber) }, 
					new Parameter { Name = "@ADate", IsOutput = false, Value = _date == null ? DBNull.Value : (object)_date }, 
					new Parameter { Name = "@AComment", IsOutput = false, Value = string.IsNullOrWhiteSpace(_comment) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_comment) }, 
					new Parameter { Name = "@ACreatorUserID", IsOutput = false, Value = _creatorUserID == null ? DBNull.Value : (object)_creatorUserID }, 
					new Parameter { Name = "@ACreatorPositionID", IsOutput = false, Value = _creatorPositionID == null ? DBNull.Value : (object)_creatorPositionID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyPositionHistoryAsync(bool? _isNewRecord, Guid? _id, Guid? _positionID, Guid? _userID, string _letterNumber, DateTime? _date, string _comment, Guid? _creatorUserID, Guid? _creatorPositionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPositionHistory(_isNewRecord, _id, _positionID, _userID, _letterNumber, _date, _comment, _creatorUserID, _creatorPositionID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyPositionHistoryDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _positionID, Guid? _userID, string _letterNumber, DateTime? _date, string _comment, Guid? _creatorUserID, Guid? _creatorPositionID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyPositionHistory",new {AIsNewRecord=_isNewRecord,AID=_id,APositionID=_positionID,AUserID=_userID,ALetterNumber=string.IsNullOrWhiteSpace(_letterNumber) ? _letterNumber : ReplaceArabicWithPersianChars(_letterNumber),ADate=_date,AComment=string.IsNullOrWhiteSpace(_comment) ? _comment : ReplaceArabicWithPersianChars(_comment),ACreatorUserID=_creatorUserID,ACreatorPositionID=_creatorPositionID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyPositionHistory(bool? _isNewRecord, Guid? _id, Guid? _positionID, Guid? _userID, string _letterNumber, DateTime? _date, string _comment, Guid? _creatorUserID, Guid? _creatorPositionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPositionHistory(_isNewRecord, _id, _positionID, _userID, _letterNumber, _date, _comment, _creatorUserID, _creatorPositionID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionType

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionType(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionType", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionTypeAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionType(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionTypeDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionType",new {AID=_id} , timeout );
}

public ResultSet GetPositionType(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionType(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartment

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartment(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartment(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartment",new {AID=_id} , timeout );
}

public ResultSet GetDepartment(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartment(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeletePositionSubType

public System.Data.SqlClient.SqlCommand GetCommand_DeletePositionSubType(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeletePositionSubType", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeletePositionSubTypeAsync(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeletePositionSubType(_id, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeletePositionSubTypeDapperAsync<T>(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeletePositionSubType",new {AID=_id,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet DeletePositionSubType(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeletePositionSubType(_id, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserByEmail

public System.Data.SqlClient.SqlCommand GetCommand_GetUserByEmail(string _email, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserByEmail", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AEmail", IsOutput = false, Value = string.IsNullOrWhiteSpace(_email) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_email) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserByEmailAsync(string _email, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByEmail(_email, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserByEmailDapperAsync<T>(string _email, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserByEmail",new {AEmail=string.IsNullOrWhiteSpace(_email) ? _email : ReplaceArabicWithPersianChars(_email),AApplicationID=_applicationID,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet GetUserByEmail(string _email, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByEmail(_email, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionSubType

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionSubType(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionSubType", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionSubTypeAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionSubType(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionSubTypeDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionSubType",new {AID=_id} , timeout );
}

public ResultSet GetPositionSubType(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionSubType(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserByNationalCode

public System.Data.SqlClient.SqlCommand GetCommand_GetUserByNationalCode(string _nationalCode, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserByNationalCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserByNationalCodeAsync(string _nationalCode, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByNationalCode(_nationalCode, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserByNationalCodeDapperAsync<T>(string _nationalCode, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserByNationalCode",new {ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AApplicationID=_applicationID,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet GetUserByNationalCode(string _nationalCode, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByNationalCode(_nationalCode, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSecurityStampByUserName

public System.Data.SqlClient.SqlCommand GetCommand_GetSecurityStampByUserName(string _userName, byte? _usageType, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetSecurityStampByUserName", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
					new Parameter { Name = "@AUsageType", IsOutput = false, Value = _usageType == null ? DBNull.Value : (object)_usageType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSecurityStampByUserNameAsync(string _userName, byte? _usageType, int? timeout = null)
{
	using(var cmd = GetCommand_GetSecurityStampByUserName(_userName, _usageType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSecurityStampByUserNameDapperAsync<T>(string _userName, byte? _usageType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetSecurityStampByUserName",new {AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName),AUsageType=_usageType} , timeout );
}

public ResultSet GetSecurityStampByUserName(string _userName, byte? _usageType, int? timeout = null)
{
	using(var cmd = GetCommand_GetSecurityStampByUserName(_userName, _usageType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyPositionSubType

public System.Data.SqlClient.SqlCommand GetCommand_ModifyPositionSubType(bool? _isNewRecord, Guid? _id, string _name, Guid? _applicationID, Guid? _departmentID, byte? _type, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyPositionSubType", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyPositionSubTypeAsync(bool? _isNewRecord, Guid? _id, string _name, Guid? _applicationID, Guid? _departmentID, byte? _type, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPositionSubType(_isNewRecord, _id, _name, _applicationID, _departmentID, _type, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyPositionSubTypeDapperAsync<T>(bool? _isNewRecord, Guid? _id, string _name, Guid? _applicationID, Guid? _departmentID, byte? _type, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyPositionSubType",new {AIsNewRecord=_isNewRecord,AID=_id,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AApplicationID=_applicationID,ADepartmentID=_departmentID,AType=_type,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet ModifyPositionSubType(bool? _isNewRecord, Guid? _id, string _name, Guid? _applicationID, Guid? _departmentID, byte? _type, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPositionSubType(_isNewRecord, _id, _name, _applicationID, _departmentID, _type, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentsSummary

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentsSummary(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _noLoadTestDepartment, bool? _getPrivateDepartments, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentsSummary", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AProvinceID", IsOutput = false, Value = _provinceID == null ? DBNull.Value : (object)_provinceID }, 
					new Parameter { Name = "@AUnitType", IsOutput = false, Value = _unitType == null ? DBNull.Value : (object)_unitType }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ATypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_types) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_types) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@ASubType", IsOutput = false, Value = _subType == null ? DBNull.Value : (object)_subType }, 
					new Parameter { Name = "@ACouncilType", IsOutput = false, Value = _councilType == null ? DBNull.Value : (object)_councilType }, 
					new Parameter { Name = "@AOrganType", IsOutput = false, Value = _organType == null ? DBNull.Value : (object)_organType }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@ABudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_budgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_budgetCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ACodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_codes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_codes) }, 
					new Parameter { Name = "@ACOFOG", IsOutput = false, Value = _cOFOG == null ? DBNull.Value : (object)_cOFOG }, 
					new Parameter { Name = "@ALevel", IsOutput = false, Value = _level == null ? DBNull.Value : (object)_level }, 
					new Parameter { Name = "@ALoadLabel", IsOutput = false, Value = _loadLabel == null ? DBNull.Value : (object)_loadLabel }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ANeedsChartType", IsOutput = false, Value = _needsChartType == null ? DBNull.Value : (object)_needsChartType }, 
					new Parameter { Name = "@AWebServiceSaveType", IsOutput = false, Value = _webServiceSaveType == null ? DBNull.Value : (object)_webServiceSaveType }, 
					new Parameter { Name = "@AMainOrganType", IsOutput = false, Value = _mainOrganType == null ? DBNull.Value : (object)_mainOrganType }, 
					new Parameter { Name = "@AElaboratedBudgetType", IsOutput = false, Value = _elaboratedBudgetType == null ? DBNull.Value : (object)_elaboratedBudgetType }, 
					new Parameter { Name = "@ATreasurySupervisionType", IsOutput = false, Value = _treasurySupervisionType == null ? DBNull.Value : (object)_treasurySupervisionType }, 
					new Parameter { Name = "@AUserDefinitionReferenceType", IsOutput = false, Value = _userDefinitionReferenceType == null ? DBNull.Value : (object)_userDefinitionReferenceType }, 
					new Parameter { Name = "@ABoardOfTrusteesType", IsOutput = false, Value = _boardOfTrusteesType == null ? DBNull.Value : (object)_boardOfTrusteesType }, 
					new Parameter { Name = "@AArrangementTypeInSalary", IsOutput = false, Value = _arrangementTypeInSalary == null ? DBNull.Value : (object)_arrangementTypeInSalary }, 
					new Parameter { Name = "@ABriefNameType", IsOutput = false, Value = _briefNameType == null ? DBNull.Value : (object)_briefNameType }, 
					new Parameter { Name = "@ADepartmentShowType", IsOutput = false, Value = _departmentShowType == null ? DBNull.Value : (object)_departmentShowType }, 
					new Parameter { Name = "@AUserDefinitionReferenceTypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes) }, 
					new Parameter { Name = "@AIsDiscludedInPakna", IsOutput = false, Value = _isDiscludedInPakna == null ? DBNull.Value : (object)_isDiscludedInPakna }, 
					new Parameter { Name = "@ANoLoadTestDepartment", IsOutput = false, Value = _noLoadTestDepartment == null ? DBNull.Value : (object)_noLoadTestDepartment }, 
					new Parameter { Name = "@AGetPrivateDepartments", IsOutput = false, Value = _getPrivateDepartments == null ? DBNull.Value : (object)_getPrivateDepartments }, 
					new Parameter { Name = "@AEnabledApplicationIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enabledApplicationIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enabledApplicationIDs) }, 
					new Parameter { Name = "@AEnabledApplicationIDsForWebService", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enabledApplicationIDsForWebService) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enabledApplicationIDsForWebService) }, 
					new Parameter { Name = "@AEnabledApplicationIDsForReport", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enabledApplicationIDsForReport) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enabledApplicationIDsForReport) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentsSummaryAsync(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _noLoadTestDepartment, bool? _getPrivateDepartments, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsSummary(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _codes, _cOFOG, _level, _loadLabel, _nationalCode, _needsChartType, _webServiceSaveType, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _userDefinitionReferenceTypes, _isDiscludedInPakna, _noLoadTestDepartment, _getPrivateDepartments, _enabledApplicationIDs, _enabledApplicationIDsForWebService, _enabledApplicationIDsForReport, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentsSummaryDapperAsync<T>(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _noLoadTestDepartment, bool? _getPrivateDepartments, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentsSummary",new {AParentID=_parentID,AProvinceID=_provinceID,AUnitType=_unitType,AType=_type,ATypes=string.IsNullOrWhiteSpace(_types) ? _types : ReplaceArabicWithPersianChars(_types),AEnabled=_enabled,ASubType=_subType,ACouncilType=_councilType,AOrganType=_organType,ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),ABudgetCode=string.IsNullOrWhiteSpace(_budgetCode) ? _budgetCode : ReplaceArabicWithPersianChars(_budgetCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ACodes=string.IsNullOrWhiteSpace(_codes) ? _codes : ReplaceArabicWithPersianChars(_codes),ACOFOG=_cOFOG,ALevel=_level,ALoadLabel=_loadLabel,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ANeedsChartType=_needsChartType,AWebServiceSaveType=_webServiceSaveType,AMainOrganType=_mainOrganType,AElaboratedBudgetType=_elaboratedBudgetType,ATreasurySupervisionType=_treasurySupervisionType,AUserDefinitionReferenceType=_userDefinitionReferenceType,ABoardOfTrusteesType=_boardOfTrusteesType,AArrangementTypeInSalary=_arrangementTypeInSalary,ABriefNameType=_briefNameType,ADepartmentShowType=_departmentShowType,AUserDefinitionReferenceTypes=string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? _userDefinitionReferenceTypes : ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes),AIsDiscludedInPakna=_isDiscludedInPakna,ANoLoadTestDepartment=_noLoadTestDepartment,AGetPrivateDepartments=_getPrivateDepartments,AEnabledApplicationIDs=string.IsNullOrWhiteSpace(_enabledApplicationIDs) ? _enabledApplicationIDs : ReplaceArabicWithPersianChars(_enabledApplicationIDs),AEnabledApplicationIDsForWebService=string.IsNullOrWhiteSpace(_enabledApplicationIDsForWebService) ? _enabledApplicationIDsForWebService : ReplaceArabicWithPersianChars(_enabledApplicationIDsForWebService),AEnabledApplicationIDsForReport=string.IsNullOrWhiteSpace(_enabledApplicationIDsForReport) ? _enabledApplicationIDsForReport : ReplaceArabicWithPersianChars(_enabledApplicationIDsForReport),AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDepartmentsSummary(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _noLoadTestDepartment, bool? _getPrivateDepartments, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsSummary(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _codes, _cOFOG, _level, _loadLabel, _nationalCode, _needsChartType, _webServiceSaveType, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _userDefinitionReferenceTypes, _isDiscludedInPakna, _noLoadTestDepartment, _getPrivateDepartments, _enabledApplicationIDs, _enabledApplicationIDsForWebService, _enabledApplicationIDsForReport, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ChangeUserType

public System.Data.SqlClient.SqlCommand GetCommand_ChangeUserType(Guid? _id, byte? _userType, int? timeout = null)
{
var cmd = base.CreateCommand("org.spChangeUserType", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserType", IsOutput = false, Value = _userType == null ? DBNull.Value : (object)_userType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ChangeUserTypeAsync(Guid? _id, byte? _userType, int? timeout = null)
{
	using(var cmd = GetCommand_ChangeUserType(_id, _userType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ChangeUserTypeDapperAsync<T>(Guid? _id, byte? _userType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spChangeUserType",new {AID=_id,AUserType=_userType} , timeout );
}

public ResultSet ChangeUserType(Guid? _id, byte? _userType, int? timeout = null)
{
	using(var cmd = GetCommand_ChangeUserType(_id, _userType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentAllChilds

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentAllChilds(Guid? _organID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentAllChilds", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AOrganID", IsOutput = false, Value = _organID == null ? DBNull.Value : (object)_organID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentAllChildsAsync(Guid? _organID, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentAllChilds(_organID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentAllChildsDapperAsync<T>(Guid? _organID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentAllChilds",new {AOrganID=_organID} , timeout );
}

public ResultSet GetDepartmentAllChilds(Guid? _organID, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentAllChilds(_organID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionTypeRoles

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionTypeRoles(Guid? _applicationID, byte? _positionType, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionTypeRoles", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@APositionType", IsOutput = false, Value = _positionType == null ? DBNull.Value : (object)_positionType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionTypeRolesAsync(Guid? _applicationID, byte? _positionType, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionTypeRoles(_applicationID, _positionType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionTypeRolesDapperAsync<T>(Guid? _applicationID, byte? _positionType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionTypeRoles",new {AApplicationID=_applicationID,APositionType=_positionType} , timeout );
}

public ResultSet GetPositionTypeRoles(Guid? _applicationID, byte? _positionType, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionTypeRoles(_applicationID, _positionType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteWebService

public System.Data.SqlClient.SqlCommand GetCommand_DeleteWebService(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteWebService", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ARemoverUserID", IsOutput = false, Value = _removerUserID == null ? DBNull.Value : (object)_removerUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteWebServiceAsync(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteWebService(_id, _removerUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteWebServiceDapperAsync<T>(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteWebService",new {AID=_id,ARemoverUserID=_removerUserID} , timeout );
}

public ResultSet DeleteWebService(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteWebService(_id, _removerUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceForPermissionAcounts

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceForPermissionAcounts(Guid? _applicationID, Guid? _webServiceID, byte? _webServiceType, Guid? _parentOrganID, Guid? _organID, byte? _latestLocalInquiryResultType, byte? _latestGsbInquiryResultType, byte? _enableState, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceForPermissionAcounts", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AWebServiceID", IsOutput = false, Value = _webServiceID == null ? DBNull.Value : (object)_webServiceID }, 
					new Parameter { Name = "@AWebServiceType", IsOutput = false, Value = _webServiceType == null ? DBNull.Value : (object)_webServiceType }, 
					new Parameter { Name = "@AParentOrganID", IsOutput = false, Value = _parentOrganID == null ? DBNull.Value : (object)_parentOrganID }, 
					new Parameter { Name = "@AOrganID", IsOutput = false, Value = _organID == null ? DBNull.Value : (object)_organID }, 
					new Parameter { Name = "@ALatestLocalInquiryResultType", IsOutput = false, Value = _latestLocalInquiryResultType == null ? DBNull.Value : (object)_latestLocalInquiryResultType }, 
					new Parameter { Name = "@ALatestGsbInquiryResultType", IsOutput = false, Value = _latestGsbInquiryResultType == null ? DBNull.Value : (object)_latestGsbInquiryResultType }, 
					new Parameter { Name = "@AEnableState", IsOutput = false, Value = _enableState == null ? DBNull.Value : (object)_enableState }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceForPermissionAcountsAsync(Guid? _applicationID, Guid? _webServiceID, byte? _webServiceType, Guid? _parentOrganID, Guid? _organID, byte? _latestLocalInquiryResultType, byte? _latestGsbInquiryResultType, byte? _enableState, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceForPermissionAcounts(_applicationID, _webServiceID, _webServiceType, _parentOrganID, _organID, _latestLocalInquiryResultType, _latestGsbInquiryResultType, _enableState, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceForPermissionAcountsDapperAsync<T>(Guid? _applicationID, Guid? _webServiceID, byte? _webServiceType, Guid? _parentOrganID, Guid? _organID, byte? _latestLocalInquiryResultType, byte? _latestGsbInquiryResultType, byte? _enableState, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceForPermissionAcounts",new {AApplicationID=_applicationID,AWebServiceID=_webServiceID,AWebServiceType=_webServiceType,AParentOrganID=_parentOrganID,AOrganID=_organID,ALatestLocalInquiryResultType=_latestLocalInquiryResultType,ALatestGsbInquiryResultType=_latestGsbInquiryResultType,AEnableState=_enableState,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetWebServiceForPermissionAcounts(Guid? _applicationID, Guid? _webServiceID, byte? _webServiceType, Guid? _parentOrganID, Guid? _organID, byte? _latestLocalInquiryResultType, byte? _latestGsbInquiryResultType, byte? _enableState, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceForPermissionAcounts(_applicationID, _webServiceID, _webServiceType, _parentOrganID, _organID, _latestLocalInquiryResultType, _latestGsbInquiryResultType, _enableState, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ActiveToken

public System.Data.SqlClient.SqlCommand GetCommand_ActiveToken(Guid? _userID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spActiveToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ActiveTokenAsync(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_ActiveToken(_userID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ActiveTokenDapperAsync<T>(Guid? _userID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spActiveToken",new {AUserID=_userID} , timeout );
}

public ResultSet ActiveToken(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_ActiveToken(_userID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceForPermissionAcount

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceForPermissionAcount(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceForPermissionAcount", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceForPermissionAcountAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceForPermissionAcount(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceForPermissionAcountDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceForPermissionAcount",new {AID=_id} , timeout );
}

public ResultSet GetWebServiceForPermissionAcount(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceForPermissionAcount(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplications

public System.Data.SqlClient.SqlCommand GetCommand_GetApplications(string _name, string _abbreviation, string _comment, string _clientName, byte? _enabled, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetApplications", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AAbbreviation", IsOutput = false, Value = string.IsNullOrWhiteSpace(_abbreviation) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_abbreviation) }, 
					new Parameter { Name = "@AComment", IsOutput = false, Value = string.IsNullOrWhiteSpace(_comment) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_comment) }, 
					new Parameter { Name = "@AClientName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_clientName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_clientName) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationsAsync(string _name, string _abbreviation, string _comment, string _clientName, byte? _enabled, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplications(_name, _abbreviation, _comment, _clientName, _enabled, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationsDapperAsync<T>(string _name, string _abbreviation, string _comment, string _clientName, byte? _enabled, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetApplications",new {AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AAbbreviation=string.IsNullOrWhiteSpace(_abbreviation) ? _abbreviation : ReplaceArabicWithPersianChars(_abbreviation),AComment=string.IsNullOrWhiteSpace(_comment) ? _comment : ReplaceArabicWithPersianChars(_comment),AClientName=string.IsNullOrWhiteSpace(_clientName) ? _clientName : ReplaceArabicWithPersianChars(_clientName),AEnabled=_enabled,APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetApplications(string _name, string _abbreviation, string _comment, string _clientName, byte? _enabled, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplications(_name, _abbreviation, _comment, _clientName, _enabled, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region UndoToken

public System.Data.SqlClient.SqlCommand GetCommand_UndoToken(string _token, bool? _undoOnlyApp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spUndoToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AToken", IsOutput = false, Value = string.IsNullOrWhiteSpace(_token) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_token) }, 
					new Parameter { Name = "@AUndoOnlyApp", IsOutput = false, Value = _undoOnlyApp == null ? DBNull.Value : (object)_undoOnlyApp }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UndoTokenAsync(string _token, bool? _undoOnlyApp, int? timeout = null)
{
	using(var cmd = GetCommand_UndoToken(_token, _undoOnlyApp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UndoTokenDapperAsync<T>(string _token, bool? _undoOnlyApp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spUndoToken",new {AToken=string.IsNullOrWhiteSpace(_token) ? _token : ReplaceArabicWithPersianChars(_token),AUndoOnlyApp=_undoOnlyApp} , timeout );
}

public ResultSet UndoToken(string _token, bool? _undoOnlyApp, int? timeout = null)
{
	using(var cmd = GetCommand_UndoToken(_token, _undoOnlyApp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServices

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServices(Guid? _applicationID, byte? _enableState, string _gsbUrl, string _localUrl, string _titlePer, string _titleEng, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServices", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AEnableState", IsOutput = false, Value = _enableState == null ? DBNull.Value : (object)_enableState }, 
					new Parameter { Name = "@AGsbUrl", IsOutput = false, Value = string.IsNullOrWhiteSpace(_gsbUrl) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_gsbUrl) }, 
					new Parameter { Name = "@ALocalUrl", IsOutput = false, Value = string.IsNullOrWhiteSpace(_localUrl) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_localUrl) }, 
					new Parameter { Name = "@ATitlePer", IsOutput = false, Value = string.IsNullOrWhiteSpace(_titlePer) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_titlePer) }, 
					new Parameter { Name = "@ATitleEng", IsOutput = false, Value = string.IsNullOrWhiteSpace(_titleEng) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_titleEng) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServicesAsync(Guid? _applicationID, byte? _enableState, string _gsbUrl, string _localUrl, string _titlePer, string _titleEng, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServices(_applicationID, _enableState, _gsbUrl, _localUrl, _titlePer, _titleEng, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServicesDapperAsync<T>(Guid? _applicationID, byte? _enableState, string _gsbUrl, string _localUrl, string _titlePer, string _titleEng, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServices",new {AApplicationID=_applicationID,AEnableState=_enableState,AGsbUrl=string.IsNullOrWhiteSpace(_gsbUrl) ? _gsbUrl : ReplaceArabicWithPersianChars(_gsbUrl),ALocalUrl=string.IsNullOrWhiteSpace(_localUrl) ? _localUrl : ReplaceArabicWithPersianChars(_localUrl),ATitlePer=string.IsNullOrWhiteSpace(_titlePer) ? _titlePer : ReplaceArabicWithPersianChars(_titlePer),ATitleEng=string.IsNullOrWhiteSpace(_titleEng) ? _titleEng : ReplaceArabicWithPersianChars(_titleEng),AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetWebServices(Guid? _applicationID, byte? _enableState, string _gsbUrl, string _localUrl, string _titlePer, string _titleEng, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServices(_applicationID, _enableState, _gsbUrl, _localUrl, _titlePer, _titleEng, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebServiceForAcounts

public System.Data.SqlClient.SqlCommand GetCommand_GetWebServiceForAcounts(Guid? _applicationID, string _titlePer, string _titleEng, Guid? _parentOrganID, Guid? _organID, byte? _latestLocalInquiryResultType, byte? _latestPublicInquiryResultType, byte? _enableState, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebServiceForAcounts", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ATitlePer", IsOutput = false, Value = string.IsNullOrWhiteSpace(_titlePer) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_titlePer) }, 
					new Parameter { Name = "@ATitleEng", IsOutput = false, Value = string.IsNullOrWhiteSpace(_titleEng) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_titleEng) }, 
					new Parameter { Name = "@AParentOrganID", IsOutput = false, Value = _parentOrganID == null ? DBNull.Value : (object)_parentOrganID }, 
					new Parameter { Name = "@AOrganID", IsOutput = false, Value = _organID == null ? DBNull.Value : (object)_organID }, 
					new Parameter { Name = "@ALatestLocalInquiryResultType", IsOutput = false, Value = _latestLocalInquiryResultType == null ? DBNull.Value : (object)_latestLocalInquiryResultType }, 
					new Parameter { Name = "@ALatestPublicInquiryResultType", IsOutput = false, Value = _latestPublicInquiryResultType == null ? DBNull.Value : (object)_latestPublicInquiryResultType }, 
					new Parameter { Name = "@AEnableState", IsOutput = false, Value = _enableState == null ? DBNull.Value : (object)_enableState }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceForAcountsAsync(Guid? _applicationID, string _titlePer, string _titleEng, Guid? _parentOrganID, Guid? _organID, byte? _latestLocalInquiryResultType, byte? _latestPublicInquiryResultType, byte? _enableState, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceForAcounts(_applicationID, _titlePer, _titleEng, _parentOrganID, _organID, _latestLocalInquiryResultType, _latestPublicInquiryResultType, _enableState, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceForAcountsDapperAsync<T>(Guid? _applicationID, string _titlePer, string _titleEng, Guid? _parentOrganID, Guid? _organID, byte? _latestLocalInquiryResultType, byte? _latestPublicInquiryResultType, byte? _enableState, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebServiceForAcounts",new {AApplicationID=_applicationID,ATitlePer=string.IsNullOrWhiteSpace(_titlePer) ? _titlePer : ReplaceArabicWithPersianChars(_titlePer),ATitleEng=string.IsNullOrWhiteSpace(_titleEng) ? _titleEng : ReplaceArabicWithPersianChars(_titleEng),AParentOrganID=_parentOrganID,AOrganID=_organID,ALatestLocalInquiryResultType=_latestLocalInquiryResultType,ALatestPublicInquiryResultType=_latestPublicInquiryResultType,AEnableState=_enableState,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetWebServiceForAcounts(Guid? _applicationID, string _titlePer, string _titleEng, Guid? _parentOrganID, Guid? _organID, byte? _latestLocalInquiryResultType, byte? _latestPublicInquiryResultType, byte? _enableState, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebServiceForAcounts(_applicationID, _titlePer, _titleEng, _parentOrganID, _organID, _latestLocalInquiryResultType, _latestPublicInquiryResultType, _enableState, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region UndoTokenByRefreshTokenID

public System.Data.SqlClient.SqlCommand GetCommand_UndoTokenByRefreshTokenID(Guid? _refreshTokenID, Guid? _userID, bool? _undoOnlyApp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spUndoTokenByRefreshTokenID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ARefreshTokenID", IsOutput = false, Value = _refreshTokenID == null ? DBNull.Value : (object)_refreshTokenID }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AUndoOnlyApp", IsOutput = false, Value = _undoOnlyApp == null ? DBNull.Value : (object)_undoOnlyApp }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UndoTokenByRefreshTokenIDAsync(Guid? _refreshTokenID, Guid? _userID, bool? _undoOnlyApp, int? timeout = null)
{
	using(var cmd = GetCommand_UndoTokenByRefreshTokenID(_refreshTokenID, _userID, _undoOnlyApp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UndoTokenByRefreshTokenIDDapperAsync<T>(Guid? _refreshTokenID, Guid? _userID, bool? _undoOnlyApp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spUndoTokenByRefreshTokenID",new {ARefreshTokenID=_refreshTokenID,AUserID=_userID,AUndoOnlyApp=_undoOnlyApp} , timeout );
}

public ResultSet UndoTokenByRefreshTokenID(Guid? _refreshTokenID, Guid? _userID, bool? _undoOnlyApp, int? timeout = null)
{
	using(var cmd = GetCommand_UndoTokenByRefreshTokenID(_refreshTokenID, _userID, _undoOnlyApp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region UpdateEnableWebService

public System.Data.SqlClient.SqlCommand GetCommand_UpdateEnableWebService(Guid? _id, bool? _enable, int? timeout = null)
{
var cmd = base.CreateCommand("org.spUpdateEnableWebService", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AEnable", IsOutput = false, Value = _enable == null ? DBNull.Value : (object)_enable }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UpdateEnableWebServiceAsync(Guid? _id, bool? _enable, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateEnableWebService(_id, _enable, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UpdateEnableWebServiceDapperAsync<T>(Guid? _id, bool? _enable, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spUpdateEnableWebService",new {AID=_id,AEnable=_enable} , timeout );
}

public ResultSet UpdateEnableWebService(Guid? _id, bool? _enable, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateEnableWebService(_id, _enable, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteExpiredRefreshTokens

public System.Data.SqlClient.SqlCommand GetCommand_DeleteExpiredRefreshTokens(int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteExpiredRefreshTokens", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteExpiredRefreshTokensAsync(int? timeout = null)
{
	using(var cmd = GetCommand_DeleteExpiredRefreshTokens(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteExpiredRefreshTokensDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteExpiredRefreshTokens",new {} , timeout );
}

public ResultSet DeleteExpiredRefreshTokens(int? timeout = null)
{
	using(var cmd = GetCommand_DeleteExpiredRefreshTokens(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetClients2

public System.Data.SqlClient.SqlCommand GetCommand_GetClients2(Guid? _applicationID, string _name, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetClients2", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetClients2Async(Guid? _applicationID, string _name, int? timeout = null)
{
	using(var cmd = GetCommand_GetClients2(_applicationID, _name, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetClients2DapperAsync<T>(Guid? _applicationID, string _name, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetClients2",new {AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name)} , timeout );
}

public ResultSet GetClients2(Guid? _applicationID, string _name, int? timeout = null)
{
	using(var cmd = GetCommand_GetClients2(_applicationID, _name, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionsForSakhtar

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionsForSakhtar(Guid? _applicationID, string _departmentName, byte? _type, string _types, string _nationalCode, string _firstName, string _lastName, string _cellphone, byte? _enableState, byte? _hasUserMoreThanOnePosition, Guid? _roleID, byte? _confirmType, byte? _isDead, byte? _gender, string _departmentIDs, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? _accessTokenExpireTimeSpan, byte? _onlineState, Guid? _positionSubTypeID, byte? _userPasswordExpireState, byte? _userCellPhoneVerifyState, Guid? _commandID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionsForSakhtar", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ADepartmentName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_departmentName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_departmentName) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ATypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_types) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_types) }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AFirstName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_firstName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_firstName) }, 
					new Parameter { Name = "@ALastName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastName) }, 
					new Parameter { Name = "@ACellphone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellphone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellphone) }, 
					new Parameter { Name = "@AEnableState", IsOutput = false, Value = _enableState == null ? DBNull.Value : (object)_enableState }, 
					new Parameter { Name = "@AHasUserMoreThanOnePosition", IsOutput = false, Value = _hasUserMoreThanOnePosition == null ? DBNull.Value : (object)_hasUserMoreThanOnePosition }, 
					new Parameter { Name = "@ARoleID", IsOutput = false, Value = _roleID == null ? DBNull.Value : (object)_roleID }, 
					new Parameter { Name = "@AConfirmType", IsOutput = false, Value = _confirmType == null ? DBNull.Value : (object)_confirmType }, 
					new Parameter { Name = "@AIsDead", IsOutput = false, Value = _isDead == null ? DBNull.Value : (object)_isDead }, 
					new Parameter { Name = "@AGender", IsOutput = false, Value = _gender == null ? DBNull.Value : (object)_gender }, 
					new Parameter { Name = "@ADepartmentIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_departmentIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_departmentIDs) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@AAccessTokenExpireTimeSpan", IsOutput = false, Value = _accessTokenExpireTimeSpan == null ? DBNull.Value : (object)_accessTokenExpireTimeSpan }, 
					new Parameter { Name = "@AOnlineState", IsOutput = false, Value = _onlineState == null ? DBNull.Value : (object)_onlineState }, 
					new Parameter { Name = "@APositionSubTypeID", IsOutput = false, Value = _positionSubTypeID == null ? DBNull.Value : (object)_positionSubTypeID }, 
					new Parameter { Name = "@AUserPasswordExpireState", IsOutput = false, Value = _userPasswordExpireState == null ? DBNull.Value : (object)_userPasswordExpireState }, 
					new Parameter { Name = "@AUserCellPhoneVerifyState", IsOutput = false, Value = _userCellPhoneVerifyState == null ? DBNull.Value : (object)_userCellPhoneVerifyState }, 
					new Parameter { Name = "@ACommandID", IsOutput = false, Value = _commandID == null ? DBNull.Value : (object)_commandID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionsForSakhtarAsync(Guid? _applicationID, string _departmentName, byte? _type, string _types, string _nationalCode, string _firstName, string _lastName, string _cellphone, byte? _enableState, byte? _hasUserMoreThanOnePosition, Guid? _roleID, byte? _confirmType, byte? _isDead, byte? _gender, string _departmentIDs, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? _accessTokenExpireTimeSpan, byte? _onlineState, Guid? _positionSubTypeID, byte? _userPasswordExpireState, byte? _userCellPhoneVerifyState, Guid? _commandID, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionsForSakhtar(_applicationID, _departmentName, _type, _types, _nationalCode, _firstName, _lastName, _cellphone, _enableState, _hasUserMoreThanOnePosition, _roleID, _confirmType, _isDead, _gender, _departmentIDs, _getTotalCount, _pageSize, _pageIndex, _accessTokenExpireTimeSpan, _onlineState, _positionSubTypeID, _userPasswordExpireState, _userCellPhoneVerifyState, _commandID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionsForSakhtarDapperAsync<T>(Guid? _applicationID, string _departmentName, byte? _type, string _types, string _nationalCode, string _firstName, string _lastName, string _cellphone, byte? _enableState, byte? _hasUserMoreThanOnePosition, Guid? _roleID, byte? _confirmType, byte? _isDead, byte? _gender, string _departmentIDs, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? _accessTokenExpireTimeSpan, byte? _onlineState, Guid? _positionSubTypeID, byte? _userPasswordExpireState, byte? _userCellPhoneVerifyState, Guid? _commandID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionsForSakhtar",new {AApplicationID=_applicationID,ADepartmentName=string.IsNullOrWhiteSpace(_departmentName) ? _departmentName : ReplaceArabicWithPersianChars(_departmentName),AType=_type,ATypes=string.IsNullOrWhiteSpace(_types) ? _types : ReplaceArabicWithPersianChars(_types),ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AFirstName=string.IsNullOrWhiteSpace(_firstName) ? _firstName : ReplaceArabicWithPersianChars(_firstName),ALastName=string.IsNullOrWhiteSpace(_lastName) ? _lastName : ReplaceArabicWithPersianChars(_lastName),ACellphone=string.IsNullOrWhiteSpace(_cellphone) ? _cellphone : ReplaceArabicWithPersianChars(_cellphone),AEnableState=_enableState,AHasUserMoreThanOnePosition=_hasUserMoreThanOnePosition,ARoleID=_roleID,AConfirmType=_confirmType,AIsDead=_isDead,AGender=_gender,ADepartmentIDs=string.IsNullOrWhiteSpace(_departmentIDs) ? _departmentIDs : ReplaceArabicWithPersianChars(_departmentIDs),AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex,AAccessTokenExpireTimeSpan=_accessTokenExpireTimeSpan,AOnlineState=_onlineState,APositionSubTypeID=_positionSubTypeID,AUserPasswordExpireState=_userPasswordExpireState,AUserCellPhoneVerifyState=_userCellPhoneVerifyState,ACommandID=_commandID} , timeout );
}

public ResultSet GetPositionsForSakhtar(Guid? _applicationID, string _departmentName, byte? _type, string _types, string _nationalCode, string _firstName, string _lastName, string _cellphone, byte? _enableState, byte? _hasUserMoreThanOnePosition, Guid? _roleID, byte? _confirmType, byte? _isDead, byte? _gender, string _departmentIDs, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? _accessTokenExpireTimeSpan, byte? _onlineState, Guid? _positionSubTypeID, byte? _userPasswordExpireState, byte? _userCellPhoneVerifyState, Guid? _commandID, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionsForSakhtar(_applicationID, _departmentName, _type, _types, _nationalCode, _firstName, _lastName, _cellphone, _enableState, _hasUserMoreThanOnePosition, _roleID, _confirmType, _isDead, _gender, _departmentIDs, _getTotalCount, _pageSize, _pageIndex, _accessTokenExpireTimeSpan, _onlineState, _positionSubTypeID, _userPasswordExpireState, _userCellPhoneVerifyState, _commandID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDynamicPermissionDetails

public System.Data.SqlClient.SqlCommand GetCommand_GetDynamicPermissionDetails(string _dynamicPermissionIDs, Guid? _dynamicPermissionID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDynamicPermissionDetails", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ADynamicPermissionIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_dynamicPermissionIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_dynamicPermissionIDs) }, 
					new Parameter { Name = "@ADynamicPermissionID", IsOutput = false, Value = _dynamicPermissionID == null ? DBNull.Value : (object)_dynamicPermissionID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDynamicPermissionDetailsAsync(string _dynamicPermissionIDs, Guid? _dynamicPermissionID, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermissionDetails(_dynamicPermissionIDs, _dynamicPermissionID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDynamicPermissionDetailsDapperAsync<T>(string _dynamicPermissionIDs, Guid? _dynamicPermissionID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDynamicPermissionDetails",new {ADynamicPermissionIDs=string.IsNullOrWhiteSpace(_dynamicPermissionIDs) ? _dynamicPermissionIDs : ReplaceArabicWithPersianChars(_dynamicPermissionIDs),ADynamicPermissionID=_dynamicPermissionID} , timeout );
}

public ResultSet GetDynamicPermissionDetails(string _dynamicPermissionIDs, Guid? _dynamicPermissionID, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermissionDetails(_dynamicPermissionIDs, _dynamicPermissionID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteRefreshToken

public System.Data.SqlClient.SqlCommand GetCommand_DeleteRefreshToken(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteRefreshToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteRefreshTokenAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteRefreshToken(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteRefreshTokenDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteRefreshToken",new {AID=_id} , timeout );
}

public ResultSet DeleteRefreshToken(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteRefreshToken(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteRefreshTokenBySsoTicket

public System.Data.SqlClient.SqlCommand GetCommand_DeleteRefreshTokenBySsoTicket(string _ssoTicket, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteRefreshTokenBySsoTicket", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ASsoTicket", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ssoTicket) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ssoTicket) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteRefreshTokenBySsoTicketAsync(string _ssoTicket, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteRefreshTokenBySsoTicket(_ssoTicket, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteRefreshTokenBySsoTicketDapperAsync<T>(string _ssoTicket, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteRefreshTokenBySsoTicket",new {ASsoTicket=string.IsNullOrWhiteSpace(_ssoTicket) ? _ssoTicket : ReplaceArabicWithPersianChars(_ssoTicket)} , timeout );
}

public ResultSet DeleteRefreshTokenBySsoTicket(string _ssoTicket, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteRefreshTokenBySsoTicket(_ssoTicket, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteRefreshTokenByUserID

public System.Data.SqlClient.SqlCommand GetCommand_DeleteRefreshTokenByUserID(Guid? _userID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteRefreshTokenByUserID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteRefreshTokenByUserIDAsync(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteRefreshTokenByUserID(_userID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteRefreshTokenByUserIDDapperAsync<T>(Guid? _userID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteRefreshTokenByUserID",new {AUserID=_userID} , timeout );
}

public ResultSet DeleteRefreshTokenByUserID(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteRefreshTokenByUserID(_userID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetClientsForUser

public System.Data.SqlClient.SqlCommand GetCommand_GetClientsForUser(Guid? _userID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetClientsForUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetClientsForUserAsync(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_GetClientsForUser(_userID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetClientsForUserDapperAsync<T>(Guid? _userID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetClientsForUser",new {AUserID=_userID} , timeout );
}

public ResultSet GetClientsForUser(Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_GetClientsForUser(_userID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSalaryDepartment

public System.Data.SqlClient.SqlCommand GetCommand_GetSalaryDepartment(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetSalaryDepartment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSalaryDepartmentAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetSalaryDepartment(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSalaryDepartmentDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetSalaryDepartment",new {AID=_id} , timeout );
}

public ResultSet GetSalaryDepartment(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetSalaryDepartment(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyMasterApplications

public System.Data.SqlClient.SqlCommand GetCommand_ModifyMasterApplications(bool? _isNewRecord, Guid? _masterPasswordsID, Guid? _applicationID, Guid? _clientID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyMasterApplications", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AMasterPasswordsID", IsOutput = false, Value = _masterPasswordsID == null ? DBNull.Value : (object)_masterPasswordsID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AClientID", IsOutput = false, Value = _clientID == null ? DBNull.Value : (object)_clientID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyMasterApplicationsAsync(bool? _isNewRecord, Guid? _masterPasswordsID, Guid? _applicationID, Guid? _clientID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyMasterApplications(_isNewRecord, _masterPasswordsID, _applicationID, _clientID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyMasterApplicationsDapperAsync<T>(bool? _isNewRecord, Guid? _masterPasswordsID, Guid? _applicationID, Guid? _clientID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyMasterApplications",new {AIsNewRecord=_isNewRecord,AMasterPasswordsID=_masterPasswordsID,AApplicationID=_applicationID,AClientID=_clientID} , timeout );
}

public ResultSet ModifyMasterApplications(bool? _isNewRecord, Guid? _masterPasswordsID, Guid? _applicationID, Guid? _clientID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyMasterApplications(_isNewRecord, _masterPasswordsID, _applicationID, _clientID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region UpdateEnableWebServiceUser

public System.Data.SqlClient.SqlCommand GetCommand_UpdateEnableWebServiceUser(Guid? _id, bool? _enable, int? timeout = null)
{
var cmd = base.CreateCommand("org.spUpdateEnableWebServiceUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AEnable", IsOutput = false, Value = _enable == null ? DBNull.Value : (object)_enable }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UpdateEnableWebServiceUserAsync(Guid? _id, bool? _enable, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateEnableWebServiceUser(_id, _enable, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UpdateEnableWebServiceUserDapperAsync<T>(Guid? _id, bool? _enable, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spUpdateEnableWebServiceUser",new {AID=_id,AEnable=_enable} , timeout );
}

public ResultSet UpdateEnableWebServiceUser(Guid? _id, bool? _enable, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateEnableWebServiceUser(_id, _enable, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSalaryDepartments

public System.Data.SqlClient.SqlCommand GetCommand_GetSalaryDepartments(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, string _systemEnablements, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, string _userDefinitionReferenceTypes, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetSalaryDepartments", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AProvinceID", IsOutput = false, Value = _provinceID == null ? DBNull.Value : (object)_provinceID }, 
					new Parameter { Name = "@AUnitType", IsOutput = false, Value = _unitType == null ? DBNull.Value : (object)_unitType }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ATypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_types) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_types) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@ASubType", IsOutput = false, Value = _subType == null ? DBNull.Value : (object)_subType }, 
					new Parameter { Name = "@ACouncilType", IsOutput = false, Value = _councilType == null ? DBNull.Value : (object)_councilType }, 
					new Parameter { Name = "@AOrganType", IsOutput = false, Value = _organType == null ? DBNull.Value : (object)_organType }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@ABudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_budgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_budgetCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ACodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_codes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_codes) }, 
					new Parameter { Name = "@ACOFOG", IsOutput = false, Value = _cOFOG == null ? DBNull.Value : (object)_cOFOG }, 
					new Parameter { Name = "@ALevel", IsOutput = false, Value = _level == null ? DBNull.Value : (object)_level }, 
					new Parameter { Name = "@ALoadLabel", IsOutput = false, Value = _loadLabel == null ? DBNull.Value : (object)_loadLabel }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ANeedsChartType", IsOutput = false, Value = _needsChartType == null ? DBNull.Value : (object)_needsChartType }, 
					new Parameter { Name = "@AWebServiceSaveType", IsOutput = false, Value = _webServiceSaveType == null ? DBNull.Value : (object)_webServiceSaveType }, 
					new Parameter { Name = "@ASystemEnablements", IsOutput = false, Value = string.IsNullOrWhiteSpace(_systemEnablements) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_systemEnablements) }, 
					new Parameter { Name = "@AMainOrganType", IsOutput = false, Value = _mainOrganType == null ? DBNull.Value : (object)_mainOrganType }, 
					new Parameter { Name = "@AElaboratedBudgetType", IsOutput = false, Value = _elaboratedBudgetType == null ? DBNull.Value : (object)_elaboratedBudgetType }, 
					new Parameter { Name = "@ATreasurySupervisionType", IsOutput = false, Value = _treasurySupervisionType == null ? DBNull.Value : (object)_treasurySupervisionType }, 
					new Parameter { Name = "@AUserDefinitionReferenceType", IsOutput = false, Value = _userDefinitionReferenceType == null ? DBNull.Value : (object)_userDefinitionReferenceType }, 
					new Parameter { Name = "@ABoardOfTrusteesType", IsOutput = false, Value = _boardOfTrusteesType == null ? DBNull.Value : (object)_boardOfTrusteesType }, 
					new Parameter { Name = "@AArrangementTypeInSalary", IsOutput = false, Value = _arrangementTypeInSalary == null ? DBNull.Value : (object)_arrangementTypeInSalary }, 
					new Parameter { Name = "@ABriefNameType", IsOutput = false, Value = _briefNameType == null ? DBNull.Value : (object)_briefNameType }, 
					new Parameter { Name = "@AUserDefinitionReferenceTypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSalaryDepartmentsAsync(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, string _systemEnablements, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, string _userDefinitionReferenceTypes, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetSalaryDepartments(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _codes, _cOFOG, _level, _loadLabel, _nationalCode, _needsChartType, _webServiceSaveType, _systemEnablements, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _userDefinitionReferenceTypes, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSalaryDepartmentsDapperAsync<T>(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, string _systemEnablements, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, string _userDefinitionReferenceTypes, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetSalaryDepartments",new {AParentID=_parentID,AProvinceID=_provinceID,AUnitType=_unitType,AType=_type,ATypes=string.IsNullOrWhiteSpace(_types) ? _types : ReplaceArabicWithPersianChars(_types),AEnabled=_enabled,ASubType=_subType,ACouncilType=_councilType,AOrganType=_organType,ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),ABudgetCode=string.IsNullOrWhiteSpace(_budgetCode) ? _budgetCode : ReplaceArabicWithPersianChars(_budgetCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ACodes=string.IsNullOrWhiteSpace(_codes) ? _codes : ReplaceArabicWithPersianChars(_codes),ACOFOG=_cOFOG,ALevel=_level,ALoadLabel=_loadLabel,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ANeedsChartType=_needsChartType,AWebServiceSaveType=_webServiceSaveType,ASystemEnablements=string.IsNullOrWhiteSpace(_systemEnablements) ? _systemEnablements : ReplaceArabicWithPersianChars(_systemEnablements),AMainOrganType=_mainOrganType,AElaboratedBudgetType=_elaboratedBudgetType,ATreasurySupervisionType=_treasurySupervisionType,AUserDefinitionReferenceType=_userDefinitionReferenceType,ABoardOfTrusteesType=_boardOfTrusteesType,AArrangementTypeInSalary=_arrangementTypeInSalary,ABriefNameType=_briefNameType,AUserDefinitionReferenceTypes=string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? _userDefinitionReferenceTypes : ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes),AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetSalaryDepartments(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, string _systemEnablements, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, string _userDefinitionReferenceTypes, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetSalaryDepartments(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _codes, _cOFOG, _level, _loadLabel, _nationalCode, _needsChartType, _webServiceSaveType, _systemEnablements, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _userDefinitionReferenceTypes, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserByUserName

public System.Data.SqlClient.SqlCommand GetCommand_GetUserByUserName(string _userName, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserByUserName", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserByUserNameAsync(string _userName, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByUserName(_userName, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserByUserNameDapperAsync<T>(string _userName, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserByUserName",new {AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName),AApplicationID=_applicationID,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet GetUserByUserName(string _userName, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByUserName(_userName, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region UpdateIndividualIDWebServiceUser

public System.Data.SqlClient.SqlCommand GetCommand_UpdateIndividualIDWebServiceUser(Guid? _id, Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spUpdateIndividualIDWebServiceUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UpdateIndividualIDWebServiceUserAsync(Guid? _id, Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateIndividualIDWebServiceUser(_id, _individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UpdateIndividualIDWebServiceUserDapperAsync<T>(Guid? _id, Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spUpdateIndividualIDWebServiceUser",new {AID=_id,AIndividualID=_individualID} , timeout );
}

public ResultSet UpdateIndividualIDWebServiceUser(Guid? _id, Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateIndividualIDWebServiceUser(_id, _individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyRefreshToken

public System.Data.SqlClient.SqlCommand GetCommand_ModifyRefreshToken(bool? _isNewRecord, Guid? _id, Guid? _userID, DateTime? _issuedDate, DateTime? _expireDate, string _protectedTicket, string _ssoTicket, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyRefreshToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AIssuedDate", IsOutput = false, Value = _issuedDate == null ? DBNull.Value : (object)_issuedDate }, 
					new Parameter { Name = "@AExpireDate", IsOutput = false, Value = _expireDate == null ? DBNull.Value : (object)_expireDate }, 
					new Parameter { Name = "@AProtectedTicket", IsOutput = false, Value = string.IsNullOrWhiteSpace(_protectedTicket) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_protectedTicket) }, 
					new Parameter { Name = "@ASsoTicket", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ssoTicket) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ssoTicket) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyRefreshTokenAsync(bool? _isNewRecord, Guid? _id, Guid? _userID, DateTime? _issuedDate, DateTime? _expireDate, string _protectedTicket, string _ssoTicket, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyRefreshToken(_isNewRecord, _id, _userID, _issuedDate, _expireDate, _protectedTicket, _ssoTicket, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyRefreshTokenDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _userID, DateTime? _issuedDate, DateTime? _expireDate, string _protectedTicket, string _ssoTicket, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyRefreshToken",new {AIsNewRecord=_isNewRecord,AID=_id,AUserID=_userID,AIssuedDate=_issuedDate,AExpireDate=_expireDate,AProtectedTicket=string.IsNullOrWhiteSpace(_protectedTicket) ? _protectedTicket : ReplaceArabicWithPersianChars(_protectedTicket),ASsoTicket=string.IsNullOrWhiteSpace(_ssoTicket) ? _ssoTicket : ReplaceArabicWithPersianChars(_ssoTicket)} , timeout );
}

public ResultSet ModifyRefreshToken(bool? _isNewRecord, Guid? _id, Guid? _userID, DateTime? _issuedDate, DateTime? _expireDate, string _protectedTicket, string _ssoTicket, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyRefreshToken(_isNewRecord, _id, _userID, _issuedDate, _expireDate, _protectedTicket, _ssoTicket, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region AddSsoCache

public System.Data.SqlClient.SqlCommand GetCommand_AddSsoCache(Guid? _id, Guid? _masterPassword, string _key, string _ssoTicket, string _hash, string _userName, int? timeout = null)
{
var cmd = base.CreateCommand("org.spAddSsoCache", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AMasterPassword", IsOutput = false, Value = _masterPassword == null ? DBNull.Value : (object)_masterPassword }, 
					new Parameter { Name = "@AKey", IsOutput = false, Value = string.IsNullOrWhiteSpace(_key) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_key) }, 
					new Parameter { Name = "@ASsoTicket", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ssoTicket) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ssoTicket) }, 
					new Parameter { Name = "@AHash", IsOutput = false, Value = string.IsNullOrWhiteSpace(_hash) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_hash) }, 
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> AddSsoCacheAsync(Guid? _id, Guid? _masterPassword, string _key, string _ssoTicket, string _hash, string _userName, int? timeout = null)
{
	using(var cmd = GetCommand_AddSsoCache(_id, _masterPassword, _key, _ssoTicket, _hash, _userName, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> AddSsoCacheDapperAsync<T>(Guid? _id, Guid? _masterPassword, string _key, string _ssoTicket, string _hash, string _userName, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spAddSsoCache",new {AID=_id,AMasterPassword=_masterPassword,AKey=string.IsNullOrWhiteSpace(_key) ? _key : ReplaceArabicWithPersianChars(_key),ASsoTicket=string.IsNullOrWhiteSpace(_ssoTicket) ? _ssoTicket : ReplaceArabicWithPersianChars(_ssoTicket),AHash=string.IsNullOrWhiteSpace(_hash) ? _hash : ReplaceArabicWithPersianChars(_hash),AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName)} , timeout );
}

public ResultSet AddSsoCache(Guid? _id, Guid? _masterPassword, string _key, string _ssoTicket, string _hash, string _userName, int? timeout = null)
{
	using(var cmd = GetCommand_AddSsoCache(_id, _masterPassword, _key, _ssoTicket, _hash, _userName, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteMasterPassword

public System.Data.SqlClient.SqlCommand GetCommand_DeleteMasterPassword(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteMasterPassword", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ARemoverUserID", IsOutput = false, Value = _removerUserID == null ? DBNull.Value : (object)_removerUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteMasterPasswordAsync(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteMasterPassword(_id, _removerUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteMasterPasswordDapperAsync<T>(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteMasterPassword",new {AID=_id,ARemoverUserID=_removerUserID} , timeout );
}

public ResultSet DeleteMasterPassword(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteMasterPassword(_id, _removerUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionDepartmentMappings

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionDepartmentMappings(Guid? _applicationID, byte? _positionType, byte? _departmentType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionDepartmentMappings", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@APositionType", IsOutput = false, Value = _positionType == null ? DBNull.Value : (object)_positionType }, 
					new Parameter { Name = "@ADepartmentType", IsOutput = false, Value = _departmentType == null ? DBNull.Value : (object)_departmentType }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionDepartmentMappingsAsync(Guid? _applicationID, byte? _positionType, byte? _departmentType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionDepartmentMappings(_applicationID, _positionType, _departmentType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionDepartmentMappingsDapperAsync<T>(Guid? _applicationID, byte? _positionType, byte? _departmentType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionDepartmentMappings",new {AApplicationID=_applicationID,APositionType=_positionType,ADepartmentType=_departmentType,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetPositionDepartmentMappings(Guid? _applicationID, byte? _positionType, byte? _departmentType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionDepartmentMappings(_applicationID, _positionType, _departmentType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region WebServiceUserResetPassword

public System.Data.SqlClient.SqlCommand GetCommand_WebServiceUserResetPassword(Guid? _webServiceUserID, string _password, DateTime? _passwordExpireDate, int? timeout = null)
{
var cmd = base.CreateCommand("org.spWebServiceUserResetPassword", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AWebServiceUserID", IsOutput = false, Value = _webServiceUserID == null ? DBNull.Value : (object)_webServiceUserID }, 
					new Parameter { Name = "@APassword", IsOutput = false, Value = string.IsNullOrWhiteSpace(_password) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_password) }, 
					new Parameter { Name = "@APasswordExpireDate", IsOutput = false, Value = _passwordExpireDate == null ? DBNull.Value : (object)_passwordExpireDate }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> WebServiceUserResetPasswordAsync(Guid? _webServiceUserID, string _password, DateTime? _passwordExpireDate, int? timeout = null)
{
	using(var cmd = GetCommand_WebServiceUserResetPassword(_webServiceUserID, _password, _passwordExpireDate, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> WebServiceUserResetPasswordDapperAsync<T>(Guid? _webServiceUserID, string _password, DateTime? _passwordExpireDate, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spWebServiceUserResetPassword",new {AWebServiceUserID=_webServiceUserID,APassword=string.IsNullOrWhiteSpace(_password) ? _password : ReplaceArabicWithPersianChars(_password),APasswordExpireDate=_passwordExpireDate} , timeout );
}

public ResultSet WebServiceUserResetPassword(Guid? _webServiceUserID, string _password, DateTime? _passwordExpireDate, int? timeout = null)
{
	using(var cmd = GetCommand_WebServiceUserResetPassword(_webServiceUserID, _password, _passwordExpireDate, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteSsoCache

public System.Data.SqlClient.SqlCommand GetCommand_DeleteSsoCache(string _key, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteSsoCache", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AKey", IsOutput = false, Value = string.IsNullOrWhiteSpace(_key) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_key) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteSsoCacheAsync(string _key, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteSsoCache(_key, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteSsoCacheDapperAsync<T>(string _key, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteSsoCache",new {AKey=string.IsNullOrWhiteSpace(_key) ? _key : ReplaceArabicWithPersianChars(_key)} , timeout );
}

public ResultSet DeleteSsoCache(string _key, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteSsoCache(_key, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region UpdateRefreshTokensExpireDateBySsoTicket

public System.Data.SqlClient.SqlCommand GetCommand_UpdateRefreshTokensExpireDateBySsoTicket(Guid? _userID, DateTime? _expireDate, string _ssoTicket, int? timeout = null)
{
var cmd = base.CreateCommand("org.spUpdateRefreshTokensExpireDateBySsoTicket", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AExpireDate", IsOutput = false, Value = _expireDate == null ? DBNull.Value : (object)_expireDate }, 
					new Parameter { Name = "@ASsoTicket", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ssoTicket) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ssoTicket) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UpdateRefreshTokensExpireDateBySsoTicketAsync(Guid? _userID, DateTime? _expireDate, string _ssoTicket, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateRefreshTokensExpireDateBySsoTicket(_userID, _expireDate, _ssoTicket, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UpdateRefreshTokensExpireDateBySsoTicketDapperAsync<T>(Guid? _userID, DateTime? _expireDate, string _ssoTicket, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spUpdateRefreshTokensExpireDateBySsoTicket",new {AUserID=_userID,AExpireDate=_expireDate,ASsoTicket=string.IsNullOrWhiteSpace(_ssoTicket) ? _ssoTicket : ReplaceArabicWithPersianChars(_ssoTicket)} , timeout );
}

public ResultSet UpdateRefreshTokensExpireDateBySsoTicket(Guid? _userID, DateTime? _expireDate, string _ssoTicket, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateRefreshTokensExpireDateBySsoTicket(_userID, _expireDate, _ssoTicket, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSsoCache

public System.Data.SqlClient.SqlCommand GetCommand_GetSsoCache(string _key, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetSsoCache", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AKey", IsOutput = false, Value = string.IsNullOrWhiteSpace(_key) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_key) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSsoCacheAsync(string _key, int? timeout = null)
{
	using(var cmd = GetCommand_GetSsoCache(_key, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSsoCacheDapperAsync<T>(string _key, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetSsoCache",new {AKey=string.IsNullOrWhiteSpace(_key) ? _key : ReplaceArabicWithPersianChars(_key)} , timeout );
}

public ResultSet GetSsoCache(string _key, int? timeout = null)
{
	using(var cmd = GetCommand_GetSsoCache(_key, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteWebServiceUser

public System.Data.SqlClient.SqlCommand GetCommand_DeleteWebServiceUser(Guid? _id, Guid? _curentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteWebServiceUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurentUserID", IsOutput = false, Value = _curentUserID == null ? DBNull.Value : (object)_curentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteWebServiceUserAsync(Guid? _id, Guid? _curentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteWebServiceUser(_id, _curentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteWebServiceUserDapperAsync<T>(Guid? _id, Guid? _curentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteWebServiceUser",new {AID=_id,ACurentUserID=_curentUserID} , timeout );
}

public ResultSet DeleteWebServiceUser(Guid? _id, Guid? _curentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteWebServiceUser(_id, _curentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetRefreshToken

public System.Data.SqlClient.SqlCommand GetCommand_GetRefreshToken(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetRefreshToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetRefreshTokenAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetRefreshToken(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetRefreshTokenDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetRefreshToken",new {AID=_id} , timeout );
}

public ResultSet GetRefreshToken(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetRefreshToken(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositions

public System.Data.SqlClient.SqlCommand GetCommand_GetPositions(string _iDs, Guid? _applicationID, Guid? _creatorUserID, string _applicationIDs, Guid? _parentDepartmentID, Guid? _departmentID, string _departmentName, byte? _type, string _types, byte? _userType, Guid? _userID, string _nationalCode, string _name, string _firstName, string _lastName, string _email, string _cellphone, byte? _enableState, byte? _hasUserMoreThanOnePosition, Guid? _roleID, byte? _subType, byte? _confirmType, byte? _isDead, byte? _gender, string _departmentIDs, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? _accessTokenExpireTimeSpan, byte? _onlineState, Guid? _positionSubTypeID, byte? _userPasswordExpireState, byte? _userCellPhoneVerifyState, Guid? _commandID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositions", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_iDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_iDs) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACreatorUserID", IsOutput = false, Value = _creatorUserID == null ? DBNull.Value : (object)_creatorUserID }, 
					new Parameter { Name = "@AApplicationIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_applicationIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_applicationIDs) }, 
					new Parameter { Name = "@AParentDepartmentID", IsOutput = false, Value = _parentDepartmentID == null ? DBNull.Value : (object)_parentDepartmentID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@ADepartmentName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_departmentName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_departmentName) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ATypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_types) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_types) }, 
					new Parameter { Name = "@AUserType", IsOutput = false, Value = _userType == null ? DBNull.Value : (object)_userType }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AFirstName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_firstName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_firstName) }, 
					new Parameter { Name = "@ALastName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastName) }, 
					new Parameter { Name = "@AEmail", IsOutput = false, Value = string.IsNullOrWhiteSpace(_email) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_email) }, 
					new Parameter { Name = "@ACellphone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellphone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellphone) }, 
					new Parameter { Name = "@AEnableState", IsOutput = false, Value = _enableState == null ? DBNull.Value : (object)_enableState }, 
					new Parameter { Name = "@AHasUserMoreThanOnePosition", IsOutput = false, Value = _hasUserMoreThanOnePosition == null ? DBNull.Value : (object)_hasUserMoreThanOnePosition }, 
					new Parameter { Name = "@ARoleID", IsOutput = false, Value = _roleID == null ? DBNull.Value : (object)_roleID }, 
					new Parameter { Name = "@ASubType", IsOutput = false, Value = _subType == null ? DBNull.Value : (object)_subType }, 
					new Parameter { Name = "@AConfirmType", IsOutput = false, Value = _confirmType == null ? DBNull.Value : (object)_confirmType }, 
					new Parameter { Name = "@AIsDead", IsOutput = false, Value = _isDead == null ? DBNull.Value : (object)_isDead }, 
					new Parameter { Name = "@AGender", IsOutput = false, Value = _gender == null ? DBNull.Value : (object)_gender }, 
					new Parameter { Name = "@ADepartmentIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_departmentIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_departmentIDs) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@AAccessTokenExpireTimeSpan", IsOutput = false, Value = _accessTokenExpireTimeSpan == null ? DBNull.Value : (object)_accessTokenExpireTimeSpan }, 
					new Parameter { Name = "@AOnlineState", IsOutput = false, Value = _onlineState == null ? DBNull.Value : (object)_onlineState }, 
					new Parameter { Name = "@APositionSubTypeID", IsOutput = false, Value = _positionSubTypeID == null ? DBNull.Value : (object)_positionSubTypeID }, 
					new Parameter { Name = "@AUserPasswordExpireState", IsOutput = false, Value = _userPasswordExpireState == null ? DBNull.Value : (object)_userPasswordExpireState }, 
					new Parameter { Name = "@AUserCellPhoneVerifyState", IsOutput = false, Value = _userCellPhoneVerifyState == null ? DBNull.Value : (object)_userCellPhoneVerifyState }, 
					new Parameter { Name = "@ACommandID", IsOutput = false, Value = _commandID == null ? DBNull.Value : (object)_commandID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionsAsync(string _iDs, Guid? _applicationID, Guid? _creatorUserID, string _applicationIDs, Guid? _parentDepartmentID, Guid? _departmentID, string _departmentName, byte? _type, string _types, byte? _userType, Guid? _userID, string _nationalCode, string _name, string _firstName, string _lastName, string _email, string _cellphone, byte? _enableState, byte? _hasUserMoreThanOnePosition, Guid? _roleID, byte? _subType, byte? _confirmType, byte? _isDead, byte? _gender, string _departmentIDs, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? _accessTokenExpireTimeSpan, byte? _onlineState, Guid? _positionSubTypeID, byte? _userPasswordExpireState, byte? _userCellPhoneVerifyState, Guid? _commandID, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositions(_iDs, _applicationID, _creatorUserID, _applicationIDs, _parentDepartmentID, _departmentID, _departmentName, _type, _types, _userType, _userID, _nationalCode, _name, _firstName, _lastName, _email, _cellphone, _enableState, _hasUserMoreThanOnePosition, _roleID, _subType, _confirmType, _isDead, _gender, _departmentIDs, _getTotalCount, _pageSize, _pageIndex, _sortExp, _accessTokenExpireTimeSpan, _onlineState, _positionSubTypeID, _userPasswordExpireState, _userCellPhoneVerifyState, _commandID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionsDapperAsync<T>(string _iDs, Guid? _applicationID, Guid? _creatorUserID, string _applicationIDs, Guid? _parentDepartmentID, Guid? _departmentID, string _departmentName, byte? _type, string _types, byte? _userType, Guid? _userID, string _nationalCode, string _name, string _firstName, string _lastName, string _email, string _cellphone, byte? _enableState, byte? _hasUserMoreThanOnePosition, Guid? _roleID, byte? _subType, byte? _confirmType, byte? _isDead, byte? _gender, string _departmentIDs, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? _accessTokenExpireTimeSpan, byte? _onlineState, Guid? _positionSubTypeID, byte? _userPasswordExpireState, byte? _userCellPhoneVerifyState, Guid? _commandID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositions",new {AIDs=string.IsNullOrWhiteSpace(_iDs) ? _iDs : ReplaceArabicWithPersianChars(_iDs),AApplicationID=_applicationID,ACreatorUserID=_creatorUserID,AApplicationIDs=string.IsNullOrWhiteSpace(_applicationIDs) ? _applicationIDs : ReplaceArabicWithPersianChars(_applicationIDs),AParentDepartmentID=_parentDepartmentID,ADepartmentID=_departmentID,ADepartmentName=string.IsNullOrWhiteSpace(_departmentName) ? _departmentName : ReplaceArabicWithPersianChars(_departmentName),AType=_type,ATypes=string.IsNullOrWhiteSpace(_types) ? _types : ReplaceArabicWithPersianChars(_types),AUserType=_userType,AUserID=_userID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AFirstName=string.IsNullOrWhiteSpace(_firstName) ? _firstName : ReplaceArabicWithPersianChars(_firstName),ALastName=string.IsNullOrWhiteSpace(_lastName) ? _lastName : ReplaceArabicWithPersianChars(_lastName),AEmail=string.IsNullOrWhiteSpace(_email) ? _email : ReplaceArabicWithPersianChars(_email),ACellphone=string.IsNullOrWhiteSpace(_cellphone) ? _cellphone : ReplaceArabicWithPersianChars(_cellphone),AEnableState=_enableState,AHasUserMoreThanOnePosition=_hasUserMoreThanOnePosition,ARoleID=_roleID,ASubType=_subType,AConfirmType=_confirmType,AIsDead=_isDead,AGender=_gender,ADepartmentIDs=string.IsNullOrWhiteSpace(_departmentIDs) ? _departmentIDs : ReplaceArabicWithPersianChars(_departmentIDs),AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),AAccessTokenExpireTimeSpan=_accessTokenExpireTimeSpan,AOnlineState=_onlineState,APositionSubTypeID=_positionSubTypeID,AUserPasswordExpireState=_userPasswordExpireState,AUserCellPhoneVerifyState=_userCellPhoneVerifyState,ACommandID=_commandID} , timeout );
}

public ResultSet GetPositions(string _iDs, Guid? _applicationID, Guid? _creatorUserID, string _applicationIDs, Guid? _parentDepartmentID, Guid? _departmentID, string _departmentName, byte? _type, string _types, byte? _userType, Guid? _userID, string _nationalCode, string _name, string _firstName, string _lastName, string _email, string _cellphone, byte? _enableState, byte? _hasUserMoreThanOnePosition, Guid? _roleID, byte? _subType, byte? _confirmType, byte? _isDead, byte? _gender, string _departmentIDs, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? _accessTokenExpireTimeSpan, byte? _onlineState, Guid? _positionSubTypeID, byte? _userPasswordExpireState, byte? _userCellPhoneVerifyState, Guid? _commandID, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositions(_iDs, _applicationID, _creatorUserID, _applicationIDs, _parentDepartmentID, _departmentID, _departmentName, _type, _types, _userType, _userID, _nationalCode, _name, _firstName, _lastName, _email, _cellphone, _enableState, _hasUserMoreThanOnePosition, _roleID, _subType, _confirmType, _isDead, _gender, _departmentIDs, _getTotalCount, _pageSize, _pageIndex, _sortExp, _accessTokenExpireTimeSpan, _onlineState, _positionSubTypeID, _userPasswordExpireState, _userCellPhoneVerifyState, _commandID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionHistorys

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionHistorys(Guid? _positionID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionHistorys", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionHistorysAsync(Guid? _positionID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionHistorys(_positionID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionHistorysDapperAsync<T>(Guid? _positionID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionHistorys",new {APositionID=_positionID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetPositionHistorys(Guid? _positionID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionHistorys(_positionID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetMaxCodeWebServiceUser

public System.Data.SqlClient.SqlCommand GetCommand_GetMaxCodeWebServiceUser(int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetMaxCodeWebServiceUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetMaxCodeWebServiceUserAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetMaxCodeWebServiceUser(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetMaxCodeWebServiceUserDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetMaxCodeWebServiceUser",new {} , timeout );
}

public ResultSet GetMaxCodeWebServiceUser(int? timeout = null)
{
	using(var cmd = GetCommand_GetMaxCodeWebServiceUser(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetRefreshTokens

public System.Data.SqlClient.SqlCommand GetCommand_GetRefreshTokens(Guid? _userID, string _ssoTicket, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetRefreshTokens", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ASsoTicket", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ssoTicket) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ssoTicket) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetRefreshTokensAsync(Guid? _userID, string _ssoTicket, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetRefreshTokens(_userID, _ssoTicket, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetRefreshTokensDapperAsync<T>(Guid? _userID, string _ssoTicket, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetRefreshTokens",new {AUserID=_userID,ASsoTicket=string.IsNullOrWhiteSpace(_ssoTicket) ? _ssoTicket : ReplaceArabicWithPersianChars(_ssoTicket),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetRefreshTokens(Guid? _userID, string _ssoTicket, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetRefreshTokens(_userID, _ssoTicket, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteMasterApplications

public System.Data.SqlClient.SqlCommand GetCommand_DeleteMasterApplications(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteMasterApplications", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ARemoverUserID", IsOutput = false, Value = _removerUserID == null ? DBNull.Value : (object)_removerUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteMasterApplicationsAsync(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteMasterApplications(_id, _removerUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteMasterApplicationsDapperAsync<T>(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteMasterApplications",new {AID=_id,ARemoverUserID=_removerUserID} , timeout );
}

public ResultSet DeleteMasterApplications(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteMasterApplications(_id, _removerUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDynamicPermissionDepartments

public System.Data.SqlClient.SqlCommand GetCommand_GetDynamicPermissionDepartments(Guid? _objectID, string _objectIDs, byte? _dynamicPermissionType, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDynamicPermissionDepartments", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AObjectID", IsOutput = false, Value = _objectID == null ? DBNull.Value : (object)_objectID }, 
					new Parameter { Name = "@AObjectIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_objectIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_objectIDs) }, 
					new Parameter { Name = "@ADynamicPermissionType", IsOutput = false, Value = _dynamicPermissionType == null ? DBNull.Value : (object)_dynamicPermissionType }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDynamicPermissionDepartmentsAsync(Guid? _objectID, string _objectIDs, byte? _dynamicPermissionType, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermissionDepartments(_objectID, _objectIDs, _dynamicPermissionType, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDynamicPermissionDepartmentsDapperAsync<T>(Guid? _objectID, string _objectIDs, byte? _dynamicPermissionType, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDynamicPermissionDepartments",new {AObjectID=_objectID,AObjectIDs=string.IsNullOrWhiteSpace(_objectIDs) ? _objectIDs : ReplaceArabicWithPersianChars(_objectIDs),ADynamicPermissionType=_dynamicPermissionType,AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetDynamicPermissionDepartments(Guid? _objectID, string _objectIDs, byte? _dynamicPermissionType, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermissionDepartments(_objectID, _objectIDs, _dynamicPermissionType, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSecurityStampByEmail

public System.Data.SqlClient.SqlCommand GetCommand_GetSecurityStampByEmail(string _email, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetSecurityStampByEmail", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AEmail", IsOutput = false, Value = string.IsNullOrWhiteSpace(_email) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_email) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSecurityStampByEmailAsync(string _email, int? timeout = null)
{
	using(var cmd = GetCommand_GetSecurityStampByEmail(_email, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSecurityStampByEmailDapperAsync<T>(string _email, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetSecurityStampByEmail",new {AEmail=string.IsNullOrWhiteSpace(_email) ? _email : ReplaceArabicWithPersianChars(_email)} , timeout );
}

public ResultSet GetSecurityStampByEmail(string _email, int? timeout = null)
{
	using(var cmd = GetCommand_GetSecurityStampByEmail(_email, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDynamicPermissions

public System.Data.SqlClient.SqlCommand GetCommand_GetDynamicPermissions(Guid? _objectID, byte? _dynamicPermissionType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDynamicPermissions", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AObjectID", IsOutput = false, Value = _objectID == null ? DBNull.Value : (object)_objectID }, 
					new Parameter { Name = "@ADynamicPermissionType", IsOutput = false, Value = _dynamicPermissionType == null ? DBNull.Value : (object)_dynamicPermissionType }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDynamicPermissionsAsync(Guid? _objectID, byte? _dynamicPermissionType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermissions(_objectID, _dynamicPermissionType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDynamicPermissionsDapperAsync<T>(Guid? _objectID, byte? _dynamicPermissionType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDynamicPermissions",new {AObjectID=_objectID,ADynamicPermissionType=_dynamicPermissionType,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDynamicPermissions(Guid? _objectID, byte? _dynamicPermissionType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDynamicPermissions(_objectID, _dynamicPermissionType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetSecurityStampByCellPhone

public System.Data.SqlClient.SqlCommand GetCommand_SetSecurityStampByCellPhone(string _cellPhone, string _stamp, byte? _usageType, int? timeout = null)
{
var cmd = base.CreateCommand("org.spSetSecurityStampByCellPhone", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACellPhone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellPhone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellPhone) }, 
					new Parameter { Name = "@AStamp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_stamp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_stamp) }, 
					new Parameter { Name = "@AUsageType", IsOutput = false, Value = _usageType == null ? DBNull.Value : (object)_usageType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetSecurityStampByCellPhoneAsync(string _cellPhone, string _stamp, byte? _usageType, int? timeout = null)
{
	using(var cmd = GetCommand_SetSecurityStampByCellPhone(_cellPhone, _stamp, _usageType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetSecurityStampByCellPhoneDapperAsync<T>(string _cellPhone, string _stamp, byte? _usageType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spSetSecurityStampByCellPhone",new {ACellPhone=string.IsNullOrWhiteSpace(_cellPhone) ? _cellPhone : ReplaceArabicWithPersianChars(_cellPhone),AStamp=string.IsNullOrWhiteSpace(_stamp) ? _stamp : ReplaceArabicWithPersianChars(_stamp),AUsageType=_usageType} , timeout );
}

public ResultSet SetSecurityStampByCellPhone(string _cellPhone, string _stamp, byte? _usageType, int? timeout = null)
{
	using(var cmd = GetCommand_SetSecurityStampByCellPhone(_cellPhone, _stamp, _usageType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeletePushWebServiceUserPermission

public System.Data.SqlClient.SqlCommand GetCommand_DeletePushWebServiceUserPermission(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeletePushWebServiceUserPermission", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeletePushWebServiceUserPermissionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeletePushWebServiceUserPermission(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeletePushWebServiceUserPermissionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeletePushWebServiceUserPermission",new {AID=_id} , timeout );
}

public ResultSet DeletePushWebServiceUserPermission(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeletePushWebServiceUserPermission(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetSecurityStampByEmail

public System.Data.SqlClient.SqlCommand GetCommand_SetSecurityStampByEmail(string _email, string _stamp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spSetSecurityStampByEmail", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AEmail", IsOutput = false, Value = string.IsNullOrWhiteSpace(_email) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_email) }, 
					new Parameter { Name = "@AStamp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_stamp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_stamp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetSecurityStampByEmailAsync(string _email, string _stamp, int? timeout = null)
{
	using(var cmd = GetCommand_SetSecurityStampByEmail(_email, _stamp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetSecurityStampByEmailDapperAsync<T>(string _email, string _stamp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spSetSecurityStampByEmail",new {AEmail=string.IsNullOrWhiteSpace(_email) ? _email : ReplaceArabicWithPersianChars(_email),AStamp=string.IsNullOrWhiteSpace(_stamp) ? _stamp : ReplaceArabicWithPersianChars(_stamp)} , timeout );
}

public ResultSet SetSecurityStampByEmail(string _email, string _stamp, int? timeout = null)
{
	using(var cmd = GetCommand_SetSecurityStampByEmail(_email, _stamp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteMasterApplication

public System.Data.SqlClient.SqlCommand GetCommand_DeleteMasterApplication(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteMasterApplication", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ARemoverUserID", IsOutput = false, Value = _removerUserID == null ? DBNull.Value : (object)_removerUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteMasterApplicationAsync(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteMasterApplication(_id, _removerUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteMasterApplicationDapperAsync<T>(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteMasterApplication",new {AID=_id,ARemoverUserID=_removerUserID} , timeout );
}

public ResultSet DeleteMasterApplication(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteMasterApplication(_id, _removerUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionSubTypes

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionSubTypes(string _name, Guid? _applicationID, Guid? _departmentID, byte? _type, string _types, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionSubTypes", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ATypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_types) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_types) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionSubTypesAsync(string _name, Guid? _applicationID, Guid? _departmentID, byte? _type, string _types, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionSubTypes(_name, _applicationID, _departmentID, _type, _types, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionSubTypesDapperAsync<T>(string _name, Guid? _applicationID, Guid? _departmentID, byte? _type, string _types, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionSubTypes",new {AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AApplicationID=_applicationID,ADepartmentID=_departmentID,AType=_type,ATypes=string.IsNullOrWhiteSpace(_types) ? _types : ReplaceArabicWithPersianChars(_types),AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetPositionSubTypes(string _name, Guid? _applicationID, Guid? _departmentID, byte? _type, string _types, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionSubTypes(_name, _applicationID, _departmentID, _type, _types, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPushWebServiceUserPermission

public System.Data.SqlClient.SqlCommand GetCommand_GetPushWebServiceUserPermission(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPushWebServiceUserPermission", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPushWebServiceUserPermissionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPushWebServiceUserPermission(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPushWebServiceUserPermissionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPushWebServiceUserPermission",new {AID=_id} , timeout );
}

public ResultSet GetPushWebServiceUserPermission(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPushWebServiceUserPermission(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetSecurityStampUsedCount

public System.Data.SqlClient.SqlCommand GetCommand_SetSecurityStampUsedCount(string _stamp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spSetSecurityStampUsedCount", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AStamp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_stamp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_stamp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetSecurityStampUsedCountAsync(string _stamp, int? timeout = null)
{
	using(var cmd = GetCommand_SetSecurityStampUsedCount(_stamp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetSecurityStampUsedCountDapperAsync<T>(string _stamp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spSetSecurityStampUsedCount",new {AStamp=string.IsNullOrWhiteSpace(_stamp) ? _stamp : ReplaceArabicWithPersianChars(_stamp)} , timeout );
}

public ResultSet SetSecurityStampUsedCount(string _stamp, int? timeout = null)
{
	using(var cmd = GetCommand_SetSecurityStampUsedCount(_stamp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetClient

public System.Data.SqlClient.SqlCommand GetCommand_GetClient(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetClient", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetClientAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetClient(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetClientDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetClient",new {AID=_id} , timeout );
}

public ResultSet GetClient(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetClient(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region TRefreshTokensByUserID

public System.Data.SqlClient.SqlCommand GetCommand_TRefreshTokensByUserID(Guid? _userID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.GetRefreshTokensByUserID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> TRefreshTokensByUserIDAsync(Guid? _userID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_TRefreshTokensByUserID(_userID, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> TRefreshTokensByUserIDDapperAsync<T>(Guid? _userID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.GetRefreshTokensByUserID",new {AUserID=_userID,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet TRefreshTokensByUserID(Guid? _userID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_TRefreshTokensByUserID(_userID, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPushWebServiceUserPermissions

public System.Data.SqlClient.SqlCommand GetCommand_GetPushWebServiceUserPermissions(Guid? _pushWebServiceUserID, Guid? _departmentID, Guid? _applicationID, byte? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPushWebServiceUserPermissions", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APushWebServiceUserID", IsOutput = false, Value = _pushWebServiceUserID == null ? DBNull.Value : (object)_pushWebServiceUserID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPushWebServiceUserPermissionsAsync(Guid? _pushWebServiceUserID, Guid? _departmentID, Guid? _applicationID, byte? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetPushWebServiceUserPermissions(_pushWebServiceUserID, _departmentID, _applicationID, _type, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPushWebServiceUserPermissionsDapperAsync<T>(Guid? _pushWebServiceUserID, Guid? _departmentID, Guid? _applicationID, byte? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPushWebServiceUserPermissions",new {APushWebServiceUserID=_pushWebServiceUserID,ADepartmentID=_departmentID,AApplicationID=_applicationID,AType=_type,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetPushWebServiceUserPermissions(Guid? _pushWebServiceUserID, Guid? _departmentID, Guid? _applicationID, byte? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetPushWebServiceUserPermissions(_pushWebServiceUserID, _departmentID, _applicationID, _type, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteUser

public System.Data.SqlClient.SqlCommand GetCommand_DeleteUser(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteUserAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteUser(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteUserDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteUser",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteUser(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteUser(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyPushWebServiceUserPermission

public System.Data.SqlClient.SqlCommand GetCommand_ModifyPushWebServiceUserPermission(bool? _isNewRecord, Guid? _id, Guid? _pushWebServiceUserID, byte? _type, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyPushWebServiceUserPermission", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@APushWebServiceUserID", IsOutput = false, Value = _pushWebServiceUserID == null ? DBNull.Value : (object)_pushWebServiceUserID }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyPushWebServiceUserPermissionAsync(bool? _isNewRecord, Guid? _id, Guid? _pushWebServiceUserID, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPushWebServiceUserPermission(_isNewRecord, _id, _pushWebServiceUserID, _type, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyPushWebServiceUserPermissionDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _pushWebServiceUserID, byte? _type, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyPushWebServiceUserPermission",new {AIsNewRecord=_isNewRecord,AID=_id,APushWebServiceUserID=_pushWebServiceUserID,AType=_type} , timeout );
}

public ResultSet ModifyPushWebServiceUserPermission(bool? _isNewRecord, Guid? _id, Guid? _pushWebServiceUserID, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyPushWebServiceUserPermission(_isNewRecord, _id, _pushWebServiceUserID, _type, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetMasterApplication

public System.Data.SqlClient.SqlCommand GetCommand_GetMasterApplication(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetMasterApplication", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetMasterApplicationAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetMasterApplication(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetMasterApplicationDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetMasterApplication",new {AID=_id} , timeout );
}

public ResultSet GetMasterApplication(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetMasterApplication(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPositionPermissions

public System.Data.SqlClient.SqlCommand GetCommand_GetPositionPermissions(Guid? _positionID, Guid? _commandID, Guid? _applicationID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPositionPermissions", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@ACommandID", IsOutput = false, Value = _commandID == null ? DBNull.Value : (object)_commandID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPositionPermissionsAsync(Guid? _positionID, Guid? _commandID, Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionPermissions(_positionID, _commandID, _applicationID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPositionPermissionsDapperAsync<T>(Guid? _positionID, Guid? _commandID, Guid? _applicationID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPositionPermissions",new {APositionID=_positionID,ACommandID=_commandID,AApplicationID=_applicationID} , timeout );
}

public ResultSet GetPositionPermissions(Guid? _positionID, Guid? _commandID, Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_GetPositionPermissions(_positionID, _commandID, _applicationID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetModifyUserValidation

public System.Data.SqlClient.SqlCommand GetCommand_GetModifyUserValidation(Guid? _id, string _nationalCode, string _username, string _cellPhone, string _email, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetModifyUserValidation", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AUsername", IsOutput = false, Value = string.IsNullOrWhiteSpace(_username) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_username) }, 
					new Parameter { Name = "@ACellPhone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellPhone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellPhone) }, 
					new Parameter { Name = "@AEmail", IsOutput = false, Value = string.IsNullOrWhiteSpace(_email) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_email) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetModifyUserValidationAsync(Guid? _id, string _nationalCode, string _username, string _cellPhone, string _email, int? timeout = null)
{
	using(var cmd = GetCommand_GetModifyUserValidation(_id, _nationalCode, _username, _cellPhone, _email, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetModifyUserValidationDapperAsync<T>(Guid? _id, string _nationalCode, string _username, string _cellPhone, string _email, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetModifyUserValidation",new {AID=_id,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AUsername=string.IsNullOrWhiteSpace(_username) ? _username : ReplaceArabicWithPersianChars(_username),ACellPhone=string.IsNullOrWhiteSpace(_cellPhone) ? _cellPhone : ReplaceArabicWithPersianChars(_cellPhone),AEmail=string.IsNullOrWhiteSpace(_email) ? _email : ReplaceArabicWithPersianChars(_email)} , timeout );
}

public ResultSet GetModifyUserValidation(Guid? _id, string _nationalCode, string _username, string _cellPhone, string _email, int? timeout = null)
{
	using(var cmd = GetCommand_GetModifyUserValidation(_id, _nationalCode, _username, _cellPhone, _email, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPushWebServiceUser

public System.Data.SqlClient.SqlCommand GetCommand_GetPushWebServiceUser(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPushWebServiceUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPushWebServiceUserAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPushWebServiceUser(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPushWebServiceUserDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPushWebServiceUser",new {AID=_id} , timeout );
}

public ResultSet GetPushWebServiceUser(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetPushWebServiceUser(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetMasterApplications

public System.Data.SqlClient.SqlCommand GetCommand_GetMasterApplications(Guid? _masterPasswordID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetMasterApplications", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AMasterPasswordID", IsOutput = false, Value = _masterPasswordID == null ? DBNull.Value : (object)_masterPasswordID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetMasterApplicationsAsync(Guid? _masterPasswordID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetMasterApplications(_masterPasswordID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetMasterApplicationsDapperAsync<T>(Guid? _masterPasswordID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetMasterApplications",new {AMasterPasswordID=_masterPasswordID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetMasterApplications(Guid? _masterPasswordID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetMasterApplications(_masterPasswordID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserByUserNameOrEmail

public System.Data.SqlClient.SqlCommand GetCommand_GetUserByUserNameOrEmail(string _username, string _email, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserByUserNameOrEmail", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUsername", IsOutput = false, Value = string.IsNullOrWhiteSpace(_username) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_username) }, 
					new Parameter { Name = "@AEmail", IsOutput = false, Value = string.IsNullOrWhiteSpace(_email) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_email) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserByUserNameOrEmailAsync(string _username, string _email, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByUserNameOrEmail(_username, _email, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserByUserNameOrEmailDapperAsync<T>(string _username, string _email, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserByUserNameOrEmail",new {AUsername=string.IsNullOrWhiteSpace(_username) ? _username : ReplaceArabicWithPersianChars(_username),AEmail=string.IsNullOrWhiteSpace(_email) ? _email : ReplaceArabicWithPersianChars(_email),AApplicationID=_applicationID,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet GetUserByUserNameOrEmail(string _username, string _email, Guid? _applicationID, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserByUserNameOrEmail(_username, _email, _applicationID, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region TRefreshTokens

public System.Data.SqlClient.SqlCommand GetCommand_TRefreshTokens(bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.GetRefreshTokens", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> TRefreshTokensAsync(bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_TRefreshTokens(_getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> TRefreshTokensDapperAsync<T>(bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.GetRefreshTokens",new {AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet TRefreshTokens(bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_TRefreshTokens(_getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetClients

public System.Data.SqlClient.SqlCommand GetCommand_GetClients(Guid? _applicationID, string _name, string _abbreviation, byte? _enabled, byte? _typeClient, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetClients", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AAbbreviation", IsOutput = false, Value = string.IsNullOrWhiteSpace(_abbreviation) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_abbreviation) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@ATypeClient", IsOutput = false, Value = _typeClient == null ? DBNull.Value : (object)_typeClient }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetClientsAsync(Guid? _applicationID, string _name, string _abbreviation, byte? _enabled, byte? _typeClient, int? timeout = null)
{
	using(var cmd = GetCommand_GetClients(_applicationID, _name, _abbreviation, _enabled, _typeClient, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetClientsDapperAsync<T>(Guid? _applicationID, string _name, string _abbreviation, byte? _enabled, byte? _typeClient, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetClients",new {AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AAbbreviation=string.IsNullOrWhiteSpace(_abbreviation) ? _abbreviation : ReplaceArabicWithPersianChars(_abbreviation),AEnabled=_enabled,ATypeClient=_typeClient} , timeout );
}

public ResultSet GetClients(Guid? _applicationID, string _name, string _abbreviation, byte? _enabled, byte? _typeClient, int? timeout = null)
{
	using(var cmd = GetCommand_GetClients(_applicationID, _name, _abbreviation, _enabled, _typeClient, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyMasterApplication

public System.Data.SqlClient.SqlCommand GetCommand_ModifyMasterApplication(bool? _isNewRecord, Guid? _masterPasswordID, Guid? _applicationID, Guid? _clientID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyMasterApplication", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AMasterPasswordID", IsOutput = false, Value = _masterPasswordID == null ? DBNull.Value : (object)_masterPasswordID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AClientID", IsOutput = false, Value = _clientID == null ? DBNull.Value : (object)_clientID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyMasterApplicationAsync(bool? _isNewRecord, Guid? _masterPasswordID, Guid? _applicationID, Guid? _clientID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyMasterApplication(_isNewRecord, _masterPasswordID, _applicationID, _clientID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyMasterApplicationDapperAsync<T>(bool? _isNewRecord, Guid? _masterPasswordID, Guid? _applicationID, Guid? _clientID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyMasterApplication",new {AIsNewRecord=_isNewRecord,AMasterPasswordID=_masterPasswordID,AApplicationID=_applicationID,AClientID=_clientID} , timeout );
}

public ResultSet ModifyMasterApplication(bool? _isNewRecord, Guid? _masterPasswordID, Guid? _applicationID, Guid? _clientID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyMasterApplication(_isNewRecord, _masterPasswordID, _applicationID, _clientID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteAction

public System.Data.SqlClient.SqlCommand GetCommand_DeleteAction(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteAction", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteActionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteAction(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteActionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteAction",new {AID=_id} , timeout );
}

public ResultSet DeleteAction(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteAction(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationsByAssignment

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationsByAssignment(Guid? _userOrganID, Guid? _positionID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetApplicationsByAssignment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserOrganID", IsOutput = false, Value = _userOrganID == null ? DBNull.Value : (object)_userOrganID }, 
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationsByAssignmentAsync(Guid? _userOrganID, Guid? _positionID, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationsByAssignment(_userOrganID, _positionID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationsByAssignmentDapperAsync<T>(Guid? _userOrganID, Guid? _positionID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetApplicationsByAssignment",new {AUserOrganID=_userOrganID,APositionID=_positionID} , timeout );
}

public ResultSet GetApplicationsByAssignment(Guid? _userOrganID, Guid? _positionID, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationsByAssignment(_userOrganID, _positionID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeletePushWebServiceUser

public System.Data.SqlClient.SqlCommand GetCommand_DeletePushWebServiceUser(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeletePushWebServiceUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeletePushWebServiceUserAsync(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeletePushWebServiceUser(_id, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeletePushWebServiceUserDapperAsync<T>(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeletePushWebServiceUser",new {AID=_id,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet DeletePushWebServiceUser(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeletePushWebServiceUser(_id, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAction

public System.Data.SqlClient.SqlCommand GetCommand_GetAction(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetAction", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetActionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetAction(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetActionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetAction",new {AID=_id} , timeout );
}

public ResultSet GetAction(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetAction(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteTextTemplate

public System.Data.SqlClient.SqlCommand GetCommand_DeleteTextTemplate(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteTextTemplate", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteTextTemplateAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteTextTemplate(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteTextTemplateDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteTextTemplate",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteTextTemplate(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteTextTemplate(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyUserIndividualID

public System.Data.SqlClient.SqlCommand GetCommand_ModifyUserIndividualID(Guid? _id, Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyUserIndividualID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyUserIndividualIDAsync(Guid? _id, Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyUserIndividualID(_id, _individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyUserIndividualIDDapperAsync<T>(Guid? _id, Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyUserIndividualID",new {AID=_id,AIndividualID=_individualID} , timeout );
}

public ResultSet ModifyUserIndividualID(Guid? _id, Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyUserIndividualID(_id, _individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetActions

public System.Data.SqlClient.SqlCommand GetCommand_GetActions(Guid? _actionID, Guid? _userID, Guid? _applicationID, Guid? _controllerID, byte? _controllerType, string _name, string _title, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetActions", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AActionID", IsOutput = false, Value = _actionID == null ? DBNull.Value : (object)_actionID }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AControllerID", IsOutput = false, Value = _controllerID == null ? DBNull.Value : (object)_controllerID }, 
					new Parameter { Name = "@AControllerType", IsOutput = false, Value = _controllerType == null ? DBNull.Value : (object)_controllerType }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetActionsAsync(Guid? _actionID, Guid? _userID, Guid? _applicationID, Guid? _controllerID, byte? _controllerType, string _name, string _title, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetActions(_actionID, _userID, _applicationID, _controllerID, _controllerType, _name, _title, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetActionsDapperAsync<T>(Guid? _actionID, Guid? _userID, Guid? _applicationID, Guid? _controllerID, byte? _controllerType, string _name, string _title, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetActions",new {AActionID=_actionID,AUserID=_userID,AApplicationID=_applicationID,AControllerID=_controllerID,AControllerType=_controllerType,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetActions(Guid? _actionID, Guid? _userID, Guid? _applicationID, Guid? _controllerID, byte? _controllerType, string _name, string _title, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetActions(_actionID, _userID, _applicationID, _controllerID, _controllerType, _name, _title, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetUserPassword

public System.Data.SqlClient.SqlCommand GetCommand_SetUserPassword(Guid? _id, string _password, DateTime? _passwordExpireDate, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spSetUserPassword", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@APassword", IsOutput = false, Value = string.IsNullOrWhiteSpace(_password) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_password) }, 
					new Parameter { Name = "@APasswordExpireDate", IsOutput = false, Value = _passwordExpireDate == null ? DBNull.Value : (object)_passwordExpireDate }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetUserPasswordAsync(Guid? _id, string _password, DateTime? _passwordExpireDate, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_SetUserPassword(_id, _password, _passwordExpireDate, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetUserPasswordDapperAsync<T>(Guid? _id, string _password, DateTime? _passwordExpireDate, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spSetUserPassword",new {AID=_id,APassword=string.IsNullOrWhiteSpace(_password) ? _password : ReplaceArabicWithPersianChars(_password),APasswordExpireDate=_passwordExpireDate,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet SetUserPassword(Guid? _id, string _password, DateTime? _passwordExpireDate, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_SetUserPassword(_id, _password, _passwordExpireDate, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetActionsByControllerID

public System.Data.SqlClient.SqlCommand GetCommand_GetActionsByControllerID(Guid? _controllerID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetActionsByControllerID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AControllerID", IsOutput = false, Value = _controllerID == null ? DBNull.Value : (object)_controllerID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetActionsByControllerIDAsync(Guid? _controllerID, int? timeout = null)
{
	using(var cmd = GetCommand_GetActionsByControllerID(_controllerID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetActionsByControllerIDDapperAsync<T>(Guid? _controllerID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetActionsByControllerID",new {AControllerID=_controllerID} , timeout );
}

public ResultSet GetActionsByControllerID(Guid? _controllerID, int? timeout = null)
{
	using(var cmd = GetCommand_GetActionsByControllerID(_controllerID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region VerifyUserCellPhone

public System.Data.SqlClient.SqlCommand GetCommand_VerifyUserCellPhone(Guid? _userID, bool? _isVerified, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spVerifyUserCellPhone", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AIsVerified", IsOutput = false, Value = _isVerified == null ? DBNull.Value : (object)_isVerified }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> VerifyUserCellPhoneAsync(Guid? _userID, bool? _isVerified, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_VerifyUserCellPhone(_userID, _isVerified, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> VerifyUserCellPhoneDapperAsync<T>(Guid? _userID, bool? _isVerified, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spVerifyUserCellPhone",new {AUserID=_userID,AIsVerified=_isVerified,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet VerifyUserCellPhone(Guid? _userID, bool? _isVerified, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_VerifyUserCellPhone(_userID, _isVerified, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyAction

public System.Data.SqlClient.SqlCommand GetCommand_ModifyAction(bool? _isNewRecord, Guid? _id, Guid? _controllerID, string _name, string _title, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyAction", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AControllerID", IsOutput = false, Value = _controllerID == null ? DBNull.Value : (object)_controllerID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyActionAsync(bool? _isNewRecord, Guid? _id, Guid? _controllerID, string _name, string _title, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyAction(_isNewRecord, _id, _controllerID, _name, _title, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyActionDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _controllerID, string _name, string _title, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyAction",new {AIsNewRecord=_isNewRecord,AID=_id,AControllerID=_controllerID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title)} , timeout );
}

public ResultSet ModifyAction(bool? _isNewRecord, Guid? _id, Guid? _controllerID, string _name, string _title, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyAction(_isNewRecord, _id, _controllerID, _name, _title, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetCommand

public System.Data.SqlClient.SqlCommand GetCommand_GetCommand(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetCommand", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetCommandAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetCommand(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetCommandDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetCommand",new {AID=_id} , timeout );
}

public ResultSet GetCommand(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetCommand(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationAssignmentsForCartable

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationAssignmentsForCartable(string _firstName, string _lastName, string _nationalCode, string _applicationName, string _abbreviation, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetApplicationAssignmentsForCartable", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AFirstName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_firstName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_firstName) }, 
					new Parameter { Name = "@ALastName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastName) }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AApplicationName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_applicationName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_applicationName) }, 
					new Parameter { Name = "@AAbbreviation", IsOutput = false, Value = string.IsNullOrWhiteSpace(_abbreviation) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_abbreviation) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationAssignmentsForCartableAsync(string _firstName, string _lastName, string _nationalCode, string _applicationName, string _abbreviation, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationAssignmentsForCartable(_firstName, _lastName, _nationalCode, _applicationName, _abbreviation, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationAssignmentsForCartableDapperAsync<T>(string _firstName, string _lastName, string _nationalCode, string _applicationName, string _abbreviation, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetApplicationAssignmentsForCartable",new {AFirstName=string.IsNullOrWhiteSpace(_firstName) ? _firstName : ReplaceArabicWithPersianChars(_firstName),ALastName=string.IsNullOrWhiteSpace(_lastName) ? _lastName : ReplaceArabicWithPersianChars(_lastName),ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AApplicationName=string.IsNullOrWhiteSpace(_applicationName) ? _applicationName : ReplaceArabicWithPersianChars(_applicationName),AAbbreviation=string.IsNullOrWhiteSpace(_abbreviation) ? _abbreviation : ReplaceArabicWithPersianChars(_abbreviation),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetApplicationAssignmentsForCartable(string _firstName, string _lastName, string _nationalCode, string _applicationName, string _abbreviation, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationAssignmentsForCartable(_firstName, _lastName, _nationalCode, _applicationName, _abbreviation, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region VerifyUserEmail

public System.Data.SqlClient.SqlCommand GetCommand_VerifyUserEmail(Guid? _userID, bool? _isVerified, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spVerifyUserEmail", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AIsVerified", IsOutput = false, Value = _isVerified == null ? DBNull.Value : (object)_isVerified }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> VerifyUserEmailAsync(Guid? _userID, bool? _isVerified, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_VerifyUserEmail(_userID, _isVerified, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> VerifyUserEmailDapperAsync<T>(Guid? _userID, bool? _isVerified, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spVerifyUserEmail",new {AUserID=_userID,AIsVerified=_isVerified,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet VerifyUserEmail(Guid? _userID, bool? _isVerified, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_VerifyUserEmail(_userID, _isVerified, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUserGridSetting

public System.Data.SqlClient.SqlCommand GetCommand_GetUserGridSetting(Guid? _id, Guid? _userID, string _path, string _ancillaryPath, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUserGridSetting", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@APath", IsOutput = false, Value = string.IsNullOrWhiteSpace(_path) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_path) }, 
					new Parameter { Name = "@AAncillaryPath", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ancillaryPath) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ancillaryPath) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUserGridSettingAsync(Guid? _id, Guid? _userID, string _path, string _ancillaryPath, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserGridSetting(_id, _userID, _path, _ancillaryPath, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUserGridSettingDapperAsync<T>(Guid? _id, Guid? _userID, string _path, string _ancillaryPath, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUserGridSetting",new {AID=_id,AUserID=_userID,APath=string.IsNullOrWhiteSpace(_path) ? _path : ReplaceArabicWithPersianChars(_path),AAncillaryPath=string.IsNullOrWhiteSpace(_ancillaryPath) ? _ancillaryPath : ReplaceArabicWithPersianChars(_ancillaryPath)} , timeout );
}

public ResultSet GetUserGridSetting(Guid? _id, Guid? _userID, string _path, string _ancillaryPath, int? timeout = null)
{
	using(var cmd = GetCommand_GetUserGridSetting(_id, _userID, _path, _ancillaryPath, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyRefreshTokenWithUserPlatform

public System.Data.SqlClient.SqlCommand GetCommand_ModifyRefreshTokenWithUserPlatform(bool? _isNewRecord, Guid? _id, Guid? _userID, DateTime? _issuedDate, DateTime? _expireDate, string _protectedTicket, string _ssoTicket, short? _os, string _oSVersion, short? _browser, string _browserVersion, short? _deviceType, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyRefreshTokenWithUserPlatform", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AIssuedDate", IsOutput = false, Value = _issuedDate == null ? DBNull.Value : (object)_issuedDate }, 
					new Parameter { Name = "@AExpireDate", IsOutput = false, Value = _expireDate == null ? DBNull.Value : (object)_expireDate }, 
					new Parameter { Name = "@AProtectedTicket", IsOutput = false, Value = string.IsNullOrWhiteSpace(_protectedTicket) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_protectedTicket) }, 
					new Parameter { Name = "@ASsoTicket", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ssoTicket) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ssoTicket) }, 
					new Parameter { Name = "@AOS", IsOutput = false, Value = _os == null ? DBNull.Value : (object)_os }, 
					new Parameter { Name = "@AOSVersion", IsOutput = false, Value = string.IsNullOrWhiteSpace(_oSVersion) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_oSVersion) }, 
					new Parameter { Name = "@ABrowser", IsOutput = false, Value = _browser == null ? DBNull.Value : (object)_browser }, 
					new Parameter { Name = "@ABrowserVersion", IsOutput = false, Value = string.IsNullOrWhiteSpace(_browserVersion) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_browserVersion) }, 
					new Parameter { Name = "@ADeviceType", IsOutput = false, Value = _deviceType == null ? DBNull.Value : (object)_deviceType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyRefreshTokenWithUserPlatformAsync(bool? _isNewRecord, Guid? _id, Guid? _userID, DateTime? _issuedDate, DateTime? _expireDate, string _protectedTicket, string _ssoTicket, short? _os, string _oSVersion, short? _browser, string _browserVersion, short? _deviceType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyRefreshTokenWithUserPlatform(_isNewRecord, _id, _userID, _issuedDate, _expireDate, _protectedTicket, _ssoTicket, _os, _oSVersion, _browser, _browserVersion, _deviceType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyRefreshTokenWithUserPlatformDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _userID, DateTime? _issuedDate, DateTime? _expireDate, string _protectedTicket, string _ssoTicket, short? _os, string _oSVersion, short? _browser, string _browserVersion, short? _deviceType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyRefreshTokenWithUserPlatform",new {AIsNewRecord=_isNewRecord,AID=_id,AUserID=_userID,AIssuedDate=_issuedDate,AExpireDate=_expireDate,AProtectedTicket=string.IsNullOrWhiteSpace(_protectedTicket) ? _protectedTicket : ReplaceArabicWithPersianChars(_protectedTicket),ASsoTicket=string.IsNullOrWhiteSpace(_ssoTicket) ? _ssoTicket : ReplaceArabicWithPersianChars(_ssoTicket),AOS=_os,AOSVersion=string.IsNullOrWhiteSpace(_oSVersion) ? _oSVersion : ReplaceArabicWithPersianChars(_oSVersion),ABrowser=_browser,ABrowserVersion=string.IsNullOrWhiteSpace(_browserVersion) ? _browserVersion : ReplaceArabicWithPersianChars(_browserVersion),ADeviceType=_deviceType} , timeout );
}

public ResultSet ModifyRefreshTokenWithUserPlatform(bool? _isNewRecord, Guid? _id, Guid? _userID, DateTime? _issuedDate, DateTime? _expireDate, string _protectedTicket, string _ssoTicket, short? _os, string _oSVersion, short? _browser, string _browserVersion, short? _deviceType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyRefreshTokenWithUserPlatform(_isNewRecord, _id, _userID, _issuedDate, _expireDate, _protectedTicket, _ssoTicket, _os, _oSVersion, _browser, _browserVersion, _deviceType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPushWebServiceUsers

public System.Data.SqlClient.SqlCommand GetCommand_GetPushWebServiceUsers(Guid? _applicationID, Guid? _departmentID, bool? _enable, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetPushWebServiceUsers", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AEnable", IsOutput = false, Value = _enable == null ? DBNull.Value : (object)_enable }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPushWebServiceUsersAsync(Guid? _applicationID, Guid? _departmentID, bool? _enable, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetPushWebServiceUsers(_applicationID, _departmentID, _enable, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPushWebServiceUsersDapperAsync<T>(Guid? _applicationID, Guid? _departmentID, bool? _enable, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetPushWebServiceUsers",new {AApplicationID=_applicationID,ADepartmentID=_departmentID,AEnable=_enable,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetPushWebServiceUsers(Guid? _applicationID, Guid? _departmentID, bool? _enable, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetPushWebServiceUsers(_applicationID, _departmentID, _enable, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyIssuedToken

public System.Data.SqlClient.SqlCommand GetCommand_ModifyIssuedToken(bool? _isNewRecord, Guid? _id, Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyIssuedToken", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ARefreshTokenID", IsOutput = false, Value = _refreshTokenID == null ? DBNull.Value : (object)_refreshTokenID }, 
					new Parameter { Name = "@AClientID", IsOutput = false, Value = _clientID == null ? DBNull.Value : (object)_clientID }, 
					new Parameter { Name = "@AIssuedDate", IsOutput = false, Value = _issuedDate == null ? DBNull.Value : (object)_issuedDate }, 
					new Parameter { Name = "@AExpireDate", IsOutput = false, Value = _expireDate == null ? DBNull.Value : (object)_expireDate }, 
					new Parameter { Name = "@AToken", IsOutput = false, Value = string.IsNullOrWhiteSpace(_token) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_token) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyIssuedTokenAsync(bool? _isNewRecord, Guid? _id, Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyIssuedToken(_isNewRecord, _id, _userID, _refreshTokenID, _clientID, _issuedDate, _expireDate, _token, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyIssuedTokenDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyIssuedToken",new {AIsNewRecord=_isNewRecord,AID=_id,AUserID=_userID,ARefreshTokenID=_refreshTokenID,AClientID=_clientID,AIssuedDate=_issuedDate,AExpireDate=_expireDate,AToken=string.IsNullOrWhiteSpace(_token) ? _token : ReplaceArabicWithPersianChars(_token)} , timeout );
}

public ResultSet ModifyIssuedToken(bool? _isNewRecord, Guid? _id, Guid? _userID, Guid? _refreshTokenID, Guid? _clientID, DateTime? _issuedDate, DateTime? _expireDate, string _token, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyIssuedToken(_isNewRecord, _id, _userID, _refreshTokenID, _clientID, _issuedDate, _expireDate, _token, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyUserGridSetting

public System.Data.SqlClient.SqlCommand GetCommand_ModifyUserGridSetting(bool? _isNewRecord, Guid? _id, Guid? _userID, string _path, string _ancillaryPath, string _setting, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyUserGridSetting", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@APath", IsOutput = false, Value = string.IsNullOrWhiteSpace(_path) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_path) }, 
					new Parameter { Name = "@AAncillaryPath", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ancillaryPath) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ancillaryPath) }, 
					new Parameter { Name = "@ASetting", IsOutput = false, Value = string.IsNullOrWhiteSpace(_setting) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_setting) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyUserGridSettingAsync(bool? _isNewRecord, Guid? _id, Guid? _userID, string _path, string _ancillaryPath, string _setting, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyUserGridSetting(_isNewRecord, _id, _userID, _path, _ancillaryPath, _setting, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyUserGridSettingDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _userID, string _path, string _ancillaryPath, string _setting, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyUserGridSetting",new {AIsNewRecord=_isNewRecord,AID=_id,AUserID=_userID,APath=string.IsNullOrWhiteSpace(_path) ? _path : ReplaceArabicWithPersianChars(_path),AAncillaryPath=string.IsNullOrWhiteSpace(_ancillaryPath) ? _ancillaryPath : ReplaceArabicWithPersianChars(_ancillaryPath),ASetting=string.IsNullOrWhiteSpace(_setting) ? _setting : ReplaceArabicWithPersianChars(_setting)} , timeout );
}

public ResultSet ModifyUserGridSetting(bool? _isNewRecord, Guid? _id, Guid? _userID, string _path, string _ancillaryPath, string _setting, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyUserGridSetting(_isNewRecord, _id, _userID, _path, _ancillaryPath, _setting, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationsList

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationsList(Guid? _positionID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetApplicationsList", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationsListAsync(Guid? _positionID, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationsList(_positionID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationsListDapperAsync<T>(Guid? _positionID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetApplicationsList",new {APositionID=_positionID} , timeout );
}

public ResultSet GetApplicationsList(Guid? _positionID, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationsList(_positionID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUsers

public System.Data.SqlClient.SqlCommand GetCommand_GetUsers(Guid? _applicationID, string _nationalCode, string _name, string _email, string _cellphone, byte? _enablOrDisable, string _iDs, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUsers", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AEmail", IsOutput = false, Value = string.IsNullOrWhiteSpace(_email) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_email) }, 
					new Parameter { Name = "@ACellphone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellphone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellphone) }, 
					new Parameter { Name = "@AEnablOrDisable", IsOutput = false, Value = _enablOrDisable == null ? DBNull.Value : (object)_enablOrDisable }, 
					new Parameter { Name = "@AIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_iDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_iDs) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUsersAsync(Guid? _applicationID, string _nationalCode, string _name, string _email, string _cellphone, byte? _enablOrDisable, string _iDs, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetUsers(_applicationID, _nationalCode, _name, _email, _cellphone, _enablOrDisable, _iDs, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUsersDapperAsync<T>(Guid? _applicationID, string _nationalCode, string _name, string _email, string _cellphone, byte? _enablOrDisable, string _iDs, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUsers",new {AApplicationID=_applicationID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AEmail=string.IsNullOrWhiteSpace(_email) ? _email : ReplaceArabicWithPersianChars(_email),ACellphone=string.IsNullOrWhiteSpace(_cellphone) ? _cellphone : ReplaceArabicWithPersianChars(_cellphone),AEnablOrDisable=_enablOrDisable,AIDs=string.IsNullOrWhiteSpace(_iDs) ? _iDs : ReplaceArabicWithPersianChars(_iDs),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetUsers(Guid? _applicationID, string _nationalCode, string _name, string _email, string _cellphone, byte? _enablOrDisable, string _iDs, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetUsers(_applicationID, _nationalCode, _name, _email, _cellphone, _enablOrDisable, _iDs, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyUserSetting

public System.Data.SqlClient.SqlCommand GetCommand_ModifyUserSetting(Guid? _userID, string _setting, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyUserSetting", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ASetting", IsOutput = false, Value = string.IsNullOrWhiteSpace(_setting) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_setting) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyUserSettingAsync(Guid? _userID, string _setting, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyUserSetting(_userID, _setting, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyUserSettingDapperAsync<T>(Guid? _userID, string _setting, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyUserSetting",new {AUserID=_userID,ASetting=string.IsNullOrWhiteSpace(_setting) ? _setting : ReplaceArabicWithPersianChars(_setting)} , timeout );
}

public ResultSet ModifyUserSetting(Guid? _userID, string _setting, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyUserSetting(_userID, _setting, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyWebService

public System.Data.SqlClient.SqlCommand GetCommand_ModifyWebService(bool? _isNewRecord, Guid? _id, Guid? _applicationID, bool? _enable, string _body, string _gsbUrl, string _localUrl, string _comment, string _titlePer, string _titleEng, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyWebService", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AEnable", IsOutput = false, Value = _enable == null ? DBNull.Value : (object)_enable }, 
					new Parameter { Name = "@ABody", IsOutput = false, Value = string.IsNullOrWhiteSpace(_body) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_body) }, 
					new Parameter { Name = "@AGsbUrl", IsOutput = false, Value = string.IsNullOrWhiteSpace(_gsbUrl) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_gsbUrl) }, 
					new Parameter { Name = "@ALocalUrl", IsOutput = false, Value = string.IsNullOrWhiteSpace(_localUrl) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_localUrl) }, 
					new Parameter { Name = "@AComment", IsOutput = false, Value = string.IsNullOrWhiteSpace(_comment) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_comment) }, 
					new Parameter { Name = "@ATitlePer", IsOutput = false, Value = string.IsNullOrWhiteSpace(_titlePer) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_titlePer) }, 
					new Parameter { Name = "@ATitleEng", IsOutput = false, Value = string.IsNullOrWhiteSpace(_titleEng) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_titleEng) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyWebServiceAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, bool? _enable, string _body, string _gsbUrl, string _localUrl, string _comment, string _titlePer, string _titleEng, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyWebService(_isNewRecord, _id, _applicationID, _enable, _body, _gsbUrl, _localUrl, _comment, _titlePer, _titleEng, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyWebServiceDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, bool? _enable, string _body, string _gsbUrl, string _localUrl, string _comment, string _titlePer, string _titleEng, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyWebService",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,AEnable=_enable,ABody=string.IsNullOrWhiteSpace(_body) ? _body : ReplaceArabicWithPersianChars(_body),AGsbUrl=string.IsNullOrWhiteSpace(_gsbUrl) ? _gsbUrl : ReplaceArabicWithPersianChars(_gsbUrl),ALocalUrl=string.IsNullOrWhiteSpace(_localUrl) ? _localUrl : ReplaceArabicWithPersianChars(_localUrl),AComment=string.IsNullOrWhiteSpace(_comment) ? _comment : ReplaceArabicWithPersianChars(_comment),ATitlePer=string.IsNullOrWhiteSpace(_titlePer) ? _titlePer : ReplaceArabicWithPersianChars(_titlePer),ATitleEng=string.IsNullOrWhiteSpace(_titleEng) ? _titleEng : ReplaceArabicWithPersianChars(_titleEng)} , timeout );
}

public ResultSet ModifyWebService(bool? _isNewRecord, Guid? _id, Guid? _applicationID, bool? _enable, string _body, string _gsbUrl, string _localUrl, string _comment, string _titlePer, string _titleEng, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyWebService(_isNewRecord, _id, _applicationID, _enable, _body, _gsbUrl, _localUrl, _comment, _titlePer, _titleEng, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetController

public System.Data.SqlClient.SqlCommand GetCommand_GetController(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetController", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetControllerAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetController(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetControllerDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetController",new {AID=_id} , timeout );
}

public ResultSet GetController(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetController(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetRefreshTokenListByUserID

public System.Data.SqlClient.SqlCommand GetCommand_GetRefreshTokenListByUserID(Guid? _userID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetRefreshTokenListByUserID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetRefreshTokenListByUserIDAsync(Guid? _userID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetRefreshTokenListByUserID(_userID, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetRefreshTokenListByUserIDDapperAsync<T>(Guid? _userID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetRefreshTokenListByUserID",new {AUserID=_userID,AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetRefreshTokenListByUserID(Guid? _userID, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetRefreshTokenListByUserID(_userID, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetWebService

public System.Data.SqlClient.SqlCommand GetCommand_GetWebService(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetWebService", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetWebServiceAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebService(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetWebServiceDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetWebService",new {AID=_id} , timeout );
}

public ResultSet GetWebService(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetWebService(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetControllers

public System.Data.SqlClient.SqlCommand GetCommand_GetControllers(Guid? _applicationID, string _name, string _title, byte? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetControllers", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetControllersAsync(Guid? _applicationID, string _name, string _title, byte? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetControllers(_applicationID, _name, _title, _type, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetControllersDapperAsync<T>(Guid? _applicationID, string _name, string _title, byte? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetControllers",new {AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AType=_type,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetControllers(Guid? _applicationID, string _name, string _title, byte? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetControllers(_applicationID, _name, _title, _type, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyWebServiceUser

public System.Data.SqlClient.SqlCommand GetCommand_ModifyWebServiceUser(bool? _isNewRecord, Guid? _id, string _userName, string _password, Guid? _organID, bool? _enabled, DateTime? _passwordExpireDate, string _comment, Guid? _creatorUserID, byte? _webServiceType, Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyWebServiceUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userName) }, 
					new Parameter { Name = "@APassword", IsOutput = false, Value = string.IsNullOrWhiteSpace(_password) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_password) }, 
					new Parameter { Name = "@AOrganID", IsOutput = false, Value = _organID == null ? DBNull.Value : (object)_organID }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@APasswordExpireDate", IsOutput = false, Value = _passwordExpireDate == null ? DBNull.Value : (object)_passwordExpireDate }, 
					new Parameter { Name = "@AComment", IsOutput = false, Value = string.IsNullOrWhiteSpace(_comment) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_comment) }, 
					new Parameter { Name = "@ACreatorUserID", IsOutput = false, Value = _creatorUserID == null ? DBNull.Value : (object)_creatorUserID }, 
					new Parameter { Name = "@AWebServiceType", IsOutput = false, Value = _webServiceType == null ? DBNull.Value : (object)_webServiceType }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyWebServiceUserAsync(bool? _isNewRecord, Guid? _id, string _userName, string _password, Guid? _organID, bool? _enabled, DateTime? _passwordExpireDate, string _comment, Guid? _creatorUserID, byte? _webServiceType, Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyWebServiceUser(_isNewRecord, _id, _userName, _password, _organID, _enabled, _passwordExpireDate, _comment, _creatorUserID, _webServiceType, _individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyWebServiceUserDapperAsync<T>(bool? _isNewRecord, Guid? _id, string _userName, string _password, Guid? _organID, bool? _enabled, DateTime? _passwordExpireDate, string _comment, Guid? _creatorUserID, byte? _webServiceType, Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyWebServiceUser",new {AIsNewRecord=_isNewRecord,AID=_id,AUserName=string.IsNullOrWhiteSpace(_userName) ? _userName : ReplaceArabicWithPersianChars(_userName),APassword=string.IsNullOrWhiteSpace(_password) ? _password : ReplaceArabicWithPersianChars(_password),AOrganID=_organID,AEnabled=_enabled,APasswordExpireDate=_passwordExpireDate,AComment=string.IsNullOrWhiteSpace(_comment) ? _comment : ReplaceArabicWithPersianChars(_comment),ACreatorUserID=_creatorUserID,AWebServiceType=_webServiceType,AIndividualID=_individualID} , timeout );
}

public ResultSet ModifyWebServiceUser(bool? _isNewRecord, Guid? _id, string _userName, string _password, Guid? _organID, bool? _enabled, DateTime? _passwordExpireDate, string _comment, Guid? _creatorUserID, byte? _webServiceType, Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyWebServiceUser(_isNewRecord, _id, _userName, _password, _organID, _enabled, _passwordExpireDate, _comment, _creatorUserID, _webServiceType, _individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetPositionTypeRoles

public System.Data.SqlClient.SqlCommand GetCommand_SetPositionTypeRoles(Guid? _applicationID, byte? _positionType, string _roleIDs, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spSetPositionTypeRoles", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@APositionType", IsOutput = false, Value = _positionType == null ? DBNull.Value : (object)_positionType }, 
					new Parameter { Name = "@ARoleIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_roleIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_roleIDs) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetPositionTypeRolesAsync(Guid? _applicationID, byte? _positionType, string _roleIDs, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_SetPositionTypeRoles(_applicationID, _positionType, _roleIDs, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetPositionTypeRolesDapperAsync<T>(Guid? _applicationID, byte? _positionType, string _roleIDs, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spSetPositionTypeRoles",new {AApplicationID=_applicationID,APositionType=_positionType,ARoleIDs=string.IsNullOrWhiteSpace(_roleIDs) ? _roleIDs : ReplaceArabicWithPersianChars(_roleIDs),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet SetPositionTypeRoles(Guid? _applicationID, byte? _positionType, string _roleIDs, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_SetPositionTypeRoles(_applicationID, _positionType, _roleIDs, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region CreateMasterPassword

public System.Data.SqlClient.SqlCommand GetCommand_CreateMasterPassword(int? timeout = null)
{
var cmd = base.CreateCommand("org.spCreateMasterPassword", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> CreateMasterPasswordAsync(int? timeout = null)
{
	using(var cmd = GetCommand_CreateMasterPassword(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> CreateMasterPasswordDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spCreateMasterPassword",new {} , timeout );
}

public ResultSet CreateMasterPassword(int? timeout = null)
{
	using(var cmd = GetCommand_CreateMasterPassword(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyController

public System.Data.SqlClient.SqlCommand GetCommand_ModifyController(bool? _isNewRecord, Guid? _id, byte? _type, Guid? _applicationID, string _name, string _title, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyController", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyControllerAsync(bool? _isNewRecord, Guid? _id, byte? _type, Guid? _applicationID, string _name, string _title, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyController(_isNewRecord, _id, _type, _applicationID, _name, _title, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyControllerDapperAsync<T>(bool? _isNewRecord, Guid? _id, byte? _type, Guid? _applicationID, string _name, string _title, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyController",new {AIsNewRecord=_isNewRecord,AID=_id,AType=_type,AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title)} , timeout );
}

public ResultSet ModifyController(bool? _isNewRecord, Guid? _id, byte? _type, Guid? _applicationID, string _name, string _title, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyController(_isNewRecord, _id, _type, _applicationID, _name, _title, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyWebServiceUserPermission

public System.Data.SqlClient.SqlCommand GetCommand_ModifyWebServiceUserPermission(bool? _isNewRecord, Guid? _id, Guid? _webServiceID, Guid? _webServiceUserID, int? _numberPerDay, DateTime? _endDate, string _useHours, Guid? _creatorUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyWebServiceUserPermission", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AWebServiceID", IsOutput = false, Value = _webServiceID == null ? DBNull.Value : (object)_webServiceID }, 
					new Parameter { Name = "@AWebServiceUserID", IsOutput = false, Value = _webServiceUserID == null ? DBNull.Value : (object)_webServiceUserID }, 
					new Parameter { Name = "@ANumberPerDay", IsOutput = false, Value = _numberPerDay == null ? DBNull.Value : (object)_numberPerDay }, 
					new Parameter { Name = "@AEndDate", IsOutput = false, Value = _endDate == null ? DBNull.Value : (object)_endDate }, 
					new Parameter { Name = "@AUseHours", IsOutput = false, Value = string.IsNullOrWhiteSpace(_useHours) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_useHours) }, 
					new Parameter { Name = "@ACreatorUserID", IsOutput = false, Value = _creatorUserID == null ? DBNull.Value : (object)_creatorUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyWebServiceUserPermissionAsync(bool? _isNewRecord, Guid? _id, Guid? _webServiceID, Guid? _webServiceUserID, int? _numberPerDay, DateTime? _endDate, string _useHours, Guid? _creatorUserID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyWebServiceUserPermission(_isNewRecord, _id, _webServiceID, _webServiceUserID, _numberPerDay, _endDate, _useHours, _creatorUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyWebServiceUserPermissionDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _webServiceID, Guid? _webServiceUserID, int? _numberPerDay, DateTime? _endDate, string _useHours, Guid? _creatorUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyWebServiceUserPermission",new {AIsNewRecord=_isNewRecord,AID=_id,AWebServiceID=_webServiceID,AWebServiceUserID=_webServiceUserID,ANumberPerDay=_numberPerDay,AEndDate=_endDate,AUseHours=string.IsNullOrWhiteSpace(_useHours) ? _useHours : ReplaceArabicWithPersianChars(_useHours),ACreatorUserID=_creatorUserID} , timeout );
}

public ResultSet ModifyWebServiceUserPermission(bool? _isNewRecord, Guid? _id, Guid? _webServiceID, Guid? _webServiceUserID, int? _numberPerDay, DateTime? _endDate, string _useHours, Guid? _creatorUserID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyWebServiceUserPermission(_isNewRecord, _id, _webServiceID, _webServiceUserID, _numberPerDay, _endDate, _useHours, _creatorUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetBugetCodeAssignment

public System.Data.SqlClient.SqlCommand GetCommand_GetBugetCodeAssignment(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetBugetCodeAssignment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetBugetCodeAssignmentAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetBugetCodeAssignment(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetBugetCodeAssignmentDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetBugetCodeAssignment",new {AID=_id} , timeout );
}

public ResultSet GetBugetCodeAssignment(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetBugetCodeAssignment(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetBugetCodeAssignments

public System.Data.SqlClient.SqlCommand GetCommand_GetBugetCodeAssignments(Guid? _id, Guid? _positionSubTypeID, Guid? _departmentID, Guid? _applicationID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetBugetCodeAssignments", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@APositionSubTypeID", IsOutput = false, Value = _positionSubTypeID == null ? DBNull.Value : (object)_positionSubTypeID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetBugetCodeAssignmentsAsync(Guid? _id, Guid? _positionSubTypeID, Guid? _departmentID, Guid? _applicationID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetBugetCodeAssignments(_id, _positionSubTypeID, _departmentID, _applicationID, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetBugetCodeAssignmentsDapperAsync<T>(Guid? _id, Guid? _positionSubTypeID, Guid? _departmentID, Guid? _applicationID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetBugetCodeAssignments",new {AID=_id,APositionSubTypeID=_positionSubTypeID,ADepartmentID=_departmentID,AApplicationID=_applicationID,AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetBugetCodeAssignments(Guid? _id, Guid? _positionSubTypeID, Guid? _departmentID, Guid? _applicationID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetBugetCodeAssignments(_id, _positionSubTypeID, _departmentID, _applicationID, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyCommand

public System.Data.SqlClient.SqlCommand GetCommand_ModifyCommand(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _node, Guid? _applicationID, string _name, string _fullName, string _title, byte? _type, int? _order, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyCommand", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@ANode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_node) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_node) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AFullName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_fullName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_fullName) }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@AOrder", IsOutput = false, Value = _order == null ? DBNull.Value : (object)_order }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyCommandAsync(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _node, Guid? _applicationID, string _name, string _fullName, string _title, byte? _type, int? _order, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyCommand(_isNewRecord, _id, _parentID, _node, _applicationID, _name, _fullName, _title, _type, _order, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyCommandDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _node, Guid? _applicationID, string _name, string _fullName, string _title, byte? _type, int? _order, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyCommand",new {AIsNewRecord=_isNewRecord,AID=_id,AParentID=_parentID,ANode=string.IsNullOrWhiteSpace(_node) ? _node : ReplaceArabicWithPersianChars(_node),AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AFullName=string.IsNullOrWhiteSpace(_fullName) ? _fullName : ReplaceArabicWithPersianChars(_fullName),ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AType=_type,AOrder=_order,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyCommand(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _node, Guid? _applicationID, string _name, string _fullName, string _title, byte? _type, int? _order, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyCommand(_isNewRecord, _id, _parentID, _node, _applicationID, _name, _fullName, _title, _type, _order, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteApplication

public System.Data.SqlClient.SqlCommand GetCommand_DeleteApplication(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteApplication", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteApplicationAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteApplication(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteApplicationDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteApplication",new {AID=_id} , timeout );
}

public ResultSet DeleteApplication(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteApplication(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteBugetCodeAssignment

public System.Data.SqlClient.SqlCommand GetCommand_DeleteBugetCodeAssignment(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteBugetCodeAssignment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteBugetCodeAssignmentAsync(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteBugetCodeAssignment(_id, _currentUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteBugetCodeAssignmentDapperAsync<T>(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteBugetCodeAssignment",new {AID=_id,ACurrentUserID=_currentUserID} , timeout );
}

public ResultSet DeleteBugetCodeAssignment(Guid? _id, Guid? _currentUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteBugetCodeAssignment(_id, _currentUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetCommandOrder

public System.Data.SqlClient.SqlCommand GetCommand_SetCommandOrder(Guid? _commandID, byte? _direction, int? timeout = null)
{
var cmd = base.CreateCommand("org.spSetCommandOrder", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACommandID", IsOutput = false, Value = _commandID == null ? DBNull.Value : (object)_commandID }, 
					new Parameter { Name = "@ADirection", IsOutput = false, Value = _direction == null ? DBNull.Value : (object)_direction }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetCommandOrderAsync(Guid? _commandID, byte? _direction, int? timeout = null)
{
	using(var cmd = GetCommand_SetCommandOrder(_commandID, _direction, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetCommandOrderDapperAsync<T>(Guid? _commandID, byte? _direction, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spSetCommandOrder",new {ACommandID=_commandID,ADirection=_direction} , timeout );
}

public ResultSet SetCommandOrder(Guid? _commandID, byte? _direction, int? timeout = null)
{
	using(var cmd = GetCommand_SetCommandOrder(_commandID, _direction, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region UpdateRefreshTokensBySsoTicket

public System.Data.SqlClient.SqlCommand GetCommand_UpdateRefreshTokensBySsoTicket(Guid? _userID, DateTime? _expireDate, string _ssoTicket, int? timeout = null)
{
var cmd = base.CreateCommand("org.spUpdateRefreshTokensBySsoTicket", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AExpireDate", IsOutput = false, Value = _expireDate == null ? DBNull.Value : (object)_expireDate }, 
					new Parameter { Name = "@ASsoTicket", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ssoTicket) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ssoTicket) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> UpdateRefreshTokensBySsoTicketAsync(Guid? _userID, DateTime? _expireDate, string _ssoTicket, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateRefreshTokensBySsoTicket(_userID, _expireDate, _ssoTicket, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> UpdateRefreshTokensBySsoTicketDapperAsync<T>(Guid? _userID, DateTime? _expireDate, string _ssoTicket, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spUpdateRefreshTokensBySsoTicket",new {AUserID=_userID,AExpireDate=_expireDate,ASsoTicket=string.IsNullOrWhiteSpace(_ssoTicket) ? _ssoTicket : ReplaceArabicWithPersianChars(_ssoTicket)} , timeout );
}

public ResultSet UpdateRefreshTokensBySsoTicket(Guid? _userID, DateTime? _expireDate, string _ssoTicket, int? timeout = null)
{
	using(var cmd = GetCommand_UpdateRefreshTokensBySsoTicket(_userID, _expireDate, _ssoTicket, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetCommands

public System.Data.SqlClient.SqlCommand GetCommand_GetCommands(Guid? _applicationID, Guid? _roleID, Guid? _parentID, string _name, string _title, byte? _type, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetCommands", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ARoleID", IsOutput = false, Value = _roleID == null ? DBNull.Value : (object)_roleID }, 
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetCommandsAsync(Guid? _applicationID, Guid? _roleID, Guid? _parentID, string _name, string _title, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_GetCommands(_applicationID, _roleID, _parentID, _name, _title, _type, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetCommandsDapperAsync<T>(Guid? _applicationID, Guid? _roleID, Guid? _parentID, string _name, string _title, byte? _type, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetCommands",new {AApplicationID=_applicationID,ARoleID=_roleID,AParentID=_parentID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AType=_type} , timeout );
}

public ResultSet GetCommands(Guid? _applicationID, Guid? _roleID, Guid? _parentID, string _name, string _title, byte? _type, int? timeout = null)
{
	using(var cmd = GetCommand_GetCommands(_applicationID, _roleID, _parentID, _name, _title, _type, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteUserCellphone

public System.Data.SqlClient.SqlCommand GetCommand_DeleteUserCellphone(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteUserCellphone", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ARemoverUserID", IsOutput = false, Value = _removerUserID == null ? DBNull.Value : (object)_removerUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteUserCellphoneAsync(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteUserCellphone(_id, _removerUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteUserCellphoneDapperAsync<T>(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteUserCellphone",new {AID=_id,ARemoverUserID=_removerUserID} , timeout );
}

public ResultSet DeleteUserCellphone(Guid? _id, Guid? _removerUserID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteUserCellphone(_id, _removerUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTextTemplate

public System.Data.SqlClient.SqlCommand GetCommand_GetTextTemplate(int? _code, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetTextTemplate", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACode", IsOutput = false, Value = _code == null ? DBNull.Value : (object)_code }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTextTemplateAsync(int? _code, int? timeout = null)
{
	using(var cmd = GetCommand_GetTextTemplate(_code, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTextTemplateDapperAsync<T>(int? _code, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetTextTemplate",new {ACode=_code} , timeout );
}

public ResultSet GetTextTemplate(int? _code, int? timeout = null)
{
	using(var cmd = GetCommand_GetTextTemplate(_code, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region CreateUserCellphone

public System.Data.SqlClient.SqlCommand GetCommand_CreateUserCellphone(Guid? _id, Guid? _userID, Guid? _individualID, string _cellPhone, string _nationalCode, int? timeout = null)
{
var cmd = base.CreateCommand("org.spCreateUserCellphone", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@ACellPhone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellPhone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellPhone) }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> CreateUserCellphoneAsync(Guid? _id, Guid? _userID, Guid? _individualID, string _cellPhone, string _nationalCode, int? timeout = null)
{
	using(var cmd = GetCommand_CreateUserCellphone(_id, _userID, _individualID, _cellPhone, _nationalCode, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> CreateUserCellphoneDapperAsync<T>(Guid? _id, Guid? _userID, Guid? _individualID, string _cellPhone, string _nationalCode, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spCreateUserCellphone",new {AID=_id,AUserID=_userID,AIndividualID=_individualID,ACellPhone=string.IsNullOrWhiteSpace(_cellPhone) ? _cellPhone : ReplaceArabicWithPersianChars(_cellPhone),ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode)} , timeout );
}

public ResultSet CreateUserCellphone(Guid? _id, Guid? _userID, Guid? _individualID, string _cellPhone, string _nationalCode, int? timeout = null)
{
	using(var cmd = GetCommand_CreateUserCellphone(_id, _userID, _individualID, _cellPhone, _nationalCode, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetProcessMonitorings

public System.Data.SqlClient.SqlCommand GetCommand_GetProcessMonitorings(Guid? _applicationID, string _name, string _code, int? _count, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetProcessMonitorings", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@ACount", IsOutput = false, Value = _count == null ? DBNull.Value : (object)_count }, 
					new Parameter { Name = "@ASolution", IsOutput = false, Value = string.IsNullOrWhiteSpace(_solution) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_solution) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetProcessMonitoringsAsync(Guid? _applicationID, string _name, string _code, int? _count, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetProcessMonitorings(_applicationID, _name, _code, _count, _solution, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetProcessMonitoringsDapperAsync<T>(Guid? _applicationID, string _name, string _code, int? _count, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetProcessMonitorings",new {AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),ACount=_count,ASolution=string.IsNullOrWhiteSpace(_solution) ? _solution : ReplaceArabicWithPersianChars(_solution),AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetProcessMonitorings(Guid? _applicationID, string _name, string _code, int? _count, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetProcessMonitorings(_applicationID, _name, _code, _count, _solution, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteApplicationAssignment

public System.Data.SqlClient.SqlCommand GetCommand_DeleteApplicationAssignment(Guid? _id, Guid? _userID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spDeleteApplicationAssignment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteApplicationAssignmentAsync(Guid? _id, Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteApplicationAssignment(_id, _userID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteApplicationAssignmentDapperAsync<T>(Guid? _id, Guid? _userID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spDeleteApplicationAssignment",new {AID=_id,AUserID=_userID} , timeout );
}

public ResultSet DeleteApplicationAssignment(Guid? _id, Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteApplicationAssignment(_id, _userID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetBudgetCodeAssignments

public System.Data.SqlClient.SqlCommand GetCommand_GetBudgetCodeAssignments(Guid? _positionSubTypeID, Guid? _departmentID, Guid? _applicationID, Guid? _departmentBudgetID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetBudgetCodeAssignments", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionSubTypeID", IsOutput = false, Value = _positionSubTypeID == null ? DBNull.Value : (object)_positionSubTypeID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ADepartmentBudgetID", IsOutput = false, Value = _departmentBudgetID == null ? DBNull.Value : (object)_departmentBudgetID }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetBudgetCodeAssignmentsAsync(Guid? _positionSubTypeID, Guid? _departmentID, Guid? _applicationID, Guid? _departmentBudgetID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetBudgetCodeAssignments(_positionSubTypeID, _departmentID, _applicationID, _departmentBudgetID, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetBudgetCodeAssignmentsDapperAsync<T>(Guid? _positionSubTypeID, Guid? _departmentID, Guid? _applicationID, Guid? _departmentBudgetID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetBudgetCodeAssignments",new {APositionSubTypeID=_positionSubTypeID,ADepartmentID=_departmentID,AApplicationID=_applicationID,ADepartmentBudgetID=_departmentBudgetID,AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetBudgetCodeAssignments(Guid? _positionSubTypeID, Guid? _departmentID, Guid? _applicationID, Guid? _departmentBudgetID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetBudgetCodeAssignments(_positionSubTypeID, _departmentID, _applicationID, _departmentBudgetID, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTextTemplateByID

public System.Data.SqlClient.SqlCommand GetCommand_GetTextTemplateByID(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetTextTemplateByID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTextTemplateByIDAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetTextTemplateByID(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTextTemplateByIDDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetTextTemplateByID",new {AID=_id} , timeout );
}

public ResultSet GetTextTemplateByID(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetTextTemplateByID(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUACByDomain

public System.Data.SqlClient.SqlCommand GetCommand_GetUACByDomain(string _ost, string _gent, string _ort, string _ppId, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUACByDomain", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@Host", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ost) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ost) }, 
					new Parameter { Name = "@Agent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_gent) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_gent) }, 
					new Parameter { Name = "@Port", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ort) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ort) }, 
					new Parameter { Name = "@AppId", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ppId) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ppId) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUACByDomainAsync(string _ost, string _gent, string _ort, string _ppId, int? timeout = null)
{
	using(var cmd = GetCommand_GetUACByDomain(_ost, _gent, _ort, _ppId, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUACByDomainDapperAsync<T>(string _ost, string _gent, string _ort, string _ppId, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUACByDomain",new {Host=string.IsNullOrWhiteSpace(_ost) ? _ost : ReplaceArabicWithPersianChars(_ost),Agent=string.IsNullOrWhiteSpace(_gent) ? _gent : ReplaceArabicWithPersianChars(_gent),Port=string.IsNullOrWhiteSpace(_ort) ? _ort : ReplaceArabicWithPersianChars(_ort),AppId=string.IsNullOrWhiteSpace(_ppId) ? _ppId : ReplaceArabicWithPersianChars(_ppId)} , timeout );
}

public ResultSet GetUACByDomain(string _ost, string _gent, string _ort, string _ppId, int? timeout = null)
{
	using(var cmd = GetCommand_GetUACByDomain(_ost, _gent, _ort, _ppId, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationAssignment

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationAssignment(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetApplicationAssignment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationAssignmentAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationAssignment(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationAssignmentDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetApplicationAssignment",new {AID=_id} , timeout );
}

public ResultSet GetApplicationAssignment(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationAssignment(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyMasterPassword

public System.Data.SqlClient.SqlCommand GetCommand_ModifyMasterPassword(bool? _isNewRecord, Guid? _id, Guid? _userID, DateTime? _fromDate, DateTime? _toDate, string _password, Guid? _creatorUserID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyMasterPassword", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AFromDate", IsOutput = false, Value = _fromDate == null ? DBNull.Value : (object)_fromDate }, 
					new Parameter { Name = "@AToDate", IsOutput = false, Value = _toDate == null ? DBNull.Value : (object)_toDate }, 
					new Parameter { Name = "@APassword", IsOutput = false, Value = string.IsNullOrWhiteSpace(_password) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_password) }, 
					new Parameter { Name = "@ACreatorUserID", IsOutput = false, Value = _creatorUserID == null ? DBNull.Value : (object)_creatorUserID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyMasterPasswordAsync(bool? _isNewRecord, Guid? _id, Guid? _userID, DateTime? _fromDate, DateTime? _toDate, string _password, Guid? _creatorUserID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyMasterPassword(_isNewRecord, _id, _userID, _fromDate, _toDate, _password, _creatorUserID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyMasterPasswordDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _userID, DateTime? _fromDate, DateTime? _toDate, string _password, Guid? _creatorUserID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyMasterPassword",new {AIsNewRecord=_isNewRecord,AID=_id,AUserID=_userID,AFromDate=_fromDate,AToDate=_toDate,APassword=string.IsNullOrWhiteSpace(_password) ? _password : ReplaceArabicWithPersianChars(_password),ACreatorUserID=_creatorUserID} , timeout );
}

public ResultSet ModifyMasterPassword(bool? _isNewRecord, Guid? _id, Guid? _userID, DateTime? _fromDate, DateTime? _toDate, string _password, Guid? _creatorUserID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyMasterPassword(_isNewRecord, _id, _userID, _fromDate, _toDate, _password, _creatorUserID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region OrganizationMergeIndividuals

public System.Data.SqlClient.SqlCommand GetCommand_OrganizationMergeIndividuals(Guid? _individualID, Guid? _mergedIndividualID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spOrganizationMergeIndividuals", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AMergedIndividualID", IsOutput = false, Value = _mergedIndividualID == null ? DBNull.Value : (object)_mergedIndividualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> OrganizationMergeIndividualsAsync(Guid? _individualID, Guid? _mergedIndividualID, int? timeout = null)
{
	using(var cmd = GetCommand_OrganizationMergeIndividuals(_individualID, _mergedIndividualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> OrganizationMergeIndividualsDapperAsync<T>(Guid? _individualID, Guid? _mergedIndividualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spOrganizationMergeIndividuals",new {AIndividualID=_individualID,AMergedIndividualID=_mergedIndividualID} , timeout );
}

public ResultSet OrganizationMergeIndividuals(Guid? _individualID, Guid? _mergedIndividualID, int? timeout = null)
{
	using(var cmd = GetCommand_OrganizationMergeIndividuals(_individualID, _mergedIndividualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetUAC

public System.Data.SqlClient.SqlCommand GetCommand_GetUAC(string _ost, string _gent, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetUAC", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@Host", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ost) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ost) }, 
					new Parameter { Name = "@Agent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_gent) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_gent) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUACAsync(string _ost, string _gent, int? timeout = null)
{
	using(var cmd = GetCommand_GetUAC(_ost, _gent, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUACDapperAsync<T>(string _ost, string _gent, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetUAC",new {Host=string.IsNullOrWhiteSpace(_ost) ? _ost : ReplaceArabicWithPersianChars(_ost),Agent=string.IsNullOrWhiteSpace(_gent) ? _gent : ReplaceArabicWithPersianChars(_gent)} , timeout );
}

public ResultSet GetUAC(string _ost, string _gent, int? timeout = null)
{
	using(var cmd = GetCommand_GetUAC(_ost, _gent, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyApplicationAssignment

public System.Data.SqlClient.SqlCommand GetCommand_ModifyApplicationAssignment(Guid? _positionID, Guid? _applicationID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spModifyApplicationAssignment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyApplicationAssignmentAsync(Guid? _positionID, Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationAssignment(_positionID, _applicationID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyApplicationAssignmentDapperAsync<T>(Guid? _positionID, Guid? _applicationID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spModifyApplicationAssignment",new {APositionID=_positionID,AApplicationID=_applicationID} , timeout );
}

public ResultSet ModifyApplicationAssignment(Guid? _positionID, Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationAssignment(_positionID, _applicationID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartmentsProvincialSubsetCount

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartmentsProvincialSubsetCount(Guid? _parentID, int? timeout = null)
{
var cmd = base.CreateCommand("org.spGetDepartmentsProvincialSubsetCount", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentsProvincialSubsetCountAsync(Guid? _parentID, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsProvincialSubsetCount(_parentID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentsProvincialSubsetCountDapperAsync<T>(Guid? _parentID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("org.spGetDepartmentsProvincialSubsetCount",new {AParentID=_parentID} , timeout );
}

public ResultSet GetDepartmentsProvincialSubsetCount(Guid? _parentID, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartmentsProvincialSubsetCount(_parentID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

}

public class APP: Database
{
#region Constructors
public APP(string connectionString)
	:base(connectionString){}

public APP(string connectionString, IModelValueBinder modelValueBinder)
	:base(connectionString, modelValueBinder){}
#endregion

#region GetFAQs

public System.Data.SqlClient.SqlCommand GetCommand_GetFAQs(Guid? _applicationID, Guid? _fAQGroupID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetFAQs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AFAQGroupID", IsOutput = false, Value = _fAQGroupID == null ? DBNull.Value : (object)_fAQGroupID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetFAQsAsync(Guid? _applicationID, Guid? _fAQGroupID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetFAQs(_applicationID, _fAQGroupID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetFAQsDapperAsync<T>(Guid? _applicationID, Guid? _fAQGroupID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetFAQs",new {AApplicationID=_applicationID,AFAQGroupID=_fAQGroupID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetFAQs(Guid? _applicationID, Guid? _fAQGroupID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetFAQs(_applicationID, _fAQGroupID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyApplicationSurveyAnswer

public System.Data.SqlClient.SqlCommand GetCommand_ModifyApplicationSurveyAnswer(bool? _isNewRecord, Guid? _id, Guid? _participantID, Guid? _questionID, Guid? _choiceID, string _text, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyApplicationSurveyAnswer", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AParticipantID", IsOutput = false, Value = _participantID == null ? DBNull.Value : (object)_participantID }, 
					new Parameter { Name = "@AQuestionID", IsOutput = false, Value = _questionID == null ? DBNull.Value : (object)_questionID }, 
					new Parameter { Name = "@AChoiceID", IsOutput = false, Value = _choiceID == null ? DBNull.Value : (object)_choiceID }, 
					new Parameter { Name = "@AText", IsOutput = false, Value = string.IsNullOrWhiteSpace(_text) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_text) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyApplicationSurveyAnswerAsync(bool? _isNewRecord, Guid? _id, Guid? _participantID, Guid? _questionID, Guid? _choiceID, string _text, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationSurveyAnswer(_isNewRecord, _id, _participantID, _questionID, _choiceID, _text, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyApplicationSurveyAnswerDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _participantID, Guid? _questionID, Guid? _choiceID, string _text, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyApplicationSurveyAnswer",new {AIsNewRecord=_isNewRecord,AID=_id,AParticipantID=_participantID,AQuestionID=_questionID,AChoiceID=_choiceID,AText=string.IsNullOrWhiteSpace(_text) ? _text : ReplaceArabicWithPersianChars(_text),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyApplicationSurveyAnswer(bool? _isNewRecord, Guid? _id, Guid? _participantID, Guid? _questionID, Guid? _choiceID, string _text, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationSurveyAnswer(_isNewRecord, _id, _participantID, _questionID, _choiceID, _text, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteApplicationSurveyGroup

public System.Data.SqlClient.SqlCommand GetCommand_DeleteApplicationSurveyGroup(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteApplicationSurveyGroup", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentPositionID", IsOutput = false, Value = _currentPositionID == null ? DBNull.Value : (object)_currentPositionID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteApplicationSurveyGroupAsync(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteApplicationSurveyGroup(_id, _currentPositionID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteApplicationSurveyGroupDapperAsync<T>(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteApplicationSurveyGroup",new {AID=_id,ACurrentPositionID=_currentPositionID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteApplicationSurveyGroup(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteApplicationSurveyGroup(_id, _currentPositionID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationSurveyGroup

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationSurveyGroup(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetApplicationSurveyGroup", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationSurveyGroupAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyGroup(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationSurveyGroupDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetApplicationSurveyGroup",new {AID=_id} , timeout );
}

public ResultSet GetApplicationSurveyGroup(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyGroup(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationSurveyGroups

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationSurveyGroups(Guid? _applicationSurveyID, string _name, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetApplicationSurveyGroups", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationSurveyID", IsOutput = false, Value = _applicationSurveyID == null ? DBNull.Value : (object)_applicationSurveyID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationSurveyGroupsAsync(Guid? _applicationSurveyID, string _name, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyGroups(_applicationSurveyID, _name, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationSurveyGroupsDapperAsync<T>(Guid? _applicationSurveyID, string _name, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetApplicationSurveyGroups",new {AApplicationSurveyID=_applicationSurveyID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetApplicationSurveyGroups(Guid? _applicationSurveyID, string _name, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyGroups(_applicationSurveyID, _name, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyApplicationSurveyGroup

public System.Data.SqlClient.SqlCommand GetCommand_ModifyApplicationSurveyGroup(bool? _isNewRecord, Guid? _id, Guid? _applicationSurveyID, string _name, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyApplicationSurveyGroup", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationSurveyID", IsOutput = false, Value = _applicationSurveyID == null ? DBNull.Value : (object)_applicationSurveyID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyApplicationSurveyGroupAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationSurveyID, string _name, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationSurveyGroup(_isNewRecord, _id, _applicationSurveyID, _name, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyApplicationSurveyGroupDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationSurveyID, string _name, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyApplicationSurveyGroup",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationSurveyID=_applicationSurveyID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyApplicationSurveyGroup(bool? _isNewRecord, Guid? _id, Guid? _applicationSurveyID, string _name, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationSurveyGroup(_isNewRecord, _id, _applicationSurveyID, _name, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationSurveyParticipant

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationSurveyParticipant(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetApplicationSurveyParticipant", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationSurveyParticipantAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyParticipant(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationSurveyParticipantDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetApplicationSurveyParticipant",new {AID=_id} , timeout );
}

public ResultSet GetApplicationSurveyParticipant(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyParticipant(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationSurveyParticipants

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationSurveyParticipants(Guid? _surveyID, Guid? _userID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetApplicationSurveyParticipants", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ASurveyID", IsOutput = false, Value = _surveyID == null ? DBNull.Value : (object)_surveyID }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationSurveyParticipantsAsync(Guid? _surveyID, Guid? _userID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyParticipants(_surveyID, _userID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationSurveyParticipantsDapperAsync<T>(Guid? _surveyID, Guid? _userID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetApplicationSurveyParticipants",new {ASurveyID=_surveyID,AUserID=_userID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetApplicationSurveyParticipants(Guid? _surveyID, Guid? _userID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyParticipants(_surveyID, _userID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyApplicationSurveyParticipant

public System.Data.SqlClient.SqlCommand GetCommand_ModifyApplicationSurveyParticipant(bool? _isNewRecord, Guid? _id, Guid? _surveyID, Guid? _userID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyApplicationSurveyParticipant", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ASurveyID", IsOutput = false, Value = _surveyID == null ? DBNull.Value : (object)_surveyID }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyApplicationSurveyParticipantAsync(bool? _isNewRecord, Guid? _id, Guid? _surveyID, Guid? _userID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationSurveyParticipant(_isNewRecord, _id, _surveyID, _userID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyApplicationSurveyParticipantDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _surveyID, Guid? _userID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyApplicationSurveyParticipant",new {AIsNewRecord=_isNewRecord,AID=_id,ASurveyID=_surveyID,AUserID=_userID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyApplicationSurveyParticipant(bool? _isNewRecord, Guid? _id, Guid? _surveyID, Guid? _userID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationSurveyParticipant(_isNewRecord, _id, _surveyID, _userID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteApplicationSurveyQuestion

public System.Data.SqlClient.SqlCommand GetCommand_DeleteApplicationSurveyQuestion(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteApplicationSurveyQuestion", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentPositionID", IsOutput = false, Value = _currentPositionID == null ? DBNull.Value : (object)_currentPositionID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteApplicationSurveyQuestionAsync(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteApplicationSurveyQuestion(_id, _currentPositionID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteApplicationSurveyQuestionDapperAsync<T>(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteApplicationSurveyQuestion",new {AID=_id,ACurrentPositionID=_currentPositionID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteApplicationSurveyQuestion(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteApplicationSurveyQuestion(_id, _currentPositionID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationSurveyQuestion

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationSurveyQuestion(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetApplicationSurveyQuestion", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationSurveyQuestionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyQuestion(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationSurveyQuestionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetApplicationSurveyQuestion",new {AID=_id} , timeout );
}

public ResultSet GetApplicationSurveyQuestion(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyQuestion(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationSurveyQuestions

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationSurveyQuestions(Guid? _groupID, string _name, byte? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetApplicationSurveyQuestions", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AGroupID", IsOutput = false, Value = _groupID == null ? DBNull.Value : (object)_groupID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationSurveyQuestionsAsync(Guid? _groupID, string _name, byte? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyQuestions(_groupID, _name, _type, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationSurveyQuestionsDapperAsync<T>(Guid? _groupID, string _name, byte? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetApplicationSurveyQuestions",new {AGroupID=_groupID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AType=_type,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetApplicationSurveyQuestions(Guid? _groupID, string _name, byte? _type, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyQuestions(_groupID, _name, _type, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyApplicationSurveyQuestion

public System.Data.SqlClient.SqlCommand GetCommand_ModifyApplicationSurveyQuestion(bool? _isNewRecord, Guid? _id, Guid? _groupID, string _name, byte? _type, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyApplicationSurveyQuestion", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AGroupID", IsOutput = false, Value = _groupID == null ? DBNull.Value : (object)_groupID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyApplicationSurveyQuestionAsync(bool? _isNewRecord, Guid? _id, Guid? _groupID, string _name, byte? _type, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationSurveyQuestion(_isNewRecord, _id, _groupID, _name, _type, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyApplicationSurveyQuestionDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _groupID, string _name, byte? _type, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyApplicationSurveyQuestion",new {AIsNewRecord=_isNewRecord,AID=_id,AGroupID=_groupID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AType=_type,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyApplicationSurveyQuestion(bool? _isNewRecord, Guid? _id, Guid? _groupID, string _name, byte? _type, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationSurveyQuestion(_isNewRecord, _id, _groupID, _name, _type, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteApplicationSurveyQuestionChoice

public System.Data.SqlClient.SqlCommand GetCommand_DeleteApplicationSurveyQuestionChoice(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteApplicationSurveyQuestionChoice", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentPositionID", IsOutput = false, Value = _currentPositionID == null ? DBNull.Value : (object)_currentPositionID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteApplicationSurveyQuestionChoiceAsync(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteApplicationSurveyQuestionChoice(_id, _currentPositionID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteApplicationSurveyQuestionChoiceDapperAsync<T>(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteApplicationSurveyQuestionChoice",new {AID=_id,ACurrentPositionID=_currentPositionID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteApplicationSurveyQuestionChoice(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteApplicationSurveyQuestionChoice(_id, _currentPositionID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationSurveyQuestionChoice

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationSurveyQuestionChoice(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetApplicationSurveyQuestionChoice", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationSurveyQuestionChoiceAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyQuestionChoice(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationSurveyQuestionChoiceDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetApplicationSurveyQuestionChoice",new {AID=_id} , timeout );
}

public ResultSet GetApplicationSurveyQuestionChoice(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyQuestionChoice(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationSurveyQuestionChoices

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationSurveyQuestionChoices(Guid? _questionID, string _name, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetApplicationSurveyQuestionChoices", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AQuestionID", IsOutput = false, Value = _questionID == null ? DBNull.Value : (object)_questionID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationSurveyQuestionChoicesAsync(Guid? _questionID, string _name, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyQuestionChoices(_questionID, _name, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationSurveyQuestionChoicesDapperAsync<T>(Guid? _questionID, string _name, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetApplicationSurveyQuestionChoices",new {AQuestionID=_questionID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetApplicationSurveyQuestionChoices(Guid? _questionID, string _name, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyQuestionChoices(_questionID, _name, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyApplicationSurveyQuestionChoice

public System.Data.SqlClient.SqlCommand GetCommand_ModifyApplicationSurveyQuestionChoice(bool? _isNewRecord, Guid? _id, Guid? _questionID, string _name, bool? _enable, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyApplicationSurveyQuestionChoice", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AQuestionID", IsOutput = false, Value = _questionID == null ? DBNull.Value : (object)_questionID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AEnable", IsOutput = false, Value = _enable == null ? DBNull.Value : (object)_enable }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyApplicationSurveyQuestionChoiceAsync(bool? _isNewRecord, Guid? _id, Guid? _questionID, string _name, bool? _enable, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationSurveyQuestionChoice(_isNewRecord, _id, _questionID, _name, _enable, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyApplicationSurveyQuestionChoiceDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _questionID, string _name, bool? _enable, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyApplicationSurveyQuestionChoice",new {AIsNewRecord=_isNewRecord,AID=_id,AQuestionID=_questionID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AEnable=_enable,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyApplicationSurveyQuestionChoice(bool? _isNewRecord, Guid? _id, Guid? _questionID, string _name, bool? _enable, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationSurveyQuestionChoice(_isNewRecord, _id, _questionID, _name, _enable, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetContact

public System.Data.SqlClient.SqlCommand GetCommand_GetContact(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetContact", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetContactAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetContact(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetContactDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetContact",new {AID=_id} , timeout );
}

public ResultSet GetContact(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetContact(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetContacts

public System.Data.SqlClient.SqlCommand GetCommand_GetContacts(Guid? _applicationID, string _title, string _content, DateTime? _creationDateFrom, DateTime? _creationDateTo, byte? _archivedType, string _note, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetContacts", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_content) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_content) }, 
					new Parameter { Name = "@ACreationDateFrom", IsOutput = false, Value = _creationDateFrom == null ? DBNull.Value : (object)_creationDateFrom }, 
					new Parameter { Name = "@ACreationDateTo", IsOutput = false, Value = _creationDateTo == null ? DBNull.Value : (object)_creationDateTo }, 
					new Parameter { Name = "@AArchivedType", IsOutput = false, Value = _archivedType == null ? DBNull.Value : (object)_archivedType }, 
					new Parameter { Name = "@ANote", IsOutput = false, Value = string.IsNullOrWhiteSpace(_note) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_note) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetContactsAsync(Guid? _applicationID, string _title, string _content, DateTime? _creationDateFrom, DateTime? _creationDateTo, byte? _archivedType, string _note, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetContacts(_applicationID, _title, _content, _creationDateFrom, _creationDateTo, _archivedType, _note, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetContactsDapperAsync<T>(Guid? _applicationID, string _title, string _content, DateTime? _creationDateFrom, DateTime? _creationDateTo, byte? _archivedType, string _note, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetContacts",new {AApplicationID=_applicationID,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AContent=string.IsNullOrWhiteSpace(_content) ? _content : ReplaceArabicWithPersianChars(_content),ACreationDateFrom=_creationDateFrom,ACreationDateTo=_creationDateTo,AArchivedType=_archivedType,ANote=string.IsNullOrWhiteSpace(_note) ? _note : ReplaceArabicWithPersianChars(_note),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetContacts(Guid? _applicationID, string _title, string _content, DateTime? _creationDateFrom, DateTime? _creationDateTo, byte? _archivedType, string _note, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetContacts(_applicationID, _title, _content, _creationDateFrom, _creationDateTo, _archivedType, _note, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyContact

public System.Data.SqlClient.SqlCommand GetCommand_ModifyContact(Guid? _id, Guid? _applicationID, string _name, string _email, string _tel, string _title, string _nationalCode, string _content, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyContact", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AEmail", IsOutput = false, Value = string.IsNullOrWhiteSpace(_email) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_email) }, 
					new Parameter { Name = "@ATel", IsOutput = false, Value = string.IsNullOrWhiteSpace(_tel) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_tel) }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_content) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_content) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyContactAsync(Guid? _id, Guid? _applicationID, string _name, string _email, string _tel, string _title, string _nationalCode, string _content, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyContact(_id, _applicationID, _name, _email, _tel, _title, _nationalCode, _content, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyContactDapperAsync<T>(Guid? _id, Guid? _applicationID, string _name, string _email, string _tel, string _title, string _nationalCode, string _content, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyContact",new {AID=_id,AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AEmail=string.IsNullOrWhiteSpace(_email) ? _email : ReplaceArabicWithPersianChars(_email),ATel=string.IsNullOrWhiteSpace(_tel) ? _tel : ReplaceArabicWithPersianChars(_tel),ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AContent=string.IsNullOrWhiteSpace(_content) ? _content : ReplaceArabicWithPersianChars(_content),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyContact(Guid? _id, Guid? _applicationID, string _name, string _email, string _tel, string _title, string _nationalCode, string _content, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyContact(_id, _applicationID, _name, _email, _tel, _title, _nationalCode, _content, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetArchive

public System.Data.SqlClient.SqlCommand GetCommand_SetArchive(Guid? _id, byte? _archiveType, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetArchive", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AArchiveType", IsOutput = false, Value = _archiveType == null ? DBNull.Value : (object)_archiveType }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetArchiveAsync(Guid? _id, byte? _archiveType, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_SetArchive(_id, _archiveType, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetArchiveDapperAsync<T>(Guid? _id, byte? _archiveType, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetArchive",new {AID=_id,AArchiveType=_archiveType,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet SetArchive(Guid? _id, byte? _archiveType, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_SetArchive(_id, _archiveType, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetHelpSections

public System.Data.SqlClient.SqlCommand GetCommand_GetHelpSections(string _title, int? _order, string _description, Guid? _helpSectionGroupID, Guid? _applicationID, byte? _fileType, byte? _isActive, string _fileName, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetHelpSections", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AOrder", IsOutput = false, Value = _order == null ? DBNull.Value : (object)_order }, 
					new Parameter { Name = "@ADescription", IsOutput = false, Value = string.IsNullOrWhiteSpace(_description) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_description) }, 
					new Parameter { Name = "@AHelpSectionGroupID", IsOutput = false, Value = _helpSectionGroupID == null ? DBNull.Value : (object)_helpSectionGroupID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AFileType", IsOutput = false, Value = _fileType == null ? DBNull.Value : (object)_fileType }, 
					new Parameter { Name = "@AIsActive", IsOutput = false, Value = _isActive == null ? DBNull.Value : (object)_isActive }, 
					new Parameter { Name = "@AFileName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_fileName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_fileName) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetHelpSectionsAsync(string _title, int? _order, string _description, Guid? _helpSectionGroupID, Guid? _applicationID, byte? _fileType, byte? _isActive, string _fileName, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetHelpSections(_title, _order, _description, _helpSectionGroupID, _applicationID, _fileType, _isActive, _fileName, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetHelpSectionsDapperAsync<T>(string _title, int? _order, string _description, Guid? _helpSectionGroupID, Guid? _applicationID, byte? _fileType, byte? _isActive, string _fileName, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetHelpSections",new {ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AOrder=_order,ADescription=string.IsNullOrWhiteSpace(_description) ? _description : ReplaceArabicWithPersianChars(_description),AHelpSectionGroupID=_helpSectionGroupID,AApplicationID=_applicationID,AFileType=_fileType,AIsActive=_isActive,AFileName=string.IsNullOrWhiteSpace(_fileName) ? _fileName : ReplaceArabicWithPersianChars(_fileName),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetHelpSections(string _title, int? _order, string _description, Guid? _helpSectionGroupID, Guid? _applicationID, byte? _fileType, byte? _isActive, string _fileName, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetHelpSections(_title, _order, _description, _helpSectionGroupID, _applicationID, _fileType, _isActive, _fileName, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetNote

public System.Data.SqlClient.SqlCommand GetCommand_SetNote(Guid? _id, string _note, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetNote", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ANote", IsOutput = false, Value = string.IsNullOrWhiteSpace(_note) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_note) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetNoteAsync(Guid? _id, string _note, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_SetNote(_id, _note, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetNoteDapperAsync<T>(Guid? _id, string _note, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetNote",new {AID=_id,ANote=string.IsNullOrWhiteSpace(_note) ? _note : ReplaceArabicWithPersianChars(_note),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet SetNote(Guid? _id, string _note, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_SetNote(_id, _note, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAnnouncementsForBulletin

public System.Data.SqlClient.SqlCommand GetCommand_GetAnnouncementsForBulletin(Guid? _positionID, Guid? _applicationID, string _dynamicPermissionObjects, Guid? _clientID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetAnnouncementsForBulletin", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ADynamicPermissionObjects", IsOutput = false, Value = string.IsNullOrWhiteSpace(_dynamicPermissionObjects) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_dynamicPermissionObjects) }, 
					new Parameter { Name = "@AClientID", IsOutput = false, Value = _clientID == null ? DBNull.Value : (object)_clientID }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAnnouncementsForBulletinAsync(Guid? _positionID, Guid? _applicationID, string _dynamicPermissionObjects, Guid? _clientID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetAnnouncementsForBulletin(_positionID, _applicationID, _dynamicPermissionObjects, _clientID, _getTotalCount, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAnnouncementsForBulletinDapperAsync<T>(Guid? _positionID, Guid? _applicationID, string _dynamicPermissionObjects, Guid? _clientID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetAnnouncementsForBulletin",new {APositionID=_positionID,AApplicationID=_applicationID,ADynamicPermissionObjects=string.IsNullOrWhiteSpace(_dynamicPermissionObjects) ? _dynamicPermissionObjects : ReplaceArabicWithPersianChars(_dynamicPermissionObjects),AClientID=_clientID,AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetAnnouncementsForBulletin(Guid? _positionID, Guid? _applicationID, string _dynamicPermissionObjects, Guid? _clientID, bool? _getTotalCount, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetAnnouncementsForBulletin(_positionID, _applicationID, _dynamicPermissionObjects, _clientID, _getTotalCount, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteContactDetail

public System.Data.SqlClient.SqlCommand GetCommand_DeleteContactDetail(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteContactDetail", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteContactDetailAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteContactDetail(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteContactDetailDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteContactDetail",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteContactDetail(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteContactDetail(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetContactDetail

public System.Data.SqlClient.SqlCommand GetCommand_GetContactDetail(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetContactDetail", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetContactDetailAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetContactDetail(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetContactDetailDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetContactDetail",new {AID=_id} , timeout );
}

public ResultSet GetContactDetail(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetContactDetail(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetContactDetails

public System.Data.SqlClient.SqlCommand GetCommand_GetContactDetails(string _contactInfoIDs, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetContactDetails", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AContactInfoIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_contactInfoIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_contactInfoIDs) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetContactDetailsAsync(string _contactInfoIDs, int? timeout = null)
{
	using(var cmd = GetCommand_GetContactDetails(_contactInfoIDs, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetContactDetailsDapperAsync<T>(string _contactInfoIDs, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetContactDetails",new {AContactInfoIDs=string.IsNullOrWhiteSpace(_contactInfoIDs) ? _contactInfoIDs : ReplaceArabicWithPersianChars(_contactInfoIDs)} , timeout );
}

public ResultSet GetContactDetails(string _contactInfoIDs, int? timeout = null)
{
	using(var cmd = GetCommand_GetContactDetails(_contactInfoIDs, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyContactDetail

public System.Data.SqlClient.SqlCommand GetCommand_ModifyContactDetail(bool? _isNewRecord, Guid? _id, Guid? _contactInfoID, byte? _type, string _name, string _value, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyContactDetail", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AContactInfoID", IsOutput = false, Value = _contactInfoID == null ? DBNull.Value : (object)_contactInfoID }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AValue", IsOutput = false, Value = string.IsNullOrWhiteSpace(_value) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_value) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyContactDetailAsync(bool? _isNewRecord, Guid? _id, Guid? _contactInfoID, byte? _type, string _name, string _value, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyContactDetail(_isNewRecord, _id, _contactInfoID, _type, _name, _value, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyContactDetailDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _contactInfoID, byte? _type, string _name, string _value, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyContactDetail",new {AIsNewRecord=_isNewRecord,AID=_id,AContactInfoID=_contactInfoID,AType=_type,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AValue=string.IsNullOrWhiteSpace(_value) ? _value : ReplaceArabicWithPersianChars(_value),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyContactDetail(bool? _isNewRecord, Guid? _id, Guid? _contactInfoID, byte? _type, string _name, string _value, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyContactDetail(_isNewRecord, _id, _contactInfoID, _type, _name, _value, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetHelpSectionGroups

public System.Data.SqlClient.SqlCommand GetCommand_GetHelpSectionGroups(string _title, int? _order, string _description, Guid? _applicationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetHelpSectionGroups", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AOrder", IsOutput = false, Value = _order == null ? DBNull.Value : (object)_order }, 
					new Parameter { Name = "@ADescription", IsOutput = false, Value = string.IsNullOrWhiteSpace(_description) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_description) }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetHelpSectionGroupsAsync(string _title, int? _order, string _description, Guid? _applicationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetHelpSectionGroups(_title, _order, _description, _applicationID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetHelpSectionGroupsDapperAsync<T>(string _title, int? _order, string _description, Guid? _applicationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetHelpSectionGroups",new {ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AOrder=_order,ADescription=string.IsNullOrWhiteSpace(_description) ? _description : ReplaceArabicWithPersianChars(_description),AApplicationID=_applicationID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetHelpSectionGroups(string _title, int? _order, string _description, Guid? _applicationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetHelpSectionGroups(_title, _order, _description, _applicationID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteContactInfo

public System.Data.SqlClient.SqlCommand GetCommand_DeleteContactInfo(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteContactInfo", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteContactInfoAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteContactInfo(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteContactInfoDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteContactInfo",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteContactInfo(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteContactInfo(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetContactInfo

public System.Data.SqlClient.SqlCommand GetCommand_GetContactInfo(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetContactInfo", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetContactInfoAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetContactInfo(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetContactInfoDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetContactInfo",new {AID=_id} , timeout );
}

public ResultSet GetContactInfo(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetContactInfo(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetContactInfos

public System.Data.SqlClient.SqlCommand GetCommand_GetContactInfos(Guid? _parentID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetContactInfos", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetContactInfosAsync(Guid? _parentID, int? timeout = null)
{
	using(var cmd = GetCommand_GetContactInfos(_parentID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetContactInfosDapperAsync<T>(Guid? _parentID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetContactInfos",new {AParentID=_parentID} , timeout );
}

public ResultSet GetContactInfos(Guid? _parentID, int? timeout = null)
{
	using(var cmd = GetCommand_GetContactInfos(_parentID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyContactInfo

public System.Data.SqlClient.SqlCommand GetCommand_ModifyContactInfo(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _name, int? _order, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyContactInfo", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AOrder", IsOutput = false, Value = _order == null ? DBNull.Value : (object)_order }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyContactInfoAsync(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _name, int? _order, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyContactInfo(_isNewRecord, _id, _parentID, _name, _order, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyContactInfoDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _name, int? _order, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyContactInfo",new {AIsNewRecord=_isNewRecord,AID=_id,AParentID=_parentID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AOrder=_order,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyContactInfo(bool? _isNewRecord, Guid? _id, Guid? _parentID, string _name, int? _order, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyContactInfo(_isNewRecord, _id, _parentID, _name, _order, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteFAQ

public System.Data.SqlClient.SqlCommand GetCommand_DeleteFAQ(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteFAQ", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteFAQAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteFAQ(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteFAQDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteFAQ",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteFAQ(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteFAQ(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetFAQ

public System.Data.SqlClient.SqlCommand GetCommand_GetFAQ(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetFAQ", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetFAQAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetFAQ(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetFAQDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetFAQ",new {AID=_id} , timeout );
}

public ResultSet GetFAQ(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetFAQ(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyFAQ

public System.Data.SqlClient.SqlCommand GetCommand_ModifyFAQ(bool? _isNewRecord, Guid? _id, Guid? _fAQGroupID, string _question, string _answer, Guid? _userID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyFAQ", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AFAQGroupID", IsOutput = false, Value = _fAQGroupID == null ? DBNull.Value : (object)_fAQGroupID }, 
					new Parameter { Name = "@AQuestion", IsOutput = false, Value = string.IsNullOrWhiteSpace(_question) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_question) }, 
					new Parameter { Name = "@AAnswer", IsOutput = false, Value = string.IsNullOrWhiteSpace(_answer) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_answer) }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyFAQAsync(bool? _isNewRecord, Guid? _id, Guid? _fAQGroupID, string _question, string _answer, Guid? _userID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyFAQ(_isNewRecord, _id, _fAQGroupID, _question, _answer, _userID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyFAQDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _fAQGroupID, string _question, string _answer, Guid? _userID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyFAQ",new {AIsNewRecord=_isNewRecord,AID=_id,AFAQGroupID=_fAQGroupID,AQuestion=string.IsNullOrWhiteSpace(_question) ? _question : ReplaceArabicWithPersianChars(_question),AAnswer=string.IsNullOrWhiteSpace(_answer) ? _answer : ReplaceArabicWithPersianChars(_answer),AUserID=_userID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyFAQ(bool? _isNewRecord, Guid? _id, Guid? _fAQGroupID, string _question, string _answer, Guid? _userID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyFAQ(_isNewRecord, _id, _fAQGroupID, _question, _answer, _userID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteFAQGroup

public System.Data.SqlClient.SqlCommand GetCommand_DeleteFAQGroup(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteFAQGroup", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteFAQGroupAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteFAQGroup(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteFAQGroupDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteFAQGroup",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteFAQGroup(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteFAQGroup(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetFAQGroup

public System.Data.SqlClient.SqlCommand GetCommand_GetFAQGroup(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetFAQGroup", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetFAQGroupAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetFAQGroup(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetFAQGroupDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetFAQGroup",new {AID=_id} , timeout );
}

public ResultSet GetFAQGroup(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetFAQGroup(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyFAQGroup

public System.Data.SqlClient.SqlCommand GetCommand_ModifyFAQGroup(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _title, Guid? _userID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyFAQGroup", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyFAQGroupAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _title, Guid? _userID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyFAQGroup(_isNewRecord, _id, _applicationID, _title, _userID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyFAQGroupDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _title, Guid? _userID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyFAQGroup",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AUserID=_userID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyFAQGroup(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _title, Guid? _userID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyFAQGroup(_isNewRecord, _id, _applicationID, _title, _userID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteHelpSection

public System.Data.SqlClient.SqlCommand GetCommand_DeleteHelpSection(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteHelpSection", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteHelpSectionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteHelpSection(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteHelpSectionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteHelpSection",new {AID=_id} , timeout );
}

public ResultSet DeleteHelpSection(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteHelpSection(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetHelpSection

public System.Data.SqlClient.SqlCommand GetCommand_GetHelpSection(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetHelpSection", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetHelpSectionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetHelpSection(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetHelpSectionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetHelpSection",new {AID=_id} , timeout );
}

public ResultSet GetHelpSection(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetHelpSection(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyHelpSection

public System.Data.SqlClient.SqlCommand GetCommand_ModifyHelpSection(bool? _isNewRecord, Guid? _id, string _title, int? _order, string _description, Guid? _helpSectionGroupID, byte? _fileType, bool? _isActive, string _fileName, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyHelpSection", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AOrder", IsOutput = false, Value = _order == null ? DBNull.Value : (object)_order }, 
					new Parameter { Name = "@ADescription", IsOutput = false, Value = string.IsNullOrWhiteSpace(_description) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_description) }, 
					new Parameter { Name = "@AHelpSectionGroupID", IsOutput = false, Value = _helpSectionGroupID == null ? DBNull.Value : (object)_helpSectionGroupID }, 
					new Parameter { Name = "@AFileType", IsOutput = false, Value = _fileType == null ? DBNull.Value : (object)_fileType }, 
					new Parameter { Name = "@AIsActive", IsOutput = false, Value = _isActive == null ? DBNull.Value : (object)_isActive }, 
					new Parameter { Name = "@AFileName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_fileName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_fileName) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyHelpSectionAsync(bool? _isNewRecord, Guid? _id, string _title, int? _order, string _description, Guid? _helpSectionGroupID, byte? _fileType, bool? _isActive, string _fileName, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyHelpSection(_isNewRecord, _id, _title, _order, _description, _helpSectionGroupID, _fileType, _isActive, _fileName, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyHelpSectionDapperAsync<T>(bool? _isNewRecord, Guid? _id, string _title, int? _order, string _description, Guid? _helpSectionGroupID, byte? _fileType, bool? _isActive, string _fileName, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyHelpSection",new {AIsNewRecord=_isNewRecord,AID=_id,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AOrder=_order,ADescription=string.IsNullOrWhiteSpace(_description) ? _description : ReplaceArabicWithPersianChars(_description),AHelpSectionGroupID=_helpSectionGroupID,AFileType=_fileType,AIsActive=_isActive,AFileName=string.IsNullOrWhiteSpace(_fileName) ? _fileName : ReplaceArabicWithPersianChars(_fileName)} , timeout );
}

public ResultSet ModifyHelpSection(bool? _isNewRecord, Guid? _id, string _title, int? _order, string _description, Guid? _helpSectionGroupID, byte? _fileType, bool? _isActive, string _fileName, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyHelpSection(_isNewRecord, _id, _title, _order, _description, _helpSectionGroupID, _fileType, _isActive, _fileName, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetHelpSectionOrders

public System.Data.SqlClient.SqlCommand GetCommand_SetHelpSectionOrders(string _orders, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetHelpSectionOrders", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AOrders", IsOutput = false, Value = string.IsNullOrWhiteSpace(_orders) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_orders) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetHelpSectionOrdersAsync(string _orders, int? timeout = null)
{
	using(var cmd = GetCommand_SetHelpSectionOrders(_orders, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetHelpSectionOrdersDapperAsync<T>(string _orders, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetHelpSectionOrders",new {AOrders=string.IsNullOrWhiteSpace(_orders) ? _orders : ReplaceArabicWithPersianChars(_orders)} , timeout );
}

public ResultSet SetHelpSectionOrders(string _orders, int? timeout = null)
{
	using(var cmd = GetCommand_SetHelpSectionOrders(_orders, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteHelpSectionGroup

public System.Data.SqlClient.SqlCommand GetCommand_DeleteHelpSectionGroup(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteHelpSectionGroup", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteHelpSectionGroupAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteHelpSectionGroup(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteHelpSectionGroupDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteHelpSectionGroup",new {AID=_id} , timeout );
}

public ResultSet DeleteHelpSectionGroup(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteHelpSectionGroup(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetHelpSectionGroup

public System.Data.SqlClient.SqlCommand GetCommand_GetHelpSectionGroup(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetHelpSectionGroup", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetHelpSectionGroupAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetHelpSectionGroup(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetHelpSectionGroupDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetHelpSectionGroup",new {AID=_id} , timeout );
}

public ResultSet GetHelpSectionGroup(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetHelpSectionGroup(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetFAQGroups

public System.Data.SqlClient.SqlCommand GetCommand_GetFAQGroups(Guid? _applicationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetFAQGroups", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetFAQGroupsAsync(Guid? _applicationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetFAQGroups(_applicationID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetFAQGroupsDapperAsync<T>(Guid? _applicationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetFAQGroups",new {AApplicationID=_applicationID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetFAQGroups(Guid? _applicationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetFAQGroups(_applicationID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyHelpSectionGroup

public System.Data.SqlClient.SqlCommand GetCommand_ModifyHelpSectionGroup(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _title, int? _order, string _description, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyHelpSectionGroup", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AOrder", IsOutput = false, Value = _order == null ? DBNull.Value : (object)_order }, 
					new Parameter { Name = "@ADescription", IsOutput = false, Value = string.IsNullOrWhiteSpace(_description) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_description) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyHelpSectionGroupAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _title, int? _order, string _description, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyHelpSectionGroup(_isNewRecord, _id, _applicationID, _title, _order, _description, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyHelpSectionGroupDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _title, int? _order, string _description, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyHelpSectionGroup",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AOrder=_order,ADescription=string.IsNullOrWhiteSpace(_description) ? _description : ReplaceArabicWithPersianChars(_description)} , timeout );
}

public ResultSet ModifyHelpSectionGroup(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _title, int? _order, string _description, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyHelpSectionGroup(_isNewRecord, _id, _applicationID, _title, _order, _description, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetHelpSectionGroupOrders

public System.Data.SqlClient.SqlCommand GetCommand_SetHelpSectionGroupOrders(string _orders, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetHelpSectionGroupOrders", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AOrders", IsOutput = false, Value = string.IsNullOrWhiteSpace(_orders) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_orders) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetHelpSectionGroupOrdersAsync(string _orders, int? timeout = null)
{
	using(var cmd = GetCommand_SetHelpSectionGroupOrders(_orders, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetHelpSectionGroupOrdersDapperAsync<T>(string _orders, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetHelpSectionGroupOrders",new {AOrders=string.IsNullOrWhiteSpace(_orders) ? _orders : ReplaceArabicWithPersianChars(_orders)} , timeout );
}

public ResultSet SetHelpSectionGroupOrders(string _orders, int? timeout = null)
{
	using(var cmd = GetCommand_SetHelpSectionGroupOrders(_orders, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteMessage

public System.Data.SqlClient.SqlCommand GetCommand_DeleteMessage(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteMessage", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@AMessageID", IsOutput = false, Value = _messageID == null ? DBNull.Value : (object)_messageID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteMessageAsync(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteMessage(_currentUserID, _messageID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteMessageDapperAsync<T>(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteMessage",new {ACurrentUserID=_currentUserID,AMessageID=_messageID} , timeout );
}

public ResultSet DeleteMessage(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteMessage(_currentUserID, _messageID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDraftMessages

public System.Data.SqlClient.SqlCommand GetCommand_GetDraftMessages(Guid? _currentUserID, Guid? _currentPositionID, Guid? _applicationID, string _title, string _content, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetDraftMessages", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@ACurrentPositionID", IsOutput = false, Value = _currentPositionID == null ? DBNull.Value : (object)_currentPositionID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_content) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_content) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDraftMessagesAsync(Guid? _currentUserID, Guid? _currentPositionID, Guid? _applicationID, string _title, string _content, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDraftMessages(_currentUserID, _currentPositionID, _applicationID, _title, _content, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDraftMessagesDapperAsync<T>(Guid? _currentUserID, Guid? _currentPositionID, Guid? _applicationID, string _title, string _content, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetDraftMessages",new {ACurrentUserID=_currentUserID,ACurrentPositionID=_currentPositionID,AApplicationID=_applicationID,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AContent=string.IsNullOrWhiteSpace(_content) ? _content : ReplaceArabicWithPersianChars(_content),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetDraftMessages(Guid? _currentUserID, Guid? _currentPositionID, Guid? _applicationID, string _title, string _content, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDraftMessages(_currentUserID, _currentPositionID, _applicationID, _title, _content, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region TicketStateUpdate

public System.Data.SqlClient.SqlCommand GetCommand_TicketStateUpdate(int? timeout = null)
{
var cmd = base.CreateCommand("app.spTicketStateUpdate", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> TicketStateUpdateAsync(int? timeout = null)
{
	using(var cmd = GetCommand_TicketStateUpdate(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> TicketStateUpdateDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spTicketStateUpdate",new {} , timeout );
}

public ResultSet TicketStateUpdate(int? timeout = null)
{
	using(var cmd = GetCommand_TicketStateUpdate(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetInboxMessages

public System.Data.SqlClient.SqlCommand GetCommand_GetInboxMessages(Guid? _currentUserID, Guid? _currentPositionID, Guid? _applicationID, Guid? _senderUserID, string _senderUserFullName, Guid? _senderPositionID, byte? _senderPositionType, Guid? _departmentID, string _senderDepartmentName, string _title, string _content, bool? _seen, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetInboxMessages", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@ACurrentPositionID", IsOutput = false, Value = _currentPositionID == null ? DBNull.Value : (object)_currentPositionID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ASenderUserID", IsOutput = false, Value = _senderUserID == null ? DBNull.Value : (object)_senderUserID }, 
					new Parameter { Name = "@ASenderUserFullName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_senderUserFullName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_senderUserFullName) }, 
					new Parameter { Name = "@ASenderPositionID", IsOutput = false, Value = _senderPositionID == null ? DBNull.Value : (object)_senderPositionID }, 
					new Parameter { Name = "@ASenderPositionType", IsOutput = false, Value = _senderPositionType == null ? DBNull.Value : (object)_senderPositionType }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@ASenderDepartmentName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_senderDepartmentName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_senderDepartmentName) }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_content) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_content) }, 
					new Parameter { Name = "@ASeen", IsOutput = false, Value = _seen == null ? DBNull.Value : (object)_seen }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetInboxMessagesAsync(Guid? _currentUserID, Guid? _currentPositionID, Guid? _applicationID, Guid? _senderUserID, string _senderUserFullName, Guid? _senderPositionID, byte? _senderPositionType, Guid? _departmentID, string _senderDepartmentName, string _title, string _content, bool? _seen, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetInboxMessages(_currentUserID, _currentPositionID, _applicationID, _senderUserID, _senderUserFullName, _senderPositionID, _senderPositionType, _departmentID, _senderDepartmentName, _title, _content, _seen, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetInboxMessagesDapperAsync<T>(Guid? _currentUserID, Guid? _currentPositionID, Guid? _applicationID, Guid? _senderUserID, string _senderUserFullName, Guid? _senderPositionID, byte? _senderPositionType, Guid? _departmentID, string _senderDepartmentName, string _title, string _content, bool? _seen, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetInboxMessages",new {ACurrentUserID=_currentUserID,ACurrentPositionID=_currentPositionID,AApplicationID=_applicationID,ASenderUserID=_senderUserID,ASenderUserFullName=string.IsNullOrWhiteSpace(_senderUserFullName) ? _senderUserFullName : ReplaceArabicWithPersianChars(_senderUserFullName),ASenderPositionID=_senderPositionID,ASenderPositionType=_senderPositionType,ADepartmentID=_departmentID,ASenderDepartmentName=string.IsNullOrWhiteSpace(_senderDepartmentName) ? _senderDepartmentName : ReplaceArabicWithPersianChars(_senderDepartmentName),ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AContent=string.IsNullOrWhiteSpace(_content) ? _content : ReplaceArabicWithPersianChars(_content),ASeen=_seen,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetInboxMessages(Guid? _currentUserID, Guid? _currentPositionID, Guid? _applicationID, Guid? _senderUserID, string _senderUserFullName, Guid? _senderPositionID, byte? _senderPositionType, Guid? _departmentID, string _senderDepartmentName, string _title, string _content, bool? _seen, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetInboxMessages(_currentUserID, _currentPositionID, _applicationID, _senderUserID, _senderUserFullName, _senderPositionID, _senderPositionType, _departmentID, _senderDepartmentName, _title, _content, _seen, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetMessage

public System.Data.SqlClient.SqlCommand GetCommand_GetMessage(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetMessage", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetMessageAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetMessage(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetMessageDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetMessage",new {AID=_id} , timeout );
}

public ResultSet GetMessage(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetMessage(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetMessageReceivers

public System.Data.SqlClient.SqlCommand GetCommand_GetMessageReceivers(Guid? _applicationID, Guid? _messageID, string _messageIDs, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetMessageReceivers", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AMessageID", IsOutput = false, Value = _messageID == null ? DBNull.Value : (object)_messageID }, 
					new Parameter { Name = "@AMessageIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_messageIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_messageIDs) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetMessageReceiversAsync(Guid? _applicationID, Guid? _messageID, string _messageIDs, int? timeout = null)
{
	using(var cmd = GetCommand_GetMessageReceivers(_applicationID, _messageID, _messageIDs, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetMessageReceiversDapperAsync<T>(Guid? _applicationID, Guid? _messageID, string _messageIDs, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetMessageReceivers",new {AApplicationID=_applicationID,AMessageID=_messageID,AMessageIDs=string.IsNullOrWhiteSpace(_messageIDs) ? _messageIDs : ReplaceArabicWithPersianChars(_messageIDs)} , timeout );
}

public ResultSet GetMessageReceivers(Guid? _applicationID, Guid? _messageID, string _messageIDs, int? timeout = null)
{
	using(var cmd = GetCommand_GetMessageReceivers(_applicationID, _messageID, _messageIDs, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetOutboxMessages

public System.Data.SqlClient.SqlCommand GetCommand_GetOutboxMessages(Guid? _currentUserID, Guid? _currentPositionID, Guid? _applicationID, string _title, string _receiverUserFullName, string _content, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetOutboxMessages", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@ACurrentPositionID", IsOutput = false, Value = _currentPositionID == null ? DBNull.Value : (object)_currentPositionID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AReceiverUserFullName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_receiverUserFullName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_receiverUserFullName) }, 
					new Parameter { Name = "@AContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_content) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_content) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetOutboxMessagesAsync(Guid? _currentUserID, Guid? _currentPositionID, Guid? _applicationID, string _title, string _receiverUserFullName, string _content, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetOutboxMessages(_currentUserID, _currentPositionID, _applicationID, _title, _receiverUserFullName, _content, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetOutboxMessagesDapperAsync<T>(Guid? _currentUserID, Guid? _currentPositionID, Guid? _applicationID, string _title, string _receiverUserFullName, string _content, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetOutboxMessages",new {ACurrentUserID=_currentUserID,ACurrentPositionID=_currentPositionID,AApplicationID=_applicationID,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AReceiverUserFullName=string.IsNullOrWhiteSpace(_receiverUserFullName) ? _receiverUserFullName : ReplaceArabicWithPersianChars(_receiverUserFullName),AContent=string.IsNullOrWhiteSpace(_content) ? _content : ReplaceArabicWithPersianChars(_content),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetOutboxMessages(Guid? _currentUserID, Guid? _currentPositionID, Guid? _applicationID, string _title, string _receiverUserFullName, string _content, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetOutboxMessages(_currentUserID, _currentPositionID, _applicationID, _title, _receiverUserFullName, _content, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteAnnouncement

public System.Data.SqlClient.SqlCommand GetCommand_DeleteAnnouncement(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteAnnouncement", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteAnnouncementAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteAnnouncement(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteAnnouncementDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteAnnouncement",new {AID=_id} , timeout );
}

public ResultSet DeleteAnnouncement(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteAnnouncement(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyMessage

public System.Data.SqlClient.SqlCommand GetCommand_ModifyMessage(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _senderUserID, Guid? _senderPositionID, string _content, byte? _sentType, string _title, Guid? _parentID, string _receiverUserIDs, DateTime? _expireDate, byte? _messageType, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyMessage", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ASenderUserID", IsOutput = false, Value = _senderUserID == null ? DBNull.Value : (object)_senderUserID }, 
					new Parameter { Name = "@ASenderPositionID", IsOutput = false, Value = _senderPositionID == null ? DBNull.Value : (object)_senderPositionID }, 
					new Parameter { Name = "@AContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_content) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_content) }, 
					new Parameter { Name = "@ASentType", IsOutput = false, Value = _sentType == null ? DBNull.Value : (object)_sentType }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AReceiverUserIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_receiverUserIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_receiverUserIDs) }, 
					new Parameter { Name = "@AExpireDate", IsOutput = false, Value = _expireDate == null ? DBNull.Value : (object)_expireDate }, 
					new Parameter { Name = "@AMessageType", IsOutput = false, Value = _messageType == null ? DBNull.Value : (object)_messageType }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyMessageAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _senderUserID, Guid? _senderPositionID, string _content, byte? _sentType, string _title, Guid? _parentID, string _receiverUserIDs, DateTime? _expireDate, byte? _messageType, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyMessage(_isNewRecord, _id, _applicationID, _senderUserID, _senderPositionID, _content, _sentType, _title, _parentID, _receiverUserIDs, _expireDate, _messageType, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyMessageDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _senderUserID, Guid? _senderPositionID, string _content, byte? _sentType, string _title, Guid? _parentID, string _receiverUserIDs, DateTime? _expireDate, byte? _messageType, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyMessage",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,ASenderUserID=_senderUserID,ASenderPositionID=_senderPositionID,AContent=string.IsNullOrWhiteSpace(_content) ? _content : ReplaceArabicWithPersianChars(_content),ASentType=_sentType,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AParentID=_parentID,AReceiverUserIDs=string.IsNullOrWhiteSpace(_receiverUserIDs) ? _receiverUserIDs : ReplaceArabicWithPersianChars(_receiverUserIDs),AExpireDate=_expireDate,AMessageType=_messageType,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyMessage(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _senderUserID, Guid? _senderPositionID, string _content, byte? _sentType, string _title, Guid? _parentID, string _receiverUserIDs, DateTime? _expireDate, byte? _messageType, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyMessage(_isNewRecord, _id, _applicationID, _senderUserID, _senderPositionID, _content, _sentType, _title, _parentID, _receiverUserIDs, _expireDate, _messageType, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTicketSequences

public System.Data.SqlClient.SqlCommand GetCommand_GetTicketSequences(Guid? _ticketID, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentPositionID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetTicketSequences", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ATicketID", IsOutput = false, Value = _ticketID == null ? DBNull.Value : (object)_ticketID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@ACurrentPositionID", IsOutput = false, Value = _currentPositionID == null ? DBNull.Value : (object)_currentPositionID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTicketSequencesAsync(Guid? _ticketID, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentPositionID, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketSequences(_ticketID, _pageSize, _pageIndex, _sortExp, _currentPositionID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTicketSequencesDapperAsync<T>(Guid? _ticketID, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentPositionID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetTicketSequences",new {ATicketID=_ticketID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),ACurrentPositionID=_currentPositionID} , timeout );
}

public ResultSet GetTicketSequences(Guid? _ticketID, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentPositionID, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketSequences(_ticketID, _pageSize, _pageIndex, _sortExp, _currentPositionID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region PermanentDeleteMessage

public System.Data.SqlClient.SqlCommand GetCommand_PermanentDeleteMessage(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spPermanentDeleteMessage", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@AMessageID", IsOutput = false, Value = _messageID == null ? DBNull.Value : (object)_messageID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> PermanentDeleteMessageAsync(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
	using(var cmd = GetCommand_PermanentDeleteMessage(_currentUserID, _messageID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> PermanentDeleteMessageDapperAsync<T>(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spPermanentDeleteMessage",new {ACurrentUserID=_currentUserID,AMessageID=_messageID} , timeout );
}

public ResultSet PermanentDeleteMessage(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
	using(var cmd = GetCommand_PermanentDeleteMessage(_currentUserID, _messageID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SendMessage

public System.Data.SqlClient.SqlCommand GetCommand_SendMessage(Guid? _messageID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSendMessage", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AMessageID", IsOutput = false, Value = _messageID == null ? DBNull.Value : (object)_messageID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SendMessageAsync(Guid? _messageID, int? timeout = null)
{
	using(var cmd = GetCommand_SendMessage(_messageID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SendMessageDapperAsync<T>(Guid? _messageID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSendMessage",new {AMessageID=_messageID} , timeout );
}

public ResultSet SendMessage(Guid? _messageID, int? timeout = null)
{
	using(var cmd = GetCommand_SendMessage(_messageID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetMessageAsSeen

public System.Data.SqlClient.SqlCommand GetCommand_SetMessageAsSeen(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetMessageAsSeen", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@AMessageID", IsOutput = false, Value = _messageID == null ? DBNull.Value : (object)_messageID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetMessageAsSeenAsync(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
	using(var cmd = GetCommand_SetMessageAsSeen(_currentUserID, _messageID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetMessageAsSeenDapperAsync<T>(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetMessageAsSeen",new {ACurrentUserID=_currentUserID,AMessageID=_messageID} , timeout );
}

public ResultSet SetMessageAsSeen(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
	using(var cmd = GetCommand_SetMessageAsSeen(_currentUserID, _messageID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetMessageAsUnseen

public System.Data.SqlClient.SqlCommand GetCommand_SetMessageAsUnseen(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetMessageAsUnseen", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@AMessageID", IsOutput = false, Value = _messageID == null ? DBNull.Value : (object)_messageID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetMessageAsUnseenAsync(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
	using(var cmd = GetCommand_SetMessageAsUnseen(_currentUserID, _messageID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetMessageAsUnseenDapperAsync<T>(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetMessageAsUnseen",new {ACurrentUserID=_currentUserID,AMessageID=_messageID} , timeout );
}

public ResultSet SetMessageAsUnseen(Guid? _currentUserID, Guid? _messageID, int? timeout = null)
{
	using(var cmd = GetCommand_SetMessageAsUnseen(_currentUserID, _messageID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetNotificationPositionFromCondition

public System.Data.SqlClient.SqlCommand GetCommand_SetNotificationPositionFromCondition(Guid? _applicationID, Guid? _conditionID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetNotificationPositionFromCondition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AConditionID", IsOutput = false, Value = _conditionID == null ? DBNull.Value : (object)_conditionID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetNotificationPositionFromConditionAsync(Guid? _applicationID, Guid? _conditionID, int? timeout = null)
{
	using(var cmd = GetCommand_SetNotificationPositionFromCondition(_applicationID, _conditionID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetNotificationPositionFromConditionDapperAsync<T>(Guid? _applicationID, Guid? _conditionID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetNotificationPositionFromCondition",new {AApplicationID=_applicationID,AConditionID=_conditionID} , timeout );
}

public ResultSet SetNotificationPositionFromCondition(Guid? _applicationID, Guid? _conditionID, int? timeout = null)
{
	using(var cmd = GetCommand_SetNotificationPositionFromCondition(_applicationID, _conditionID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region TicketReport

public System.Data.SqlClient.SqlCommand GetCommand_TicketReport(Guid? _applicationID, Guid? _subjectID, Guid? _departmentID, Guid? _subjectUserID, byte? _state, byte? _score, byte? _priority, string _trackingCode, string _title, DateTime? _creationDateFrom, DateTime? _creationDateTo, Guid? _ownerID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spTicketReport", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ASubjectID", IsOutput = false, Value = _subjectID == null ? DBNull.Value : (object)_subjectID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@ASubjectUserID", IsOutput = false, Value = _subjectUserID == null ? DBNull.Value : (object)_subjectUserID }, 
					new Parameter { Name = "@AState", IsOutput = false, Value = _state == null ? DBNull.Value : (object)_state }, 
					new Parameter { Name = "@AScore", IsOutput = false, Value = _score == null ? DBNull.Value : (object)_score }, 
					new Parameter { Name = "@APriority", IsOutput = false, Value = _priority == null ? DBNull.Value : (object)_priority }, 
					new Parameter { Name = "@ATrackingCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_trackingCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_trackingCode) }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@ACreationDateFrom", IsOutput = false, Value = _creationDateFrom == null ? DBNull.Value : (object)_creationDateFrom }, 
					new Parameter { Name = "@ACreationDateTo", IsOutput = false, Value = _creationDateTo == null ? DBNull.Value : (object)_creationDateTo }, 
					new Parameter { Name = "@AOwnerID", IsOutput = false, Value = _ownerID == null ? DBNull.Value : (object)_ownerID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> TicketReportAsync(Guid? _applicationID, Guid? _subjectID, Guid? _departmentID, Guid? _subjectUserID, byte? _state, byte? _score, byte? _priority, string _trackingCode, string _title, DateTime? _creationDateFrom, DateTime? _creationDateTo, Guid? _ownerID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_TicketReport(_applicationID, _subjectID, _departmentID, _subjectUserID, _state, _score, _priority, _trackingCode, _title, _creationDateFrom, _creationDateTo, _ownerID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> TicketReportDapperAsync<T>(Guid? _applicationID, Guid? _subjectID, Guid? _departmentID, Guid? _subjectUserID, byte? _state, byte? _score, byte? _priority, string _trackingCode, string _title, DateTime? _creationDateFrom, DateTime? _creationDateTo, Guid? _ownerID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spTicketReport",new {AApplicationID=_applicationID,ASubjectID=_subjectID,ADepartmentID=_departmentID,ASubjectUserID=_subjectUserID,AState=_state,AScore=_score,APriority=_priority,ATrackingCode=string.IsNullOrWhiteSpace(_trackingCode) ? _trackingCode : ReplaceArabicWithPersianChars(_trackingCode),ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),ACreationDateFrom=_creationDateFrom,ACreationDateTo=_creationDateTo,AOwnerID=_ownerID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet TicketReport(Guid? _applicationID, Guid? _subjectID, Guid? _departmentID, Guid? _subjectUserID, byte? _state, byte? _score, byte? _priority, string _trackingCode, string _title, DateTime? _creationDateFrom, DateTime? _creationDateTo, Guid? _ownerID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_TicketReport(_applicationID, _subjectID, _departmentID, _subjectUserID, _state, _score, _priority, _trackingCode, _title, _creationDateFrom, _creationDateTo, _ownerID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ArchiveNotification

public System.Data.SqlClient.SqlCommand GetCommand_ArchiveNotification(Guid? _notificationID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spArchiveNotification", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ANotificationID", IsOutput = false, Value = _notificationID == null ? DBNull.Value : (object)_notificationID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ArchiveNotificationAsync(Guid? _notificationID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ArchiveNotification(_notificationID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ArchiveNotificationDapperAsync<T>(Guid? _notificationID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spArchiveNotification",new {ANotificationID=_notificationID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ArchiveNotification(Guid? _notificationID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ArchiveNotification(_notificationID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region TicketReportAll

public System.Data.SqlClient.SqlCommand GetCommand_TicketReportAll(Guid? _applicationID, Guid? _subjectID, Guid? _departmentID, byte? _state, byte? _score, DateTime? _creationDateFrom, DateTime? _creationDateTo, byte? _priority, string _trackingCode, string _title, byte? _creationTicketType, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spTicketReportAll", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ASubjectID", IsOutput = false, Value = _subjectID == null ? DBNull.Value : (object)_subjectID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AState", IsOutput = false, Value = _state == null ? DBNull.Value : (object)_state }, 
					new Parameter { Name = "@AScore", IsOutput = false, Value = _score == null ? DBNull.Value : (object)_score }, 
					new Parameter { Name = "@ACreationDateFrom", IsOutput = false, Value = _creationDateFrom == null ? DBNull.Value : (object)_creationDateFrom }, 
					new Parameter { Name = "@ACreationDateTo", IsOutput = false, Value = _creationDateTo == null ? DBNull.Value : (object)_creationDateTo }, 
					new Parameter { Name = "@APriority", IsOutput = false, Value = _priority == null ? DBNull.Value : (object)_priority }, 
					new Parameter { Name = "@ATrackingCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_trackingCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_trackingCode) }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@ACreationTicketType", IsOutput = false, Value = _creationTicketType == null ? DBNull.Value : (object)_creationTicketType }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> TicketReportAllAsync(Guid? _applicationID, Guid? _subjectID, Guid? _departmentID, byte? _state, byte? _score, DateTime? _creationDateFrom, DateTime? _creationDateTo, byte? _priority, string _trackingCode, string _title, byte? _creationTicketType, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_TicketReportAll(_applicationID, _subjectID, _departmentID, _state, _score, _creationDateFrom, _creationDateTo, _priority, _trackingCode, _title, _creationTicketType, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> TicketReportAllDapperAsync<T>(Guid? _applicationID, Guid? _subjectID, Guid? _departmentID, byte? _state, byte? _score, DateTime? _creationDateFrom, DateTime? _creationDateTo, byte? _priority, string _trackingCode, string _title, byte? _creationTicketType, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spTicketReportAll",new {AApplicationID=_applicationID,ASubjectID=_subjectID,ADepartmentID=_departmentID,AState=_state,AScore=_score,ACreationDateFrom=_creationDateFrom,ACreationDateTo=_creationDateTo,APriority=_priority,ATrackingCode=string.IsNullOrWhiteSpace(_trackingCode) ? _trackingCode : ReplaceArabicWithPersianChars(_trackingCode),ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),ACreationTicketType=_creationTicketType,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet TicketReportAll(Guid? _applicationID, Guid? _subjectID, Guid? _departmentID, byte? _state, byte? _score, DateTime? _creationDateFrom, DateTime? _creationDateTo, byte? _priority, string _trackingCode, string _title, byte? _creationTicketType, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_TicketReportAll(_applicationID, _subjectID, _departmentID, _state, _score, _creationDateFrom, _creationDateTo, _priority, _trackingCode, _title, _creationTicketType, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteNotification

public System.Data.SqlClient.SqlCommand GetCommand_DeleteNotification(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteNotification", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteNotificationAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteNotification(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteNotificationDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteNotification",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteNotification(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteNotification(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNotification

public System.Data.SqlClient.SqlCommand GetCommand_GetNotification(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetNotification", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNotificationAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetNotification(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNotificationDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetNotification",new {AID=_id} , timeout );
}

public ResultSet GetNotification(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetNotification(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNotificationPositions

public System.Data.SqlClient.SqlCommand GetCommand_GetNotificationPositions(Guid? _notificationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetNotificationPositions", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ANotificationID", IsOutput = false, Value = _notificationID == null ? DBNull.Value : (object)_notificationID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNotificationPositionsAsync(Guid? _notificationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNotificationPositions(_notificationID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNotificationPositionsDapperAsync<T>(Guid? _notificationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetNotificationPositions",new {ANotificationID=_notificationID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNotificationPositions(Guid? _notificationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNotificationPositions(_notificationID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNotifications

public System.Data.SqlClient.SqlCommand GetCommand_GetNotifications(Guid? _applicationID, byte? _senderType, string _title, string _content, byte? _priority, byte? _state, DateTime? _creationDateFrom, DateTime? _creationDateTo, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetNotifications", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ASenderType", IsOutput = false, Value = _senderType == null ? DBNull.Value : (object)_senderType }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_content) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_content) }, 
					new Parameter { Name = "@APriority", IsOutput = false, Value = _priority == null ? DBNull.Value : (object)_priority }, 
					new Parameter { Name = "@AState", IsOutput = false, Value = _state == null ? DBNull.Value : (object)_state }, 
					new Parameter { Name = "@ACreationDateFrom", IsOutput = false, Value = _creationDateFrom == null ? DBNull.Value : (object)_creationDateFrom }, 
					new Parameter { Name = "@ACreationDateTo", IsOutput = false, Value = _creationDateTo == null ? DBNull.Value : (object)_creationDateTo }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNotificationsAsync(Guid? _applicationID, byte? _senderType, string _title, string _content, byte? _priority, byte? _state, DateTime? _creationDateFrom, DateTime? _creationDateTo, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNotifications(_applicationID, _senderType, _title, _content, _priority, _state, _creationDateFrom, _creationDateTo, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNotificationsDapperAsync<T>(Guid? _applicationID, byte? _senderType, string _title, string _content, byte? _priority, byte? _state, DateTime? _creationDateFrom, DateTime? _creationDateTo, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetNotifications",new {AApplicationID=_applicationID,ASenderType=_senderType,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AContent=string.IsNullOrWhiteSpace(_content) ? _content : ReplaceArabicWithPersianChars(_content),APriority=_priority,AState=_state,ACreationDateFrom=_creationDateFrom,ACreationDateTo=_creationDateTo,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNotifications(Guid? _applicationID, byte? _senderType, string _title, string _content, byte? _priority, byte? _state, DateTime? _creationDateFrom, DateTime? _creationDateTo, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNotifications(_applicationID, _senderType, _title, _content, _priority, _state, _creationDateFrom, _creationDateTo, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNotificationsByPosition

public System.Data.SqlClient.SqlCommand GetCommand_GetNotificationsByPosition(Guid? _applicationID, Guid? _currentUserPositionID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetNotificationsByPosition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserPositionID", IsOutput = false, Value = _currentUserPositionID == null ? DBNull.Value : (object)_currentUserPositionID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNotificationsByPositionAsync(Guid? _applicationID, Guid? _currentUserPositionID, int? timeout = null)
{
	using(var cmd = GetCommand_GetNotificationsByPosition(_applicationID, _currentUserPositionID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNotificationsByPositionDapperAsync<T>(Guid? _applicationID, Guid? _currentUserPositionID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetNotificationsByPosition",new {AApplicationID=_applicationID,ACurrentUserPositionID=_currentUserPositionID} , timeout );
}

public ResultSet GetNotificationsByPosition(Guid? _applicationID, Guid? _currentUserPositionID, int? timeout = null)
{
	using(var cmd = GetCommand_GetNotificationsByPosition(_applicationID, _currentUserPositionID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNotificationCondition

public System.Data.SqlClient.SqlCommand GetCommand_GetNotificationCondition(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetNotificationCondition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNotificationConditionAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetNotificationCondition(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNotificationConditionDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetNotificationCondition",new {AID=_id} , timeout );
}

public ResultSet GetNotificationCondition(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetNotificationCondition(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyNotification

public System.Data.SqlClient.SqlCommand GetCommand_ModifyNotification(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _senderPositionID, string _title, string _content, byte? _state, byte? _priority, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyNotification", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ASenderPositionID", IsOutput = false, Value = _senderPositionID == null ? DBNull.Value : (object)_senderPositionID }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_content) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_content) }, 
					new Parameter { Name = "@AState", IsOutput = false, Value = _state == null ? DBNull.Value : (object)_state }, 
					new Parameter { Name = "@APriority", IsOutput = false, Value = _priority == null ? DBNull.Value : (object)_priority }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyNotificationAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _senderPositionID, string _title, string _content, byte? _state, byte? _priority, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyNotification(_isNewRecord, _id, _applicationID, _senderPositionID, _title, _content, _state, _priority, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyNotificationDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _senderPositionID, string _title, string _content, byte? _state, byte? _priority, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyNotification",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,ASenderPositionID=_senderPositionID,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AContent=string.IsNullOrWhiteSpace(_content) ? _content : ReplaceArabicWithPersianChars(_content),AState=_state,APriority=_priority,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyNotification(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _senderPositionID, string _title, string _content, byte? _state, byte? _priority, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyNotification(_isNewRecord, _id, _applicationID, _senderPositionID, _title, _content, _state, _priority, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SendNotification

public System.Data.SqlClient.SqlCommand GetCommand_SendNotification(Guid? _notificationID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSendNotification", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ANotificationID", IsOutput = false, Value = _notificationID == null ? DBNull.Value : (object)_notificationID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SendNotificationAsync(Guid? _notificationID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_SendNotification(_notificationID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SendNotificationDapperAsync<T>(Guid? _notificationID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSendNotification",new {ANotificationID=_notificationID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet SendNotification(Guid? _notificationID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_SendNotification(_notificationID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyNotificationCondition

public System.Data.SqlClient.SqlCommand GetCommand_ModifyNotificationCondition(bool? _isNewRecord, Guid? _id, Guid? _notificationID, Guid? _departmentID, Guid? _provinceID, byte? _positionType, Guid? _positionID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyNotificationCondition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ANotificationID", IsOutput = false, Value = _notificationID == null ? DBNull.Value : (object)_notificationID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@AProvinceID", IsOutput = false, Value = _provinceID == null ? DBNull.Value : (object)_provinceID }, 
					new Parameter { Name = "@APositionType", IsOutput = false, Value = _positionType == null ? DBNull.Value : (object)_positionType }, 
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyNotificationConditionAsync(bool? _isNewRecord, Guid? _id, Guid? _notificationID, Guid? _departmentID, Guid? _provinceID, byte? _positionType, Guid? _positionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyNotificationCondition(_isNewRecord, _id, _notificationID, _departmentID, _provinceID, _positionType, _positionID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyNotificationConditionDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _notificationID, Guid? _departmentID, Guid? _provinceID, byte? _positionType, Guid? _positionID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyNotificationCondition",new {AIsNewRecord=_isNewRecord,AID=_id,ANotificationID=_notificationID,ADepartmentID=_departmentID,AProvinceID=_provinceID,APositionType=_positionType,APositionID=_positionID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyNotificationCondition(bool? _isNewRecord, Guid? _id, Guid? _notificationID, Guid? _departmentID, Guid? _provinceID, byte? _positionType, Guid? _positionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyNotificationCondition(_isNewRecord, _id, _notificationID, _departmentID, _provinceID, _positionType, _positionID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ListForCallCenter

public System.Data.SqlClient.SqlCommand GetCommand_ListForCallCenter(Guid? _applicationID, Guid? _subjectID, byte? _state, byte? _ticketAnswerState, string _trackingCode, Guid? _departmentID, string _title, Guid? _positionID, Guid? _ownerPositionID, string _ownerFullName, Guid? _ownerID, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentUserID, byte? _currentUserType, int? timeout = null)
{
var cmd = base.CreateCommand("app.spListForCallCenter", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ASubjectID", IsOutput = false, Value = _subjectID == null ? DBNull.Value : (object)_subjectID }, 
					new Parameter { Name = "@AState", IsOutput = false, Value = _state == null ? DBNull.Value : (object)_state }, 
					new Parameter { Name = "@ATicketAnswerState", IsOutput = false, Value = _ticketAnswerState == null ? DBNull.Value : (object)_ticketAnswerState }, 
					new Parameter { Name = "@ATrackingCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_trackingCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_trackingCode) }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@AOwnerPositionID", IsOutput = false, Value = _ownerPositionID == null ? DBNull.Value : (object)_ownerPositionID }, 
					new Parameter { Name = "@AOwnerFullName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ownerFullName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ownerFullName) }, 
					new Parameter { Name = "@AOwnerID", IsOutput = false, Value = _ownerID == null ? DBNull.Value : (object)_ownerID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@ACurrentUserType", IsOutput = false, Value = _currentUserType == null ? DBNull.Value : (object)_currentUserType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ListForCallCenterAsync(Guid? _applicationID, Guid? _subjectID, byte? _state, byte? _ticketAnswerState, string _trackingCode, Guid? _departmentID, string _title, Guid? _positionID, Guid? _ownerPositionID, string _ownerFullName, Guid? _ownerID, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentUserID, byte? _currentUserType, int? timeout = null)
{
	using(var cmd = GetCommand_ListForCallCenter(_applicationID, _subjectID, _state, _ticketAnswerState, _trackingCode, _departmentID, _title, _positionID, _ownerPositionID, _ownerFullName, _ownerID, _pageSize, _pageIndex, _sortExp, _currentUserID, _currentUserType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ListForCallCenterDapperAsync<T>(Guid? _applicationID, Guid? _subjectID, byte? _state, byte? _ticketAnswerState, string _trackingCode, Guid? _departmentID, string _title, Guid? _positionID, Guid? _ownerPositionID, string _ownerFullName, Guid? _ownerID, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentUserID, byte? _currentUserType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spListForCallCenter",new {AApplicationID=_applicationID,ASubjectID=_subjectID,AState=_state,ATicketAnswerState=_ticketAnswerState,ATrackingCode=string.IsNullOrWhiteSpace(_trackingCode) ? _trackingCode : ReplaceArabicWithPersianChars(_trackingCode),ADepartmentID=_departmentID,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),APositionID=_positionID,AOwnerPositionID=_ownerPositionID,AOwnerFullName=string.IsNullOrWhiteSpace(_ownerFullName) ? _ownerFullName : ReplaceArabicWithPersianChars(_ownerFullName),AOwnerID=_ownerID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),ACurrentUserID=_currentUserID,ACurrentUserType=_currentUserType} , timeout );
}

public ResultSet ListForCallCenter(Guid? _applicationID, Guid? _subjectID, byte? _state, byte? _ticketAnswerState, string _trackingCode, Guid? _departmentID, string _title, Guid? _positionID, Guid? _ownerPositionID, string _ownerFullName, Guid? _ownerID, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentUserID, byte? _currentUserType, int? timeout = null)
{
	using(var cmd = GetCommand_ListForCallCenter(_applicationID, _subjectID, _state, _ticketAnswerState, _trackingCode, _departmentID, _title, _positionID, _ownerPositionID, _ownerFullName, _ownerID, _pageSize, _pageIndex, _sortExp, _currentUserID, _currentUserType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteNotificationCondition

public System.Data.SqlClient.SqlCommand GetCommand_DeleteNotificationCondition(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteNotificationCondition", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteNotificationConditionAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteNotificationCondition(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteNotificationConditionDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteNotificationCondition",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteNotificationCondition(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteNotificationCondition(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNotificationConditions

public System.Data.SqlClient.SqlCommand GetCommand_GetNotificationConditions(Guid? _notificationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetNotificationConditions", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ANotificationID", IsOutput = false, Value = _notificationID == null ? DBNull.Value : (object)_notificationID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNotificationConditionsAsync(Guid? _notificationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNotificationConditions(_notificationID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNotificationConditionsDapperAsync<T>(Guid? _notificationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetNotificationConditions",new {ANotificationID=_notificationID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNotificationConditions(Guid? _notificationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNotificationConditions(_notificationID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTicketSubjects

public System.Data.SqlClient.SqlCommand GetCommand_GetTicketSubjects(Guid? _applicationID, string _name, byte? _enable, Guid? _fAQGroupID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetTicketSubjects", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AEnable", IsOutput = false, Value = _enable == null ? DBNull.Value : (object)_enable }, 
					new Parameter { Name = "@AFAQGroupID", IsOutput = false, Value = _fAQGroupID == null ? DBNull.Value : (object)_fAQGroupID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTicketSubjectsAsync(Guid? _applicationID, string _name, byte? _enable, Guid? _fAQGroupID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketSubjects(_applicationID, _name, _enable, _fAQGroupID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTicketSubjectsDapperAsync<T>(Guid? _applicationID, string _name, byte? _enable, Guid? _fAQGroupID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetTicketSubjects",new {AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AEnable=_enable,AFAQGroupID=_fAQGroupID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetTicketSubjects(Guid? _applicationID, string _name, byte? _enable, Guid? _fAQGroupID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketSubjects(_applicationID, _name, _enable, _fAQGroupID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteTicket

public System.Data.SqlClient.SqlCommand GetCommand_DeleteTicket(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteTicket", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteTicketAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteTicket(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteTicketDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteTicket",new {AID=_id} , timeout );
}

public ResultSet DeleteTicket(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteTicket(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTicket

public System.Data.SqlClient.SqlCommand GetCommand_GetTicket(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetTicket", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTicketAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicket(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTicketDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetTicket",new {AID=_id} , timeout );
}

public ResultSet GetTicket(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicket(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTickets

public System.Data.SqlClient.SqlCommand GetCommand_GetTickets(Guid? _applicationID, Guid? _subjectID, byte? _state, byte? _ticketAnswerState, string _trackingCode, Guid? _departmentID, string _title, Guid? _positionID, Guid? _ownerPositionID, string _ownerFullName, Guid? _ownerID, byte? _creationTicketType, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentUserID, byte? _currentUserType, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetTickets", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ASubjectID", IsOutput = false, Value = _subjectID == null ? DBNull.Value : (object)_subjectID }, 
					new Parameter { Name = "@AState", IsOutput = false, Value = _state == null ? DBNull.Value : (object)_state }, 
					new Parameter { Name = "@ATicketAnswerState", IsOutput = false, Value = _ticketAnswerState == null ? DBNull.Value : (object)_ticketAnswerState }, 
					new Parameter { Name = "@ATrackingCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_trackingCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_trackingCode) }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@AOwnerPositionID", IsOutput = false, Value = _ownerPositionID == null ? DBNull.Value : (object)_ownerPositionID }, 
					new Parameter { Name = "@AOwnerFullName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ownerFullName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ownerFullName) }, 
					new Parameter { Name = "@AOwnerID", IsOutput = false, Value = _ownerID == null ? DBNull.Value : (object)_ownerID }, 
					new Parameter { Name = "@ACreationTicketType", IsOutput = false, Value = _creationTicketType == null ? DBNull.Value : (object)_creationTicketType }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@ACurrentUserType", IsOutput = false, Value = _currentUserType == null ? DBNull.Value : (object)_currentUserType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTicketsAsync(Guid? _applicationID, Guid? _subjectID, byte? _state, byte? _ticketAnswerState, string _trackingCode, Guid? _departmentID, string _title, Guid? _positionID, Guid? _ownerPositionID, string _ownerFullName, Guid? _ownerID, byte? _creationTicketType, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentUserID, byte? _currentUserType, int? timeout = null)
{
	using(var cmd = GetCommand_GetTickets(_applicationID, _subjectID, _state, _ticketAnswerState, _trackingCode, _departmentID, _title, _positionID, _ownerPositionID, _ownerFullName, _ownerID, _creationTicketType, _pageSize, _pageIndex, _sortExp, _currentUserID, _currentUserType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTicketsDapperAsync<T>(Guid? _applicationID, Guid? _subjectID, byte? _state, byte? _ticketAnswerState, string _trackingCode, Guid? _departmentID, string _title, Guid? _positionID, Guid? _ownerPositionID, string _ownerFullName, Guid? _ownerID, byte? _creationTicketType, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentUserID, byte? _currentUserType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetTickets",new {AApplicationID=_applicationID,ASubjectID=_subjectID,AState=_state,ATicketAnswerState=_ticketAnswerState,ATrackingCode=string.IsNullOrWhiteSpace(_trackingCode) ? _trackingCode : ReplaceArabicWithPersianChars(_trackingCode),ADepartmentID=_departmentID,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),APositionID=_positionID,AOwnerPositionID=_ownerPositionID,AOwnerFullName=string.IsNullOrWhiteSpace(_ownerFullName) ? _ownerFullName : ReplaceArabicWithPersianChars(_ownerFullName),AOwnerID=_ownerID,ACreationTicketType=_creationTicketType,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),ACurrentUserID=_currentUserID,ACurrentUserType=_currentUserType} , timeout );
}

public ResultSet GetTickets(Guid? _applicationID, Guid? _subjectID, byte? _state, byte? _ticketAnswerState, string _trackingCode, Guid? _departmentID, string _title, Guid? _positionID, Guid? _ownerPositionID, string _ownerFullName, Guid? _ownerID, byte? _creationTicketType, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentUserID, byte? _currentUserType, int? timeout = null)
{
	using(var cmd = GetCommand_GetTickets(_applicationID, _subjectID, _state, _ticketAnswerState, _trackingCode, _departmentID, _title, _positionID, _ownerPositionID, _ownerFullName, _ownerID, _creationTicketType, _pageSize, _pageIndex, _sortExp, _currentUserID, _currentUserType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTicketsForCallCenter

public System.Data.SqlClient.SqlCommand GetCommand_GetTicketsForCallCenter(Guid? _applicationID, Guid? _subjectID, byte? _state, byte? _ticketAnswerState, string _trackingCode, Guid? _departmentID, string _title, Guid? _positionID, Guid? _ownerPositionID, string _ownerFullName, Guid? _ownerID, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentUserID, byte? _currentUserType, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetTicketsForCallCenter", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ASubjectID", IsOutput = false, Value = _subjectID == null ? DBNull.Value : (object)_subjectID }, 
					new Parameter { Name = "@AState", IsOutput = false, Value = _state == null ? DBNull.Value : (object)_state }, 
					new Parameter { Name = "@ATicketAnswerState", IsOutput = false, Value = _ticketAnswerState == null ? DBNull.Value : (object)_ticketAnswerState }, 
					new Parameter { Name = "@ATrackingCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_trackingCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_trackingCode) }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@AOwnerPositionID", IsOutput = false, Value = _ownerPositionID == null ? DBNull.Value : (object)_ownerPositionID }, 
					new Parameter { Name = "@AOwnerFullName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_ownerFullName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_ownerFullName) }, 
					new Parameter { Name = "@AOwnerID", IsOutput = false, Value = _ownerID == null ? DBNull.Value : (object)_ownerID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@ACurrentUserType", IsOutput = false, Value = _currentUserType == null ? DBNull.Value : (object)_currentUserType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTicketsForCallCenterAsync(Guid? _applicationID, Guid? _subjectID, byte? _state, byte? _ticketAnswerState, string _trackingCode, Guid? _departmentID, string _title, Guid? _positionID, Guid? _ownerPositionID, string _ownerFullName, Guid? _ownerID, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentUserID, byte? _currentUserType, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketsForCallCenter(_applicationID, _subjectID, _state, _ticketAnswerState, _trackingCode, _departmentID, _title, _positionID, _ownerPositionID, _ownerFullName, _ownerID, _pageSize, _pageIndex, _sortExp, _currentUserID, _currentUserType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTicketsForCallCenterDapperAsync<T>(Guid? _applicationID, Guid? _subjectID, byte? _state, byte? _ticketAnswerState, string _trackingCode, Guid? _departmentID, string _title, Guid? _positionID, Guid? _ownerPositionID, string _ownerFullName, Guid? _ownerID, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentUserID, byte? _currentUserType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetTicketsForCallCenter",new {AApplicationID=_applicationID,ASubjectID=_subjectID,AState=_state,ATicketAnswerState=_ticketAnswerState,ATrackingCode=string.IsNullOrWhiteSpace(_trackingCode) ? _trackingCode : ReplaceArabicWithPersianChars(_trackingCode),ADepartmentID=_departmentID,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),APositionID=_positionID,AOwnerPositionID=_ownerPositionID,AOwnerFullName=string.IsNullOrWhiteSpace(_ownerFullName) ? _ownerFullName : ReplaceArabicWithPersianChars(_ownerFullName),AOwnerID=_ownerID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),ACurrentUserID=_currentUserID,ACurrentUserType=_currentUserType} , timeout );
}

public ResultSet GetTicketsForCallCenter(Guid? _applicationID, Guid? _subjectID, byte? _state, byte? _ticketAnswerState, string _trackingCode, Guid? _departmentID, string _title, Guid? _positionID, Guid? _ownerPositionID, string _ownerFullName, Guid? _ownerID, int? _pageSize, int? _pageIndex, string _sortExp, Guid? _currentUserID, byte? _currentUserType, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketsForCallCenter(_applicationID, _subjectID, _state, _ticketAnswerState, _trackingCode, _departmentID, _title, _positionID, _ownerPositionID, _ownerFullName, _ownerID, _pageSize, _pageIndex, _sortExp, _currentUserID, _currentUserType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyTicket

public System.Data.SqlClient.SqlCommand GetCommand_ModifyTicket(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _subjectID, byte? _state, string _trackingCode, byte? _priority, string _title, Guid? _positionID, Guid? _ownerID, Guid? _ownerPositionID, Guid? _departmentID, byte? _creationTicketType, string _firstName, string _lastName, string _nationalCode, string _cellPhone, Guid? _userID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyTicket", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ASubjectID", IsOutput = false, Value = _subjectID == null ? DBNull.Value : (object)_subjectID }, 
					new Parameter { Name = "@AState", IsOutput = false, Value = _state == null ? DBNull.Value : (object)_state }, 
					new Parameter { Name = "@ATrackingCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_trackingCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_trackingCode) }, 
					new Parameter { Name = "@APriority", IsOutput = false, Value = _priority == null ? DBNull.Value : (object)_priority }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@AOwnerID", IsOutput = false, Value = _ownerID == null ? DBNull.Value : (object)_ownerID }, 
					new Parameter { Name = "@AOwnerPositionID", IsOutput = false, Value = _ownerPositionID == null ? DBNull.Value : (object)_ownerPositionID }, 
					new Parameter { Name = "@ADepartmentID", IsOutput = false, Value = _departmentID == null ? DBNull.Value : (object)_departmentID }, 
					new Parameter { Name = "@ACreationTicketType", IsOutput = false, Value = _creationTicketType == null ? DBNull.Value : (object)_creationTicketType }, 
					new Parameter { Name = "@AFirstName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_firstName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_firstName) }, 
					new Parameter { Name = "@ALastName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastName) }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ACellPhone", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cellPhone) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cellPhone) }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyTicketAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _subjectID, byte? _state, string _trackingCode, byte? _priority, string _title, Guid? _positionID, Guid? _ownerID, Guid? _ownerPositionID, Guid? _departmentID, byte? _creationTicketType, string _firstName, string _lastName, string _nationalCode, string _cellPhone, Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyTicket(_isNewRecord, _id, _applicationID, _subjectID, _state, _trackingCode, _priority, _title, _positionID, _ownerID, _ownerPositionID, _departmentID, _creationTicketType, _firstName, _lastName, _nationalCode, _cellPhone, _userID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyTicketDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _subjectID, byte? _state, string _trackingCode, byte? _priority, string _title, Guid? _positionID, Guid? _ownerID, Guid? _ownerPositionID, Guid? _departmentID, byte? _creationTicketType, string _firstName, string _lastName, string _nationalCode, string _cellPhone, Guid? _userID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyTicket",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,ASubjectID=_subjectID,AState=_state,ATrackingCode=string.IsNullOrWhiteSpace(_trackingCode) ? _trackingCode : ReplaceArabicWithPersianChars(_trackingCode),APriority=_priority,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),APositionID=_positionID,AOwnerID=_ownerID,AOwnerPositionID=_ownerPositionID,ADepartmentID=_departmentID,ACreationTicketType=_creationTicketType,AFirstName=string.IsNullOrWhiteSpace(_firstName) ? _firstName : ReplaceArabicWithPersianChars(_firstName),ALastName=string.IsNullOrWhiteSpace(_lastName) ? _lastName : ReplaceArabicWithPersianChars(_lastName),ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ACellPhone=string.IsNullOrWhiteSpace(_cellPhone) ? _cellPhone : ReplaceArabicWithPersianChars(_cellPhone),AUserID=_userID} , timeout );
}

public ResultSet ModifyTicket(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _subjectID, byte? _state, string _trackingCode, byte? _priority, string _title, Guid? _positionID, Guid? _ownerID, Guid? _ownerPositionID, Guid? _departmentID, byte? _creationTicketType, string _firstName, string _lastName, string _nationalCode, string _cellPhone, Guid? _userID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyTicket(_isNewRecord, _id, _applicationID, _subjectID, _state, _trackingCode, _priority, _title, _positionID, _ownerID, _ownerPositionID, _departmentID, _creationTicketType, _firstName, _lastName, _nationalCode, _cellPhone, _userID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region RatingTicket

public System.Data.SqlClient.SqlCommand GetCommand_RatingTicket(Guid? _ticketID, byte? _score, int? timeout = null)
{
var cmd = base.CreateCommand("app.spRatingTicket", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ATicketID", IsOutput = false, Value = _ticketID == null ? DBNull.Value : (object)_ticketID }, 
					new Parameter { Name = "@AScore", IsOutput = false, Value = _score == null ? DBNull.Value : (object)_score }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> RatingTicketAsync(Guid? _ticketID, byte? _score, int? timeout = null)
{
	using(var cmd = GetCommand_RatingTicket(_ticketID, _score, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> RatingTicketDapperAsync<T>(Guid? _ticketID, byte? _score, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spRatingTicket",new {ATicketID=_ticketID,AScore=_score} , timeout );
}

public ResultSet RatingTicket(Guid? _ticketID, byte? _score, int? timeout = null)
{
	using(var cmd = GetCommand_RatingTicket(_ticketID, _score, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetTicketOwner

public System.Data.SqlClient.SqlCommand GetCommand_SetTicketOwner(Guid? _ownerID, Guid? _ownerPositionID, Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetTicketOwner", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AOwnerID", IsOutput = false, Value = _ownerID == null ? DBNull.Value : (object)_ownerID }, 
					new Parameter { Name = "@AOwnerPositionID", IsOutput = false, Value = _ownerPositionID == null ? DBNull.Value : (object)_ownerPositionID }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetTicketOwnerAsync(Guid? _ownerID, Guid? _ownerPositionID, Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_SetTicketOwner(_ownerID, _ownerPositionID, _id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetTicketOwnerDapperAsync<T>(Guid? _ownerID, Guid? _ownerPositionID, Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetTicketOwner",new {AOwnerID=_ownerID,AOwnerPositionID=_ownerPositionID,AID=_id} , timeout );
}

public ResultSet SetTicketOwner(Guid? _ownerID, Guid? _ownerPositionID, Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_SetTicketOwner(_ownerID, _ownerPositionID, _id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteTicketSequence

public System.Data.SqlClient.SqlCommand GetCommand_DeleteTicketSequence(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteTicketSequence", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteTicketSequenceAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteTicketSequence(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteTicketSequenceDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteTicketSequence",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteTicketSequence(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteTicketSequence(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteTicketSubject

public System.Data.SqlClient.SqlCommand GetCommand_DeleteTicketSubject(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteTicketSubject", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteTicketSubjectAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteTicketSubject(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteTicketSubjectDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteTicketSubject",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteTicketSubject(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteTicketSubject(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteTicketSubjectUser

public System.Data.SqlClient.SqlCommand GetCommand_DeleteTicketSubjectUser(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteTicketSubjectUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteTicketSubjectUserAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteTicketSubjectUser(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteTicketSubjectUserDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteTicketSubjectUser",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteTicketSubjectUser(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteTicketSubjectUser(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTicketSequence

public System.Data.SqlClient.SqlCommand GetCommand_GetTicketSequence(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetTicketSequence", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTicketSequenceAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketSequence(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTicketSequenceDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetTicketSequence",new {AID=_id} , timeout );
}

public ResultSet GetTicketSequence(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketSequence(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyTicketSequence

public System.Data.SqlClient.SqlCommand GetCommand_ModifyTicketSequence(bool? _isNewRecord, Guid? _id, Guid? _positionID, Guid? _ticketID, Guid? _userID, string _content, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyTicketSequence", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@ATicketID", IsOutput = false, Value = _ticketID == null ? DBNull.Value : (object)_ticketID }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_content) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_content) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyTicketSequenceAsync(bool? _isNewRecord, Guid? _id, Guid? _positionID, Guid? _ticketID, Guid? _userID, string _content, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyTicketSequence(_isNewRecord, _id, _positionID, _ticketID, _userID, _content, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyTicketSequenceDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _positionID, Guid? _ticketID, Guid? _userID, string _content, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyTicketSequence",new {AIsNewRecord=_isNewRecord,AID=_id,APositionID=_positionID,ATicketID=_ticketID,AUserID=_userID,AContent=string.IsNullOrWhiteSpace(_content) ? _content : ReplaceArabicWithPersianChars(_content),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyTicketSequence(bool? _isNewRecord, Guid? _id, Guid? _positionID, Guid? _ticketID, Guid? _userID, string _content, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyTicketSequence(_isNewRecord, _id, _positionID, _ticketID, _userID, _content, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetTicketSequenceReadDate

public System.Data.SqlClient.SqlCommand GetCommand_SetTicketSequenceReadDate(Guid? _id, Guid? _currentUserPositionID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetTicketSequenceReadDate", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentUserPositionID", IsOutput = false, Value = _currentUserPositionID == null ? DBNull.Value : (object)_currentUserPositionID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetTicketSequenceReadDateAsync(Guid? _id, Guid? _currentUserPositionID, int? timeout = null)
{
	using(var cmd = GetCommand_SetTicketSequenceReadDate(_id, _currentUserPositionID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetTicketSequenceReadDateDapperAsync<T>(Guid? _id, Guid? _currentUserPositionID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetTicketSequenceReadDate",new {AID=_id,ACurrentUserPositionID=_currentUserPositionID} , timeout );
}

public ResultSet SetTicketSequenceReadDate(Guid? _id, Guid? _currentUserPositionID, int? timeout = null)
{
	using(var cmd = GetCommand_SetTicketSequenceReadDate(_id, _currentUserPositionID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTicketSubject

public System.Data.SqlClient.SqlCommand GetCommand_GetTicketSubject(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetTicketSubject", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTicketSubjectAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketSubject(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTicketSubjectDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetTicketSubject",new {AID=_id} , timeout );
}

public ResultSet GetTicketSubject(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketSubject(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyTicketSubject

public System.Data.SqlClient.SqlCommand GetCommand_ModifyTicketSubject(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, bool? _enable, string _description, Guid? _fAQGroupID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyTicketSubject", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AEnable", IsOutput = false, Value = _enable == null ? DBNull.Value : (object)_enable }, 
					new Parameter { Name = "@ADescription", IsOutput = false, Value = string.IsNullOrWhiteSpace(_description) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_description) }, 
					new Parameter { Name = "@AFAQGroupID", IsOutput = false, Value = _fAQGroupID == null ? DBNull.Value : (object)_fAQGroupID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyTicketSubjectAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, bool? _enable, string _description, Guid? _fAQGroupID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyTicketSubject(_isNewRecord, _id, _applicationID, _name, _enable, _description, _fAQGroupID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyTicketSubjectDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, bool? _enable, string _description, Guid? _fAQGroupID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyTicketSubject",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AEnable=_enable,ADescription=string.IsNullOrWhiteSpace(_description) ? _description : ReplaceArabicWithPersianChars(_description),AFAQGroupID=_fAQGroupID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyTicketSubject(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, bool? _enable, string _description, Guid? _fAQGroupID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyTicketSubject(_isNewRecord, _id, _applicationID, _name, _enable, _description, _fAQGroupID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetTicketSubjectOrders

public System.Data.SqlClient.SqlCommand GetCommand_SetTicketSubjectOrders(string _orders, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetTicketSubjectOrders", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AOrders", IsOutput = false, Value = string.IsNullOrWhiteSpace(_orders) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_orders) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetTicketSubjectOrdersAsync(string _orders, int? timeout = null)
{
	using(var cmd = GetCommand_SetTicketSubjectOrders(_orders, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetTicketSubjectOrdersDapperAsync<T>(string _orders, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetTicketSubjectOrders",new {AOrders=string.IsNullOrWhiteSpace(_orders) ? _orders : ReplaceArabicWithPersianChars(_orders)} , timeout );
}

public ResultSet SetTicketSubjectOrders(string _orders, int? timeout = null)
{
	using(var cmd = GetCommand_SetTicketSubjectOrders(_orders, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAllUsersBySubjects

public System.Data.SqlClient.SqlCommand GetCommand_GetAllUsersBySubjects(Guid? _applicationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetAllUsersBySubjects", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAllUsersBySubjectsAsync(Guid? _applicationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetAllUsersBySubjects(_applicationID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAllUsersBySubjectsDapperAsync<T>(Guid? _applicationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetAllUsersBySubjects",new {AApplicationID=_applicationID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetAllUsersBySubjects(Guid? _applicationID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetAllUsersBySubjects(_applicationID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTicketSubjectUser

public System.Data.SqlClient.SqlCommand GetCommand_GetTicketSubjectUser(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetTicketSubjectUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTicketSubjectUserAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketSubjectUser(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTicketSubjectUserDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetTicketSubjectUser",new {AID=_id} , timeout );
}

public ResultSet GetTicketSubjectUser(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketSubjectUser(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTicketSubjectUsers

public System.Data.SqlClient.SqlCommand GetCommand_GetTicketSubjectUsers(Guid? _ticketSubjectID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetTicketSubjectUsers", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ATicketSubjectID", IsOutput = false, Value = _ticketSubjectID == null ? DBNull.Value : (object)_ticketSubjectID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTicketSubjectUsersAsync(Guid? _ticketSubjectID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketSubjectUsers(_ticketSubjectID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTicketSubjectUsersDapperAsync<T>(Guid? _ticketSubjectID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetTicketSubjectUsers",new {ATicketSubjectID=_ticketSubjectID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetTicketSubjectUsers(Guid? _ticketSubjectID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketSubjectUsers(_ticketSubjectID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyTicketSubjectUser

public System.Data.SqlClient.SqlCommand GetCommand_ModifyTicketSubjectUser(bool? _isNewRecord, Guid? _id, Guid? _ticketSubjectID, Guid? _userID, Guid? _positionID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyTicketSubjectUser", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ATicketSubjectID", IsOutput = false, Value = _ticketSubjectID == null ? DBNull.Value : (object)_ticketSubjectID }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@APositionID", IsOutput = false, Value = _positionID == null ? DBNull.Value : (object)_positionID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyTicketSubjectUserAsync(bool? _isNewRecord, Guid? _id, Guid? _ticketSubjectID, Guid? _userID, Guid? _positionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyTicketSubjectUser(_isNewRecord, _id, _ticketSubjectID, _userID, _positionID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyTicketSubjectUserDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _ticketSubjectID, Guid? _userID, Guid? _positionID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyTicketSubjectUser",new {AIsNewRecord=_isNewRecord,AID=_id,ATicketSubjectID=_ticketSubjectID,AUserID=_userID,APositionID=_positionID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyTicketSubjectUser(bool? _isNewRecord, Guid? _id, Guid? _ticketSubjectID, Guid? _userID, Guid? _positionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyTicketSubjectUser(_isNewRecord, _id, _ticketSubjectID, _userID, _positionID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetAnnouncementOrders

public System.Data.SqlClient.SqlCommand GetCommand_SetAnnouncementOrders(string _orders, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetAnnouncementOrders", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AOrders", IsOutput = false, Value = string.IsNullOrWhiteSpace(_orders) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_orders) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetAnnouncementOrdersAsync(string _orders, int? timeout = null)
{
	using(var cmd = GetCommand_SetAnnouncementOrders(_orders, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetAnnouncementOrdersDapperAsync<T>(string _orders, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetAnnouncementOrders",new {AOrders=string.IsNullOrWhiteSpace(_orders) ? _orders : ReplaceArabicWithPersianChars(_orders)} , timeout );
}

public ResultSet SetAnnouncementOrders(string _orders, int? timeout = null)
{
	using(var cmd = GetCommand_SetAnnouncementOrders(_orders, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyAnnouncement

public System.Data.SqlClient.SqlCommand GetCommand_ModifyAnnouncement(bool? _isNewRecord, Guid? _id, Guid? _applicationID, byte? _type, string _title, string _content, string _extendedContent, bool? _enable, DateTime? _releaseDate, DateTime? _dueDate, int? _order, Guid? _userID, bool? _pinned, bool? _allUsers, bool? _authorizedUsers, bool? _unAuthorizedUsers, bool? _expanded, byte? _priority, Guid? _clientID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyAnnouncement", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_content) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_content) }, 
					new Parameter { Name = "@AExtendedContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_extendedContent) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_extendedContent) }, 
					new Parameter { Name = "@AEnable", IsOutput = false, Value = _enable == null ? DBNull.Value : (object)_enable }, 
					new Parameter { Name = "@AReleaseDate", IsOutput = false, Value = _releaseDate == null ? DBNull.Value : (object)_releaseDate }, 
					new Parameter { Name = "@ADueDate", IsOutput = false, Value = _dueDate == null ? DBNull.Value : (object)_dueDate }, 
					new Parameter { Name = "@AOrder", IsOutput = false, Value = _order == null ? DBNull.Value : (object)_order }, 
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@APinned", IsOutput = false, Value = _pinned == null ? DBNull.Value : (object)_pinned }, 
					new Parameter { Name = "@AAllUsers", IsOutput = false, Value = _allUsers == null ? DBNull.Value : (object)_allUsers }, 
					new Parameter { Name = "@AAuthorizedUsers", IsOutput = false, Value = _authorizedUsers == null ? DBNull.Value : (object)_authorizedUsers }, 
					new Parameter { Name = "@AUnAuthorizedUsers", IsOutput = false, Value = _unAuthorizedUsers == null ? DBNull.Value : (object)_unAuthorizedUsers }, 
					new Parameter { Name = "@AExpanded", IsOutput = false, Value = _expanded == null ? DBNull.Value : (object)_expanded }, 
					new Parameter { Name = "@APriority", IsOutput = false, Value = _priority == null ? DBNull.Value : (object)_priority }, 
					new Parameter { Name = "@AClientID", IsOutput = false, Value = _clientID == null ? DBNull.Value : (object)_clientID }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyAnnouncementAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, byte? _type, string _title, string _content, string _extendedContent, bool? _enable, DateTime? _releaseDate, DateTime? _dueDate, int? _order, Guid? _userID, bool? _pinned, bool? _allUsers, bool? _authorizedUsers, bool? _unAuthorizedUsers, bool? _expanded, byte? _priority, Guid? _clientID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyAnnouncement(_isNewRecord, _id, _applicationID, _type, _title, _content, _extendedContent, _enable, _releaseDate, _dueDate, _order, _userID, _pinned, _allUsers, _authorizedUsers, _unAuthorizedUsers, _expanded, _priority, _clientID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyAnnouncementDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, byte? _type, string _title, string _content, string _extendedContent, bool? _enable, DateTime? _releaseDate, DateTime? _dueDate, int? _order, Guid? _userID, bool? _pinned, bool? _allUsers, bool? _authorizedUsers, bool? _unAuthorizedUsers, bool? _expanded, byte? _priority, Guid? _clientID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyAnnouncement",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,AType=_type,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AContent=string.IsNullOrWhiteSpace(_content) ? _content : ReplaceArabicWithPersianChars(_content),AExtendedContent=string.IsNullOrWhiteSpace(_extendedContent) ? _extendedContent : ReplaceArabicWithPersianChars(_extendedContent),AEnable=_enable,AReleaseDate=_releaseDate,ADueDate=_dueDate,AOrder=_order,AUserID=_userID,APinned=_pinned,AAllUsers=_allUsers,AAuthorizedUsers=_authorizedUsers,AUnAuthorizedUsers=_unAuthorizedUsers,AExpanded=_expanded,APriority=_priority,AClientID=_clientID} , timeout );
}

public ResultSet ModifyAnnouncement(bool? _isNewRecord, Guid? _id, Guid? _applicationID, byte? _type, string _title, string _content, string _extendedContent, bool? _enable, DateTime? _releaseDate, DateTime? _dueDate, int? _order, Guid? _userID, bool? _pinned, bool? _allUsers, bool? _authorizedUsers, bool? _unAuthorizedUsers, bool? _expanded, byte? _priority, Guid? _clientID, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyAnnouncement(_isNewRecord, _id, _applicationID, _type, _title, _content, _extendedContent, _enable, _releaseDate, _dueDate, _order, _userID, _pinned, _allUsers, _authorizedUsers, _unAuthorizedUsers, _expanded, _priority, _clientID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAnnouncement

public System.Data.SqlClient.SqlCommand GetCommand_GetAnnouncement(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetAnnouncement", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAnnouncementAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetAnnouncement(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAnnouncementDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetAnnouncement",new {AID=_id} , timeout );
}

public ResultSet GetAnnouncement(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetAnnouncement(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAnnouncements

public System.Data.SqlClient.SqlCommand GetCommand_GetAnnouncements(Guid? _userID, Guid? _applicationID, Guid? _currentUserProvinceID, string _title, byte? _enable, byte? _type, Guid? _clientID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetAnnouncements", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AUserID", IsOutput = false, Value = _userID == null ? DBNull.Value : (object)_userID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserProvinceID", IsOutput = false, Value = _currentUserProvinceID == null ? DBNull.Value : (object)_currentUserProvinceID }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AEnable", IsOutput = false, Value = _enable == null ? DBNull.Value : (object)_enable }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@AClientID", IsOutput = false, Value = _clientID == null ? DBNull.Value : (object)_clientID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAnnouncementsAsync(Guid? _userID, Guid? _applicationID, Guid? _currentUserProvinceID, string _title, byte? _enable, byte? _type, Guid? _clientID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetAnnouncements(_userID, _applicationID, _currentUserProvinceID, _title, _enable, _type, _clientID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAnnouncementsDapperAsync<T>(Guid? _userID, Guid? _applicationID, Guid? _currentUserProvinceID, string _title, byte? _enable, byte? _type, Guid? _clientID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetAnnouncements",new {AUserID=_userID,AApplicationID=_applicationID,ACurrentUserProvinceID=_currentUserProvinceID,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AEnable=_enable,AType=_type,AClientID=_clientID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetAnnouncements(Guid? _userID, Guid? _applicationID, Guid? _currentUserProvinceID, string _title, byte? _enable, byte? _type, Guid? _clientID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetAnnouncements(_userID, _applicationID, _currentUserProvinceID, _title, _enable, _type, _clientID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAnnouncementPositionTypes

public System.Data.SqlClient.SqlCommand GetCommand_GetAnnouncementPositionTypes(Guid? _announcementID, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetAnnouncementPositionTypes", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AAnnouncementID", IsOutput = false, Value = _announcementID == null ? DBNull.Value : (object)_announcementID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAnnouncementPositionTypesAsync(Guid? _announcementID, int? timeout = null)
{
	using(var cmd = GetCommand_GetAnnouncementPositionTypes(_announcementID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAnnouncementPositionTypesDapperAsync<T>(Guid? _announcementID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetAnnouncementPositionTypes",new {AAnnouncementID=_announcementID} , timeout );
}

public ResultSet GetAnnouncementPositionTypes(Guid? _announcementID, int? timeout = null)
{
	using(var cmd = GetCommand_GetAnnouncementPositionTypes(_announcementID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteApplicationSurvey

public System.Data.SqlClient.SqlCommand GetCommand_DeleteApplicationSurvey(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spDeleteApplicationSurvey", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACurrentPositionID", IsOutput = false, Value = _currentPositionID == null ? DBNull.Value : (object)_currentPositionID }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteApplicationSurveyAsync(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteApplicationSurvey(_id, _currentPositionID, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteApplicationSurveyDapperAsync<T>(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spDeleteApplicationSurvey",new {AID=_id,ACurrentPositionID=_currentPositionID,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteApplicationSurvey(Guid? _id, Guid? _currentPositionID, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteApplicationSurvey(_id, _currentPositionID, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetFAQGroupOrders

public System.Data.SqlClient.SqlCommand GetCommand_SetFAQGroupOrders(string _orders, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetFAQGroupOrders", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AOrders", IsOutput = false, Value = string.IsNullOrWhiteSpace(_orders) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_orders) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetFAQGroupOrdersAsync(string _orders, int? timeout = null)
{
	using(var cmd = GetCommand_SetFAQGroupOrders(_orders, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetFAQGroupOrdersDapperAsync<T>(string _orders, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetFAQGroupOrders",new {AOrders=string.IsNullOrWhiteSpace(_orders) ? _orders : ReplaceArabicWithPersianChars(_orders)} , timeout );
}

public ResultSet SetFAQGroupOrders(string _orders, int? timeout = null)
{
	using(var cmd = GetCommand_SetFAQGroupOrders(_orders, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationSurvey

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationSurvey(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetApplicationSurvey", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationSurveyAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurvey(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationSurveyDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetApplicationSurvey",new {AID=_id} , timeout );
}

public ResultSet GetApplicationSurvey(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurvey(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationSurveys

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationSurveys(Guid? _applicationID, string _name, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetApplicationSurveys", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationSurveysAsync(Guid? _applicationID, string _name, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveys(_applicationID, _name, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationSurveysDapperAsync<T>(Guid? _applicationID, string _name, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetApplicationSurveys",new {AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetApplicationSurveys(Guid? _applicationID, string _name, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveys(_applicationID, _name, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyApplicationSurvey

public System.Data.SqlClient.SqlCommand GetCommand_ModifyApplicationSurvey(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, bool? _enable, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("app.spModifyApplicationSurvey", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AEnable", IsOutput = false, Value = _enable == null ? DBNull.Value : (object)_enable }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyApplicationSurveyAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, bool? _enable, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationSurvey(_isNewRecord, _id, _applicationID, _name, _enable, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyApplicationSurveyDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, bool? _enable, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spModifyApplicationSurvey",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AEnable=_enable,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyApplicationSurvey(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, bool? _enable, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyApplicationSurvey(_isNewRecord, _id, _applicationID, _name, _enable, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region SetFAQOrders

public System.Data.SqlClient.SqlCommand GetCommand_SetFAQOrders(string _orders, int? timeout = null)
{
var cmd = base.CreateCommand("app.spSetFAQOrders", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AOrders", IsOutput = false, Value = string.IsNullOrWhiteSpace(_orders) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_orders) }, 
					new Parameter { Name = "@AResult", IsOutput = true }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> SetFAQOrdersAsync(string _orders, int? timeout = null)
{
	using(var cmd = GetCommand_SetFAQOrders(_orders, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> SetFAQOrdersDapperAsync<T>(string _orders, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spSetFAQOrders",new {AOrders=string.IsNullOrWhiteSpace(_orders) ? _orders : ReplaceArabicWithPersianChars(_orders)} , timeout );
}

public ResultSet SetFAQOrders(string _orders, int? timeout = null)
{
	using(var cmd = GetCommand_SetFAQOrders(_orders, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationSurveyAnswer

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationSurveyAnswer(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetApplicationSurveyAnswer", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationSurveyAnswerAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyAnswer(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationSurveyAnswerDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetApplicationSurveyAnswer",new {AID=_id} , timeout );
}

public ResultSet GetApplicationSurveyAnswer(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyAnswer(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetApplicationSurveyAnswers

public System.Data.SqlClient.SqlCommand GetCommand_GetApplicationSurveyAnswers(Guid? _participantID, Guid? _questionID, Guid? _choiceID, string _text, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("app.spGetApplicationSurveyAnswers", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParticipantID", IsOutput = false, Value = _participantID == null ? DBNull.Value : (object)_participantID }, 
					new Parameter { Name = "@AQuestionID", IsOutput = false, Value = _questionID == null ? DBNull.Value : (object)_questionID }, 
					new Parameter { Name = "@AChoiceID", IsOutput = false, Value = _choiceID == null ? DBNull.Value : (object)_choiceID }, 
					new Parameter { Name = "@AText", IsOutput = false, Value = string.IsNullOrWhiteSpace(_text) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_text) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetApplicationSurveyAnswersAsync(Guid? _participantID, Guid? _questionID, Guid? _choiceID, string _text, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyAnswers(_participantID, _questionID, _choiceID, _text, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetApplicationSurveyAnswersDapperAsync<T>(Guid? _participantID, Guid? _questionID, Guid? _choiceID, string _text, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("app.spGetApplicationSurveyAnswers",new {AParticipantID=_participantID,AQuestionID=_questionID,AChoiceID=_choiceID,AText=string.IsNullOrWhiteSpace(_text) ? _text : ReplaceArabicWithPersianChars(_text),APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetApplicationSurveyAnswers(Guid? _participantID, Guid? _questionID, Guid? _choiceID, string _text, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetApplicationSurveyAnswers(_participantID, _questionID, _choiceID, _text, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

}

public class PBL: Database
{
#region Constructors
public PBL(string connectionString)
	:base(connectionString){}

public PBL(string connectionString, IModelValueBinder modelValueBinder)
	:base(connectionString, modelValueBinder){}
#endregion

#region GetStatistics

public System.Data.SqlClient.SqlCommand GetCommand_GetStatistics(Guid? _currentUserID, Guid? _currentUserPositionID, Guid? _applicationID, byte? _currentUserPositionType, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetStatistics", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ACurrentUserID", IsOutput = false, Value = _currentUserID == null ? DBNull.Value : (object)_currentUserID }, 
					new Parameter { Name = "@ACurrentUserPositionID", IsOutput = false, Value = _currentUserPositionID == null ? DBNull.Value : (object)_currentUserPositionID }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@ACurrentUserPositionType", IsOutput = false, Value = _currentUserPositionType == null ? DBNull.Value : (object)_currentUserPositionType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetStatisticsAsync(Guid? _currentUserID, Guid? _currentUserPositionID, Guid? _applicationID, byte? _currentUserPositionType, int? timeout = null)
{
	using(var cmd = GetCommand_GetStatistics(_currentUserID, _currentUserPositionID, _applicationID, _currentUserPositionType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetStatisticsDapperAsync<T>(Guid? _currentUserID, Guid? _currentUserPositionID, Guid? _applicationID, byte? _currentUserPositionType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetStatistics",new {ACurrentUserID=_currentUserID,ACurrentUserPositionID=_currentUserPositionID,AApplicationID=_applicationID,ACurrentUserPositionType=_currentUserPositionType} , timeout );
}

public ResultSet GetStatistics(Guid? _currentUserID, Guid? _currentUserPositionID, Guid? _applicationID, byte? _currentUserPositionType, int? timeout = null)
{
	using(var cmd = GetCommand_GetStatistics(_currentUserID, _currentUserPositionID, _applicationID, _currentUserPositionType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetContactInfos

public System.Data.SqlClient.SqlCommand GetCommand_GetContactInfos(Guid? _parentID, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetContactInfos", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetContactInfosAsync(Guid? _parentID, int? timeout = null)
{
	using(var cmd = GetCommand_GetContactInfos(_parentID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetContactInfosDapperAsync<T>(Guid? _parentID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetContactInfos",new {AParentID=_parentID} , timeout );
}

public ResultSet GetContactInfos(Guid? _parentID, int? timeout = null)
{
	using(var cmd = GetCommand_GetContactInfos(_parentID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyContactInfos

public System.Data.SqlClient.SqlCommand GetCommand_ModifyContactInfos(Guid? _parentID, string _contactInfos, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spModifyContactInfos", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AContactInfos", IsOutput = false, Value = string.IsNullOrWhiteSpace(_contactInfos) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_contactInfos) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyContactInfosAsync(Guid? _parentID, string _contactInfos, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyContactInfos(_parentID, _contactInfos, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyContactInfosDapperAsync<T>(Guid? _parentID, string _contactInfos, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spModifyContactInfos",new {AParentID=_parentID,AContactInfos=string.IsNullOrWhiteSpace(_contactInfos) ? _contactInfos : ReplaceArabicWithPersianChars(_contactInfos)} , timeout );
}

public ResultSet ModifyContactInfos(Guid? _parentID, string _contactInfos, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyContactInfos(_parentID, _contactInfos, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAttachments

public System.Data.SqlClient.SqlCommand GetCommand_GetAttachments(string _parentIDs, Guid? _parentID, byte? _type, bool? _loadData, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetAttachments", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_parentIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_parentIDs) }, 
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ALoadData", IsOutput = false, Value = _loadData == null ? DBNull.Value : (object)_loadData }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAttachmentsAsync(string _parentIDs, Guid? _parentID, byte? _type, bool? _loadData, int? timeout = null)
{
	using(var cmd = GetCommand_GetAttachments(_parentIDs, _parentID, _type, _loadData, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAttachmentsDapperAsync<T>(string _parentIDs, Guid? _parentID, byte? _type, bool? _loadData, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetAttachments",new {AParentIDs=string.IsNullOrWhiteSpace(_parentIDs) ? _parentIDs : ReplaceArabicWithPersianChars(_parentIDs),AParentID=_parentID,AType=_type,ALoadData=_loadData} , timeout );
}

public ResultSet GetAttachments(string _parentIDs, Guid? _parentID, byte? _type, bool? _loadData, int? timeout = null)
{
	using(var cmd = GetCommand_GetAttachments(_parentIDs, _parentID, _type, _loadData, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region CreateAttachments

public System.Data.SqlClient.SqlCommand GetCommand_CreateAttachments(string _attachments, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spCreateAttachments", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AAttachments", IsOutput = false, Value = string.IsNullOrWhiteSpace(_attachments) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_attachments) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> CreateAttachmentsAsync(string _attachments, int? timeout = null)
{
	using(var cmd = GetCommand_CreateAttachments(_attachments, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> CreateAttachmentsDapperAsync<T>(string _attachments, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spCreateAttachments",new {AAttachments=string.IsNullOrWhiteSpace(_attachments) ? _attachments : ReplaceArabicWithPersianChars(_attachments)} , timeout );
}

public ResultSet CreateAttachments(string _attachments, int? timeout = null)
{
	using(var cmd = GetCommand_CreateAttachments(_attachments, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteAttachment

public System.Data.SqlClient.SqlCommand GetCommand_DeleteAttachment(Guid? _id, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spDeleteAttachment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteAttachmentAsync(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteAttachment(_id, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteAttachmentDapperAsync<T>(Guid? _id, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spDeleteAttachment",new {AID=_id,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet DeleteAttachment(Guid? _id, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteAttachment(_id, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyAttachment

public System.Data.SqlClient.SqlCommand GetCommand_ModifyAttachment(bool? _isNewRecord, Guid? _id, Guid? _parentID, byte? _type, string _fileName, string _comment, byte[] _data, bool? _isUnique, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spModifyAttachment", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@AFileName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_fileName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_fileName) }, 
					new Parameter { Name = "@AComment", IsOutput = false, Value = string.IsNullOrWhiteSpace(_comment) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_comment) }, 
					new Parameter { Name = "@AData", IsOutput = false, Value = _data == null ? DBNull.Value : (object)_data }, 
					new Parameter { Name = "@AIsUnique", IsOutput = false, Value = _isUnique == null ? DBNull.Value : (object)_isUnique }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyAttachmentAsync(bool? _isNewRecord, Guid? _id, Guid? _parentID, byte? _type, string _fileName, string _comment, byte[] _data, bool? _isUnique, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyAttachment(_isNewRecord, _id, _parentID, _type, _fileName, _comment, _data, _isUnique, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyAttachmentDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _parentID, byte? _type, string _fileName, string _comment, byte[] _data, bool? _isUnique, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spModifyAttachment",new {AIsNewRecord=_isNewRecord,AID=_id,AParentID=_parentID,AType=_type,AFileName=string.IsNullOrWhiteSpace(_fileName) ? _fileName : ReplaceArabicWithPersianChars(_fileName),AComment=string.IsNullOrWhiteSpace(_comment) ? _comment : ReplaceArabicWithPersianChars(_comment),AData=_data,AIsUnique=_isUnique,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyAttachment(bool? _isNewRecord, Guid? _id, Guid? _parentID, byte? _type, string _fileName, string _comment, byte[] _data, bool? _isUnique, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyAttachment(_isNewRecord, _id, _parentID, _type, _fileName, _comment, _data, _isUnique, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetMaxApplicationProcessMonitoringsCode

public System.Data.SqlClient.SqlCommand GetCommand_GetMaxApplicationProcessMonitoringsCode(Guid? _applicationID, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetMaxApplicationProcessMonitoringsCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetMaxApplicationProcessMonitoringsCodeAsync(Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_GetMaxApplicationProcessMonitoringsCode(_applicationID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetMaxApplicationProcessMonitoringsCodeDapperAsync<T>(Guid? _applicationID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetMaxApplicationProcessMonitoringsCode",new {AApplicationID=_applicationID} , timeout );
}

public ResultSet GetMaxApplicationProcessMonitoringsCode(Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_GetMaxApplicationProcessMonitoringsCode(_applicationID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyProcessMonitoring

public System.Data.SqlClient.SqlCommand GetCommand_ModifyProcessMonitoring(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, int? _count, string _solution, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spModifyProcessMonitoring", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ACount", IsOutput = false, Value = _count == null ? DBNull.Value : (object)_count }, 
					new Parameter { Name = "@ASolution", IsOutput = false, Value = string.IsNullOrWhiteSpace(_solution) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_solution) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyProcessMonitoringAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, int? _count, string _solution, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyProcessMonitoring(_isNewRecord, _id, _applicationID, _name, _count, _solution, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyProcessMonitoringDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, int? _count, string _solution, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spModifyProcessMonitoring",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ACount=_count,ASolution=string.IsNullOrWhiteSpace(_solution) ? _solution : ReplaceArabicWithPersianChars(_solution)} , timeout );
}

public ResultSet ModifyProcessMonitoring(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, int? _count, string _solution, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyProcessMonitoring(_isNewRecord, _id, _applicationID, _name, _count, _solution, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetProcessMonitorings

public System.Data.SqlClient.SqlCommand GetCommand_GetProcessMonitorings(Guid? _applicationID, string _name, string _code, int? _count, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetProcessMonitorings", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@ACount", IsOutput = false, Value = _count == null ? DBNull.Value : (object)_count }, 
					new Parameter { Name = "@ASolution", IsOutput = false, Value = string.IsNullOrWhiteSpace(_solution) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_solution) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetProcessMonitoringsAsync(Guid? _applicationID, string _name, string _code, int? _count, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetProcessMonitorings(_applicationID, _name, _code, _count, _solution, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetProcessMonitoringsDapperAsync<T>(Guid? _applicationID, string _name, string _code, int? _count, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetProcessMonitorings",new {AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),ACount=_count,ASolution=string.IsNullOrWhiteSpace(_solution) ? _solution : ReplaceArabicWithPersianChars(_solution),AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetProcessMonitorings(Guid? _applicationID, string _name, string _code, int? _count, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetProcessMonitorings(_applicationID, _name, _code, _count, _solution, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region AddSinaSurvey

public System.Data.SqlClient.SqlCommand GetCommand_AddSinaSurvey(Guid? _id, Guid? _creatorID, DateTime? _startDate, DateTime? _endDate, string _title, string _question, string _optios, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spAddSinaSurvey", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ACreatorID", IsOutput = false, Value = _creatorID == null ? DBNull.Value : (object)_creatorID }, 
					new Parameter { Name = "@AStartDate", IsOutput = false, Value = _startDate == null ? DBNull.Value : (object)_startDate }, 
					new Parameter { Name = "@AEndDate", IsOutput = false, Value = _endDate == null ? DBNull.Value : (object)_endDate }, 
					new Parameter { Name = "@ATitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_title) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_title) }, 
					new Parameter { Name = "@AQuestion", IsOutput = false, Value = string.IsNullOrWhiteSpace(_question) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_question) }, 
					new Parameter { Name = "@AOptios", IsOutput = false, Value = string.IsNullOrWhiteSpace(_optios) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_optios) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> AddSinaSurveyAsync(Guid? _id, Guid? _creatorID, DateTime? _startDate, DateTime? _endDate, string _title, string _question, string _optios, int? timeout = null)
{
	using(var cmd = GetCommand_AddSinaSurvey(_id, _creatorID, _startDate, _endDate, _title, _question, _optios, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> AddSinaSurveyDapperAsync<T>(Guid? _id, Guid? _creatorID, DateTime? _startDate, DateTime? _endDate, string _title, string _question, string _optios, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spAddSinaSurvey",new {AID=_id,ACreatorID=_creatorID,AStartDate=_startDate,AEndDate=_endDate,ATitle=string.IsNullOrWhiteSpace(_title) ? _title : ReplaceArabicWithPersianChars(_title),AQuestion=string.IsNullOrWhiteSpace(_question) ? _question : ReplaceArabicWithPersianChars(_question),AOptios=string.IsNullOrWhiteSpace(_optios) ? _optios : ReplaceArabicWithPersianChars(_optios)} , timeout );
}

public ResultSet AddSinaSurvey(Guid? _id, Guid? _creatorID, DateTime? _startDate, DateTime? _endDate, string _title, string _question, string _optios, int? timeout = null)
{
	using(var cmd = GetCommand_AddSinaSurvey(_id, _creatorID, _startDate, _endDate, _title, _question, _optios, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetProcessMonitoring

public System.Data.SqlClient.SqlCommand GetCommand_GetProcessMonitoring(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetProcessMonitoring", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetProcessMonitoringAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetProcessMonitoring(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetProcessMonitoringDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetProcessMonitoring",new {AID=_id} , timeout );
}

public ResultSet GetProcessMonitoring(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetProcessMonitoring(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDataBaseProblem

public System.Data.SqlClient.SqlCommand GetCommand_GetDataBaseProblem(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetDataBaseProblem", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDataBaseProblemAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseProblem(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDataBaseProblemDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetDataBaseProblem",new {AID=_id} , timeout );
}

public ResultSet GetDataBaseProblem(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseProblem(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDataBaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetDataBaseProblems(Guid? _applicationID, string _name, string _code, int? _count, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetDataBaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@ACount", IsOutput = false, Value = _count == null ? DBNull.Value : (object)_count }, 
					new Parameter { Name = "@ASolution", IsOutput = false, Value = string.IsNullOrWhiteSpace(_solution) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_solution) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDataBaseProblemsAsync(Guid? _applicationID, string _name, string _code, int? _count, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseProblems(_applicationID, _name, _code, _count, _solution, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDataBaseProblemsDapperAsync<T>(Guid? _applicationID, string _name, string _code, int? _count, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetDataBaseProblems",new {AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),ACount=_count,ASolution=string.IsNullOrWhiteSpace(_solution) ? _solution : ReplaceArabicWithPersianChars(_solution),AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetDataBaseProblems(Guid? _applicationID, string _name, string _code, int? _count, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseProblems(_applicationID, _name, _code, _count, _solution, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetMaxApplicationDataBaseProblemsCode

public System.Data.SqlClient.SqlCommand GetCommand_GetMaxApplicationDataBaseProblemsCode(Guid? _applicationID, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetMaxApplicationDataBaseProblemsCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetMaxApplicationDataBaseProblemsCodeAsync(Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_GetMaxApplicationDataBaseProblemsCode(_applicationID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetMaxApplicationDataBaseProblemsCodeDapperAsync<T>(Guid? _applicationID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetMaxApplicationDataBaseProblemsCode",new {AApplicationID=_applicationID} , timeout );
}

public ResultSet GetMaxApplicationDataBaseProblemsCode(Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_GetMaxApplicationDataBaseProblemsCode(_applicationID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyDataBaseProblem

public System.Data.SqlClient.SqlCommand GetCommand_ModifyDataBaseProblem(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, string _solution, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spModifyDataBaseProblem", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ASolution", IsOutput = false, Value = string.IsNullOrWhiteSpace(_solution) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_solution) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyDataBaseProblemAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, string _solution, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDataBaseProblem(_isNewRecord, _id, _applicationID, _name, _solution, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyDataBaseProblemDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, string _solution, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spModifyDataBaseProblem",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ASolution=string.IsNullOrWhiteSpace(_solution) ? _solution : ReplaceArabicWithPersianChars(_solution)} , timeout );
}

public ResultSet ModifyDataBaseProblem(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, string _solution, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDataBaseProblem(_isNewRecord, _id, _applicationID, _name, _solution, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDataBaseProblemFields

public System.Data.SqlClient.SqlCommand GetCommand_GetDataBaseProblemFields(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetDataBaseProblemFields", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDataBaseProblemFieldsAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseProblemFields(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDataBaseProblemFieldsDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetDataBaseProblemFields",new {AID=_id} , timeout );
}

public ResultSet GetDataBaseProblemFields(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseProblemFields(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetMaxApplicationDataBaseProblemsFieldsCode

public System.Data.SqlClient.SqlCommand GetCommand_GetMaxApplicationDataBaseProblemsFieldsCode(Guid? _applicationID, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetMaxApplicationDataBaseProblemsFieldsCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetMaxApplicationDataBaseProblemsFieldsCodeAsync(Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_GetMaxApplicationDataBaseProblemsFieldsCode(_applicationID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetMaxApplicationDataBaseProblemsFieldsCodeDapperAsync<T>(Guid? _applicationID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetMaxApplicationDataBaseProblemsFieldsCode",new {AApplicationID=_applicationID} , timeout );
}

public ResultSet GetMaxApplicationDataBaseProblemsFieldsCode(Guid? _applicationID, int? timeout = null)
{
	using(var cmd = GetCommand_GetMaxApplicationDataBaseProblemsFieldsCode(_applicationID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyDataBaseProblemFields

public System.Data.SqlClient.SqlCommand GetCommand_ModifyDataBaseProblemFields(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, int? _threshold, string _solution, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spModifyDataBaseProblemFields", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AThreshold", IsOutput = false, Value = _threshold == null ? DBNull.Value : (object)_threshold }, 
					new Parameter { Name = "@ASolution", IsOutput = false, Value = string.IsNullOrWhiteSpace(_solution) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_solution) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyDataBaseProblemFieldsAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, int? _threshold, string _solution, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDataBaseProblemFields(_isNewRecord, _id, _applicationID, _name, _threshold, _solution, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyDataBaseProblemFieldsDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, int? _threshold, string _solution, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spModifyDataBaseProblemFields",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AThreshold=_threshold,ASolution=string.IsNullOrWhiteSpace(_solution) ? _solution : ReplaceArabicWithPersianChars(_solution)} , timeout );
}

public ResultSet ModifyDataBaseProblemFields(bool? _isNewRecord, Guid? _id, Guid? _applicationID, string _name, int? _threshold, string _solution, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDataBaseProblemFields(_isNewRecord, _id, _applicationID, _name, _threshold, _solution, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDataBaseProblemsFields

public System.Data.SqlClient.SqlCommand GetCommand_GetDataBaseProblemsFields(Guid? _applicationID, string _name, string _code, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetDataBaseProblemsFields", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@ASolution", IsOutput = false, Value = string.IsNullOrWhiteSpace(_solution) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_solution) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDataBaseProblemsFieldsAsync(Guid? _applicationID, string _name, string _code, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseProblemsFields(_applicationID, _name, _code, _solution, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDataBaseProblemsFieldsDapperAsync<T>(Guid? _applicationID, string _name, string _code, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetDataBaseProblemsFields",new {AApplicationID=_applicationID,AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),ASolution=string.IsNullOrWhiteSpace(_solution) ? _solution : ReplaceArabicWithPersianChars(_solution),AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetDataBaseProblemsFields(Guid? _applicationID, string _name, string _code, string _solution, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseProblemsFields(_applicationID, _name, _code, _solution, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDepartments

public System.Data.SqlClient.SqlCommand GetCommand_GetDepartments(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _fetchedWithDeleted, bool? _noLoadTestDepartment, bool? _getPrivateDepartments, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spGetDepartments", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AParentID", IsOutput = false, Value = _parentID == null ? DBNull.Value : (object)_parentID }, 
					new Parameter { Name = "@AProvinceID", IsOutput = false, Value = _provinceID == null ? DBNull.Value : (object)_provinceID }, 
					new Parameter { Name = "@AUnitType", IsOutput = false, Value = _unitType == null ? DBNull.Value : (object)_unitType }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@ATypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_types) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_types) }, 
					new Parameter { Name = "@AEnabled", IsOutput = false, Value = _enabled == null ? DBNull.Value : (object)_enabled }, 
					new Parameter { Name = "@ASubType", IsOutput = false, Value = _subType == null ? DBNull.Value : (object)_subType }, 
					new Parameter { Name = "@ACouncilType", IsOutput = false, Value = _councilType == null ? DBNull.Value : (object)_councilType }, 
					new Parameter { Name = "@AOrganType", IsOutput = false, Value = _organType == null ? DBNull.Value : (object)_organType }, 
					new Parameter { Name = "@ACode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_code) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_code) }, 
					new Parameter { Name = "@ABudgetCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_budgetCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_budgetCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@ACodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_codes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_codes) }, 
					new Parameter { Name = "@ACOFOG", IsOutput = false, Value = _cOFOG == null ? DBNull.Value : (object)_cOFOG }, 
					new Parameter { Name = "@ALevel", IsOutput = false, Value = _level == null ? DBNull.Value : (object)_level }, 
					new Parameter { Name = "@ALoadLabel", IsOutput = false, Value = _loadLabel == null ? DBNull.Value : (object)_loadLabel }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ANeedsChartType", IsOutput = false, Value = _needsChartType == null ? DBNull.Value : (object)_needsChartType }, 
					new Parameter { Name = "@AWebServiceSaveType", IsOutput = false, Value = _webServiceSaveType == null ? DBNull.Value : (object)_webServiceSaveType }, 
					new Parameter { Name = "@AMainOrganType", IsOutput = false, Value = _mainOrganType == null ? DBNull.Value : (object)_mainOrganType }, 
					new Parameter { Name = "@AElaboratedBudgetType", IsOutput = false, Value = _elaboratedBudgetType == null ? DBNull.Value : (object)_elaboratedBudgetType }, 
					new Parameter { Name = "@ATreasurySupervisionType", IsOutput = false, Value = _treasurySupervisionType == null ? DBNull.Value : (object)_treasurySupervisionType }, 
					new Parameter { Name = "@AUserDefinitionReferenceType", IsOutput = false, Value = _userDefinitionReferenceType == null ? DBNull.Value : (object)_userDefinitionReferenceType }, 
					new Parameter { Name = "@ABoardOfTrusteesType", IsOutput = false, Value = _boardOfTrusteesType == null ? DBNull.Value : (object)_boardOfTrusteesType }, 
					new Parameter { Name = "@AArrangementTypeInSalary", IsOutput = false, Value = _arrangementTypeInSalary == null ? DBNull.Value : (object)_arrangementTypeInSalary }, 
					new Parameter { Name = "@ABriefNameType", IsOutput = false, Value = _briefNameType == null ? DBNull.Value : (object)_briefNameType }, 
					new Parameter { Name = "@ADepartmentShowType", IsOutput = false, Value = _departmentShowType == null ? DBNull.Value : (object)_departmentShowType }, 
					new Parameter { Name = "@AUserDefinitionReferenceTypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes) }, 
					new Parameter { Name = "@AIsDiscludedInPakna", IsOutput = false, Value = _isDiscludedInPakna == null ? DBNull.Value : (object)_isDiscludedInPakna }, 
					new Parameter { Name = "@AFetchedWithDeleted", IsOutput = false, Value = _fetchedWithDeleted == null ? DBNull.Value : (object)_fetchedWithDeleted }, 
					new Parameter { Name = "@ANoLoadTestDepartment", IsOutput = false, Value = _noLoadTestDepartment == null ? DBNull.Value : (object)_noLoadTestDepartment }, 
					new Parameter { Name = "@AGetPrivateDepartments", IsOutput = false, Value = _getPrivateDepartments == null ? DBNull.Value : (object)_getPrivateDepartments }, 
					new Parameter { Name = "@AEnabledApplicationIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enabledApplicationIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enabledApplicationIDs) }, 
					new Parameter { Name = "@AEnabledApplicationIDsForWebService", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enabledApplicationIDsForWebService) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enabledApplicationIDsForWebService) }, 
					new Parameter { Name = "@AEnabledApplicationIDsForReport", IsOutput = false, Value = string.IsNullOrWhiteSpace(_enabledApplicationIDsForReport) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_enabledApplicationIDsForReport) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDepartmentsAsync(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _fetchedWithDeleted, bool? _noLoadTestDepartment, bool? _getPrivateDepartments, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartments(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _codes, _cOFOG, _level, _loadLabel, _nationalCode, _needsChartType, _webServiceSaveType, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _userDefinitionReferenceTypes, _isDiscludedInPakna, _fetchedWithDeleted, _noLoadTestDepartment, _getPrivateDepartments, _enabledApplicationIDs, _enabledApplicationIDsForWebService, _enabledApplicationIDsForReport, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDepartmentsDapperAsync<T>(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _fetchedWithDeleted, bool? _noLoadTestDepartment, bool? _getPrivateDepartments, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spGetDepartments",new {AParentID=_parentID,AProvinceID=_provinceID,AUnitType=_unitType,AType=_type,ATypes=string.IsNullOrWhiteSpace(_types) ? _types : ReplaceArabicWithPersianChars(_types),AEnabled=_enabled,ASubType=_subType,ACouncilType=_councilType,AOrganType=_organType,ACode=string.IsNullOrWhiteSpace(_code) ? _code : ReplaceArabicWithPersianChars(_code),ABudgetCode=string.IsNullOrWhiteSpace(_budgetCode) ? _budgetCode : ReplaceArabicWithPersianChars(_budgetCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),ACodes=string.IsNullOrWhiteSpace(_codes) ? _codes : ReplaceArabicWithPersianChars(_codes),ACOFOG=_cOFOG,ALevel=_level,ALoadLabel=_loadLabel,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ANeedsChartType=_needsChartType,AWebServiceSaveType=_webServiceSaveType,AMainOrganType=_mainOrganType,AElaboratedBudgetType=_elaboratedBudgetType,ATreasurySupervisionType=_treasurySupervisionType,AUserDefinitionReferenceType=_userDefinitionReferenceType,ABoardOfTrusteesType=_boardOfTrusteesType,AArrangementTypeInSalary=_arrangementTypeInSalary,ABriefNameType=_briefNameType,ADepartmentShowType=_departmentShowType,AUserDefinitionReferenceTypes=string.IsNullOrWhiteSpace(_userDefinitionReferenceTypes) ? _userDefinitionReferenceTypes : ReplaceArabicWithPersianChars(_userDefinitionReferenceTypes),AIsDiscludedInPakna=_isDiscludedInPakna,AFetchedWithDeleted=_fetchedWithDeleted,ANoLoadTestDepartment=_noLoadTestDepartment,AGetPrivateDepartments=_getPrivateDepartments,AEnabledApplicationIDs=string.IsNullOrWhiteSpace(_enabledApplicationIDs) ? _enabledApplicationIDs : ReplaceArabicWithPersianChars(_enabledApplicationIDs),AEnabledApplicationIDsForWebService=string.IsNullOrWhiteSpace(_enabledApplicationIDsForWebService) ? _enabledApplicationIDsForWebService : ReplaceArabicWithPersianChars(_enabledApplicationIDsForWebService),AEnabledApplicationIDsForReport=string.IsNullOrWhiteSpace(_enabledApplicationIDsForReport) ? _enabledApplicationIDsForReport : ReplaceArabicWithPersianChars(_enabledApplicationIDsForReport),AGetTotalCount=_getTotalCount,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDepartments(Guid? _parentID, Guid? _provinceID, Guid? _unitType, byte? _type, string _types, byte? _enabled, byte? _subType, byte? _councilType, byte? _organType, string _code, string _budgetCode, string _name, string _codes, byte? _cOFOG, int? _level, bool? _loadLabel, string _nationalCode, byte? _needsChartType, byte? _webServiceSaveType, byte? _mainOrganType, byte? _elaboratedBudgetType, byte? _treasurySupervisionType, byte? _userDefinitionReferenceType, byte? _boardOfTrusteesType, byte? _arrangementTypeInSalary, byte? _briefNameType, byte? _departmentShowType, string _userDefinitionReferenceTypes, byte? _isDiscludedInPakna, bool? _fetchedWithDeleted, bool? _noLoadTestDepartment, bool? _getPrivateDepartments, string _enabledApplicationIDs, string _enabledApplicationIDsForWebService, string _enabledApplicationIDsForReport, bool? _getTotalCount, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDepartments(_parentID, _provinceID, _unitType, _type, _types, _enabled, _subType, _councilType, _organType, _code, _budgetCode, _name, _codes, _cOFOG, _level, _loadLabel, _nationalCode, _needsChartType, _webServiceSaveType, _mainOrganType, _elaboratedBudgetType, _treasurySupervisionType, _userDefinitionReferenceType, _boardOfTrusteesType, _arrangementTypeInSalary, _briefNameType, _departmentShowType, _userDefinitionReferenceTypes, _isDiscludedInPakna, _fetchedWithDeleted, _noLoadTestDepartment, _getPrivateDepartments, _enabledApplicationIDs, _enabledApplicationIDsForWebService, _enabledApplicationIDsForReport, _getTotalCount, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region AddLog

public System.Data.SqlClient.SqlCommand GetCommand_AddLog(string _log, int? timeout = null)
{
var cmd = base.CreateCommand("pbl.spAddLog", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> AddLogAsync(string _log, int? timeout = null)
{
	using(var cmd = GetCommand_AddLog(_log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> AddLogDapperAsync<T>(string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("pbl.spAddLog",new {ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet AddLog(string _log, int? timeout = null)
{
	using(var cmd = GetCommand_AddLog(_log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

}

public class INQ: Database
{
#region Constructors
public INQ(string connectionString)
	:base(connectionString){}

public INQ(string connectionString, IModelValueBinder modelValueBinder)
	:base(connectionString, modelValueBinder){}
#endregion

#region GetSabteAsnadNationalCode

public System.Data.SqlClient.SqlCommand GetCommand_GetSabteAsnadNationalCode(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetSabteAsnadNationalCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSabteAsnadNationalCodeAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetSabteAsnadNationalCode(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSabteAsnadNationalCodeDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetSabteAsnadNationalCode",new {AID=_id} , timeout );
}

public ResultSet GetSabteAsnadNationalCode(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetSabteAsnadNationalCode(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetEducationalManagements

public System.Data.SqlClient.SqlCommand GetCommand_GetEducationalManagements(Guid? _individualID, string _nationalCode, string _firstName, string _lastName, byte? _gender, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetEducationalManagements", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AFirstName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_firstName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_firstName) }, 
					new Parameter { Name = "@ALastName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastName) }, 
					new Parameter { Name = "@AGender", IsOutput = false, Value = _gender == null ? DBNull.Value : (object)_gender }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetEducationalManagementsAsync(Guid? _individualID, string _nationalCode, string _firstName, string _lastName, byte? _gender, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetEducationalManagements(_individualID, _nationalCode, _firstName, _lastName, _gender, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetEducationalManagementsDapperAsync<T>(Guid? _individualID, string _nationalCode, string _firstName, string _lastName, byte? _gender, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetEducationalManagements",new {AIndividualID=_individualID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AFirstName=string.IsNullOrWhiteSpace(_firstName) ? _firstName : ReplaceArabicWithPersianChars(_firstName),ALastName=string.IsNullOrWhiteSpace(_lastName) ? _lastName : ReplaceArabicWithPersianChars(_lastName),AGender=_gender,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetEducationalManagements(Guid? _individualID, string _nationalCode, string _firstName, string _lastName, byte? _gender, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetEducationalManagements(_individualID, _nationalCode, _firstName, _lastName, _gender, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyICTParticipateDailyInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_ModifyICTParticipateDailyInquiryState(DateTime? _inquiryDate, string _resultMessage, byte? _resultType, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyICTParticipateDailyInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AInquiryDate", IsOutput = false, Value = _inquiryDate == null ? DBNull.Value : (object)_inquiryDate }, 
					new Parameter { Name = "@AResultMessage", IsOutput = false, Value = string.IsNullOrWhiteSpace(_resultMessage) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_resultMessage) }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyICTParticipateDailyInquiryStateAsync(DateTime? _inquiryDate, string _resultMessage, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyICTParticipateDailyInquiryState(_inquiryDate, _resultMessage, _resultType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyICTParticipateDailyInquiryStateDapperAsync<T>(DateTime? _inquiryDate, string _resultMessage, byte? _resultType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyICTParticipateDailyInquiryState",new {AInquiryDate=_inquiryDate,AResultMessage=string.IsNullOrWhiteSpace(_resultMessage) ? _resultMessage : ReplaceArabicWithPersianChars(_resultMessage),AResultType=_resultType} , timeout );
}

public ResultSet ModifyICTParticipateDailyInquiryState(DateTime? _inquiryDate, string _resultMessage, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyICTParticipateDailyInquiryState(_inquiryDate, _resultMessage, _resultType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIsManager

public System.Data.SqlClient.SqlCommand GetCommand_GetIsManager(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetIsManager", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIsManagerAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetIsManager(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIsManagerDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetIsManager",new {AID=_id} , timeout );
}

public ResultSet GetIsManager(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetIsManager(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIsManagerByIndividualID

public System.Data.SqlClient.SqlCommand GetCommand_GetIsManagerByIndividualID(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetIsManagerByIndividualID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIsManagerByIndividualIDAsync(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetIsManagerByIndividualID(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIsManagerByIndividualIDDapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetIsManagerByIndividualID",new {AIndividualID=_individualID} , timeout );
}

public ResultSet GetIsManagerByIndividualID(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetIsManagerByIndividualID(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyIsManagerInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_ModifyIsManagerInquiryState(Guid? _individualID, string _resultMessage, byte? _resultType, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyIsManagerInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AResultMessage", IsOutput = false, Value = string.IsNullOrWhiteSpace(_resultMessage) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_resultMessage) }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyIsManagerInquiryStateAsync(Guid? _individualID, string _resultMessage, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyIsManagerInquiryState(_individualID, _resultMessage, _resultType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyIsManagerInquiryStateDapperAsync<T>(Guid? _individualID, string _resultMessage, byte? _resultType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyIsManagerInquiryState",new {AIndividualID=_individualID,AResultMessage=string.IsNullOrWhiteSpace(_resultMessage) ? _resultMessage : ReplaceArabicWithPersianChars(_resultMessage),AResultType=_resultType} , timeout );
}

public ResultSet ModifyIsManagerInquiryState(Guid? _individualID, string _resultMessage, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyIsManagerInquiryState(_individualID, _resultMessage, _resultType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDigitalSignatureInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_GetDigitalSignatureInquiryState(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetDigitalSignatureInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDigitalSignatureInquiryStateAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDigitalSignatureInquiryState(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDigitalSignatureInquiryStateDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetDigitalSignatureInquiryState",new {AID=_id} , timeout );
}

public ResultSet GetDigitalSignatureInquiryState(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetDigitalSignatureInquiryState(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyIsManager

public System.Data.SqlClient.SqlCommand GetCommand_ModifyIsManager(byte? _isManager, bool? _isNewRecord, Guid? _individualID, Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyIsManager", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsManager", IsOutput = false, Value = _isManager == null ? DBNull.Value : (object)_isManager }, 
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyIsManagerAsync(byte? _isManager, bool? _isNewRecord, Guid? _individualID, Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyIsManager(_isManager, _isNewRecord, _individualID, _id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyIsManagerDapperAsync<T>(byte? _isManager, bool? _isNewRecord, Guid? _individualID, Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyIsManager",new {AIsManager=_isManager,AIsNewRecord=_isNewRecord,AIndividualID=_individualID,AID=_id} , timeout );
}

public ResultSet ModifyIsManager(byte? _isManager, bool? _isNewRecord, Guid? _individualID, Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyIsManager(_isManager, _isNewRecord, _individualID, _id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIsManagerInquiryLogs

public System.Data.SqlClient.SqlCommand GetCommand_GetIsManagerInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetIsManagerInquiryLogs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AStartDate", IsOutput = false, Value = _startDate == null ? DBNull.Value : (object)_startDate }, 
					new Parameter { Name = "@AEndDate", IsOutput = false, Value = _endDate == null ? DBNull.Value : (object)_endDate }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIsManagerInquiryLogsAsync(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetIsManagerInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIsManagerInquiryLogsDapperAsync<T>(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetIsManagerInquiryLogs",new {AIndividualID=_individualID,AStartDate=_startDate,AEndDate=_endDate,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AResultType=_resultType,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetIsManagerInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetIsManagerInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetNonInquiryAddresses

public System.Data.SqlClient.SqlCommand GetCommand_GetNonInquiryAddresses(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetNonInquiryAddresses", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetNonInquiryAddressesAsync(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNonInquiryAddresses(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetNonInquiryAddressesDapperAsync<T>(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetNonInquiryAddresses",new {APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetNonInquiryAddresses(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetNonInquiryAddresses(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyIndividualInquiry

public System.Data.SqlClient.SqlCommand GetCommand_ModifyIndividualInquiry(Guid? _id, Guid? _individualID, string _nationalCode, byte? _confirmType, int? _errorCode, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyIndividualInquiry", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AConfirmType", IsOutput = false, Value = _confirmType == null ? DBNull.Value : (object)_confirmType }, 
					new Parameter { Name = "@AErrorCode", IsOutput = false, Value = _errorCode == null ? DBNull.Value : (object)_errorCode }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyIndividualInquiryAsync(Guid? _id, Guid? _individualID, string _nationalCode, byte? _confirmType, int? _errorCode, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyIndividualInquiry(_id, _individualID, _nationalCode, _confirmType, _errorCode, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyIndividualInquiryDapperAsync<T>(Guid? _id, Guid? _individualID, string _nationalCode, byte? _confirmType, int? _errorCode, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyIndividualInquiry",new {AID=_id,AIndividualID=_individualID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AConfirmType=_confirmType,AErrorCode=_errorCode} , timeout );
}

public ResultSet ModifyIndividualInquiry(Guid? _id, Guid? _individualID, string _nationalCode, byte? _confirmType, int? _errorCode, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyIndividualInquiry(_id, _individualID, _nationalCode, _confirmType, _errorCode, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetIndividualInquirys

public System.Data.SqlClient.SqlCommand GetCommand_GetIndividualInquirys(string _nationalCode, DateTime? _creationDateFrom, DateTime? _creationDateTo, string _nationalCodes, string _errorCodes, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetIndividualInquirys", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@ACreationDateFrom", IsOutput = false, Value = _creationDateFrom == null ? DBNull.Value : (object)_creationDateFrom }, 
					new Parameter { Name = "@ACreationDateTo", IsOutput = false, Value = _creationDateTo == null ? DBNull.Value : (object)_creationDateTo }, 
					new Parameter { Name = "@ANationalCodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCodes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCodes) }, 
					new Parameter { Name = "@AErrorCodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_errorCodes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_errorCodes) }, 
					new Parameter { Name = "@AGetTotalCount", IsOutput = false, Value = _getTotalCount == null ? DBNull.Value : (object)_getTotalCount }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetIndividualInquirysAsync(string _nationalCode, DateTime? _creationDateFrom, DateTime? _creationDateTo, string _nationalCodes, string _errorCodes, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetIndividualInquirys(_nationalCode, _creationDateFrom, _creationDateTo, _nationalCodes, _errorCodes, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetIndividualInquirysDapperAsync<T>(string _nationalCode, DateTime? _creationDateFrom, DateTime? _creationDateTo, string _nationalCodes, string _errorCodes, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetIndividualInquirys",new {ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),ACreationDateFrom=_creationDateFrom,ACreationDateTo=_creationDateTo,ANationalCodes=string.IsNullOrWhiteSpace(_nationalCodes) ? _nationalCodes : ReplaceArabicWithPersianChars(_nationalCodes),AErrorCodes=string.IsNullOrWhiteSpace(_errorCodes) ? _errorCodes : ReplaceArabicWithPersianChars(_errorCodes),AGetTotalCount=_getTotalCount,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetIndividualInquirys(string _nationalCode, DateTime? _creationDateFrom, DateTime? _creationDateTo, string _nationalCodes, string _errorCodes, bool? _getTotalCount, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetIndividualInquirys(_nationalCode, _creationDateFrom, _creationDateTo, _nationalCodes, _errorCodes, _getTotalCount, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetVaccinationInquiryLogs

public System.Data.SqlClient.SqlCommand GetCommand_GetVaccinationInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetVaccinationInquiryLogs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AStartDate", IsOutput = false, Value = _startDate == null ? DBNull.Value : (object)_startDate }, 
					new Parameter { Name = "@AEndDate", IsOutput = false, Value = _endDate == null ? DBNull.Value : (object)_endDate }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetVaccinationInquiryLogsAsync(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetVaccinationInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetVaccinationInquiryLogsDapperAsync<T>(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetVaccinationInquiryLogs",new {AIndividualID=_individualID,AStartDate=_startDate,AEndDate=_endDate,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AResultType=_resultType,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetVaccinationInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetVaccinationInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSabteAsnadNationalCodes

public System.Data.SqlClient.SqlCommand GetCommand_GetSabteAsnadNationalCodes(int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetSabteAsnadNationalCodes", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSabteAsnadNationalCodesAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetSabteAsnadNationalCodes(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSabteAsnadNationalCodesDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetSabteAsnadNationalCodes",new {} , timeout );
}

public ResultSet GetSabteAsnadNationalCodes(int? timeout = null)
{
	using(var cmd = GetCommand_GetSabteAsnadNationalCodes(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetInsuranceInquiryLogs

public System.Data.SqlClient.SqlCommand GetCommand_GetInsuranceInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetInsuranceInquiryLogs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AStartDate", IsOutput = false, Value = _startDate == null ? DBNull.Value : (object)_startDate }, 
					new Parameter { Name = "@AEndDate", IsOutput = false, Value = _endDate == null ? DBNull.Value : (object)_endDate }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetInsuranceInquiryLogsAsync(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetInsuranceInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetInsuranceInquiryLogsDapperAsync<T>(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetInsuranceInquiryLogs",new {AIndividualID=_individualID,AStartDate=_startDate,AEndDate=_endDate,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AResultType=_resultType,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetInsuranceInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetInsuranceInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetImageSmartInquiryLogs

public System.Data.SqlClient.SqlCommand GetCommand_GetImageSmartInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetImageSmartInquiryLogs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AStartDate", IsOutput = false, Value = _startDate == null ? DBNull.Value : (object)_startDate }, 
					new Parameter { Name = "@AEndDate", IsOutput = false, Value = _endDate == null ? DBNull.Value : (object)_endDate }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetImageSmartInquiryLogsAsync(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetImageSmartInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetImageSmartInquiryLogsDapperAsync<T>(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetImageSmartInquiryLogs",new {AIndividualID=_individualID,AStartDate=_startDate,AEndDate=_endDate,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AResultType=_resultType,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetImageSmartInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetImageSmartInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDigitalSignatureInquiryLogs

public System.Data.SqlClient.SqlCommand GetCommand_GetDigitalSignatureInquiryLogs(Guid? _applicationID, Guid? _attachmentID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetDigitalSignatureInquiryLogs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AAttachmentID", IsOutput = false, Value = _attachmentID == null ? DBNull.Value : (object)_attachmentID }, 
					new Parameter { Name = "@AStartDate", IsOutput = false, Value = _startDate == null ? DBNull.Value : (object)_startDate }, 
					new Parameter { Name = "@AEndDate", IsOutput = false, Value = _endDate == null ? DBNull.Value : (object)_endDate }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDigitalSignatureInquiryLogsAsync(Guid? _applicationID, Guid? _attachmentID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDigitalSignatureInquiryLogs(_applicationID, _attachmentID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDigitalSignatureInquiryLogsDapperAsync<T>(Guid? _applicationID, Guid? _attachmentID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetDigitalSignatureInquiryLogs",new {AApplicationID=_applicationID,AAttachmentID=_attachmentID,AStartDate=_startDate,AEndDate=_endDate,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AResultType=_resultType,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetDigitalSignatureInquiryLogs(Guid? _applicationID, Guid? _attachmentID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetDigitalSignatureInquiryLogs(_applicationID, _attachmentID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeletesEducational2

public System.Data.SqlClient.SqlCommand GetCommand_DeletesEducational2(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spDeletesEducational2", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeletesEducational2Async(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_DeletesEducational2(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeletesEducational2DapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spDeletesEducational2",new {AIndividualID=_individualID} , timeout );
}

public ResultSet DeletesEducational2(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_DeletesEducational2(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyChaparInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_ModifyChaparInquiryState(Guid? _individualID, string _resultMessage, string _content, string _requestID, string _value, byte? _type, byte? _resultType, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyChaparInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AResultMessage", IsOutput = false, Value = string.IsNullOrWhiteSpace(_resultMessage) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_resultMessage) }, 
					new Parameter { Name = "@AContent", IsOutput = false, Value = string.IsNullOrWhiteSpace(_content) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_content) }, 
					new Parameter { Name = "@ARequestID", IsOutput = false, Value = string.IsNullOrWhiteSpace(_requestID) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_requestID) }, 
					new Parameter { Name = "@AValue", IsOutput = false, Value = string.IsNullOrWhiteSpace(_value) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_value) }, 
					new Parameter { Name = "@AType", IsOutput = false, Value = _type == null ? DBNull.Value : (object)_type }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyChaparInquiryStateAsync(Guid? _individualID, string _resultMessage, string _content, string _requestID, string _value, byte? _type, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyChaparInquiryState(_individualID, _resultMessage, _content, _requestID, _value, _type, _resultType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyChaparInquiryStateDapperAsync<T>(Guid? _individualID, string _resultMessage, string _content, string _requestID, string _value, byte? _type, byte? _resultType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyChaparInquiryState",new {AIndividualID=_individualID,AResultMessage=string.IsNullOrWhiteSpace(_resultMessage) ? _resultMessage : ReplaceArabicWithPersianChars(_resultMessage),AContent=string.IsNullOrWhiteSpace(_content) ? _content : ReplaceArabicWithPersianChars(_content),ARequestID=string.IsNullOrWhiteSpace(_requestID) ? _requestID : ReplaceArabicWithPersianChars(_requestID),AValue=string.IsNullOrWhiteSpace(_value) ? _value : ReplaceArabicWithPersianChars(_value),AType=_type,AResultType=_resultType} , timeout );
}

public ResultSet ModifyChaparInquiryState(Guid? _individualID, string _resultMessage, string _content, string _requestID, string _value, byte? _type, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyChaparInquiryState(_individualID, _resultMessage, _content, _requestID, _value, _type, _resultType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetChaparInquiryByIndividualID

public System.Data.SqlClient.SqlCommand GetCommand_GetChaparInquiryByIndividualID(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetChaparInquiryByIndividualID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetChaparInquiryByIndividualIDAsync(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetChaparInquiryByIndividualID(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetChaparInquiryByIndividualIDDapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetChaparInquiryByIndividualID",new {AIndividualID=_individualID} , timeout );
}

public ResultSet GetChaparInquiryByIndividualID(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetChaparInquiryByIndividualID(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetVaccines

public System.Data.SqlClient.SqlCommand GetCommand_GetVaccines(Guid? _individualID, string _nationalCode, DateTime? _startDate, DateTime? _endDate, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetVaccines", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AStartDate", IsOutput = false, Value = _startDate == null ? DBNull.Value : (object)_startDate }, 
					new Parameter { Name = "@AEndDate", IsOutput = false, Value = _endDate == null ? DBNull.Value : (object)_endDate }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetVaccinesAsync(Guid? _individualID, string _nationalCode, DateTime? _startDate, DateTime? _endDate, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetVaccines(_individualID, _nationalCode, _startDate, _endDate, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetVaccinesDapperAsync<T>(Guid? _individualID, string _nationalCode, DateTime? _startDate, DateTime? _endDate, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetVaccines",new {AIndividualID=_individualID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AStartDate=_startDate,AEndDate=_endDate,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetVaccines(Guid? _individualID, string _nationalCode, DateTime? _startDate, DateTime? _endDate, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetVaccines(_individualID, _nationalCode, _startDate, _endDate, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAddress

public System.Data.SqlClient.SqlCommand GetCommand_GetAddress(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetAddress", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAddressAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetAddress(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAddressDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetAddress",new {AID=_id} , timeout );
}

public ResultSet GetAddress(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetAddress(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetEducationals

public System.Data.SqlClient.SqlCommand GetCommand_GetEducationals(Guid? _individualID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetEducationals", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetEducationalsAsync(Guid? _individualID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetEducationals(_individualID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetEducationalsDapperAsync<T>(Guid? _individualID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetEducationals",new {AIndividualID=_individualID,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetEducationals(Guid? _individualID, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetEducationals(_individualID, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAddressByPostalCode

public System.Data.SqlClient.SqlCommand GetCommand_GetAddressByPostalCode(string _postalCode, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetAddressByPostalCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APostalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_postalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_postalCode) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAddressByPostalCodeAsync(string _postalCode, int? timeout = null)
{
	using(var cmd = GetCommand_GetAddressByPostalCode(_postalCode, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAddressByPostalCodeDapperAsync<T>(string _postalCode, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetAddressByPostalCode",new {APostalCode=string.IsNullOrWhiteSpace(_postalCode) ? _postalCode : ReplaceArabicWithPersianChars(_postalCode)} , timeout );
}

public ResultSet GetAddressByPostalCode(string _postalCode, int? timeout = null)
{
	using(var cmd = GetCommand_GetAddressByPostalCode(_postalCode, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyAddress

public System.Data.SqlClient.SqlCommand GetCommand_ModifyAddress(string _postalCode, Guid? _provinceID, string _provinceName, Guid? _cityID, string _cityName, Guid? _districtID, string _districtName, Guid? _townID, string _townName, string _localityName, string _villageName, string _subLocality, string _street, string _street2, string _houseNumber, string _buildingName, string _description, string _floor, string _sideFloor, string _locationName, float? _long, float? _lat, string _log, bool? _isNewRecord, Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyAddress", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APostalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_postalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_postalCode) }, 
					new Parameter { Name = "@AProvinceID", IsOutput = false, Value = _provinceID == null ? DBNull.Value : (object)_provinceID }, 
					new Parameter { Name = "@AProvinceName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_provinceName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_provinceName) }, 
					new Parameter { Name = "@ACityID", IsOutput = false, Value = _cityID == null ? DBNull.Value : (object)_cityID }, 
					new Parameter { Name = "@ACityName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_cityName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_cityName) }, 
					new Parameter { Name = "@ADistrictID", IsOutput = false, Value = _districtID == null ? DBNull.Value : (object)_districtID }, 
					new Parameter { Name = "@ADistrictName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_districtName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_districtName) }, 
					new Parameter { Name = "@ATownID", IsOutput = false, Value = _townID == null ? DBNull.Value : (object)_townID }, 
					new Parameter { Name = "@ATownName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_townName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_townName) }, 
					new Parameter { Name = "@ALocalityName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_localityName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_localityName) }, 
					new Parameter { Name = "@AVillageName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_villageName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_villageName) }, 
					new Parameter { Name = "@ASubLocality", IsOutput = false, Value = string.IsNullOrWhiteSpace(_subLocality) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_subLocality) }, 
					new Parameter { Name = "@AStreet", IsOutput = false, Value = string.IsNullOrWhiteSpace(_street) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_street) }, 
					new Parameter { Name = "@AStreet2", IsOutput = false, Value = string.IsNullOrWhiteSpace(_street2) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_street2) }, 
					new Parameter { Name = "@AHouseNumber", IsOutput = false, Value = string.IsNullOrWhiteSpace(_houseNumber) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_houseNumber) }, 
					new Parameter { Name = "@ABuildingName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_buildingName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_buildingName) }, 
					new Parameter { Name = "@ADescription", IsOutput = false, Value = string.IsNullOrWhiteSpace(_description) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_description) }, 
					new Parameter { Name = "@AFloor", IsOutput = false, Value = string.IsNullOrWhiteSpace(_floor) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_floor) }, 
					new Parameter { Name = "@ASideFloor", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sideFloor) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sideFloor) }, 
					new Parameter { Name = "@ALocationName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_locationName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_locationName) }, 
					new Parameter { Name = "@ALong", IsOutput = false, Value = _long == null ? DBNull.Value : (object)_long }, 
					new Parameter { Name = "@ALat", IsOutput = false, Value = _lat == null ? DBNull.Value : (object)_lat }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyAddressAsync(string _postalCode, Guid? _provinceID, string _provinceName, Guid? _cityID, string _cityName, Guid? _districtID, string _districtName, Guid? _townID, string _townName, string _localityName, string _villageName, string _subLocality, string _street, string _street2, string _houseNumber, string _buildingName, string _description, string _floor, string _sideFloor, string _locationName, float? _long, float? _lat, string _log, bool? _isNewRecord, Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyAddress(_postalCode, _provinceID, _provinceName, _cityID, _cityName, _districtID, _districtName, _townID, _townName, _localityName, _villageName, _subLocality, _street, _street2, _houseNumber, _buildingName, _description, _floor, _sideFloor, _locationName, _long, _lat, _log, _isNewRecord, _id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyAddressDapperAsync<T>(string _postalCode, Guid? _provinceID, string _provinceName, Guid? _cityID, string _cityName, Guid? _districtID, string _districtName, Guid? _townID, string _townName, string _localityName, string _villageName, string _subLocality, string _street, string _street2, string _houseNumber, string _buildingName, string _description, string _floor, string _sideFloor, string _locationName, float? _long, float? _lat, string _log, bool? _isNewRecord, Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyAddress",new {APostalCode=string.IsNullOrWhiteSpace(_postalCode) ? _postalCode : ReplaceArabicWithPersianChars(_postalCode),AProvinceID=_provinceID,AProvinceName=string.IsNullOrWhiteSpace(_provinceName) ? _provinceName : ReplaceArabicWithPersianChars(_provinceName),ACityID=_cityID,ACityName=string.IsNullOrWhiteSpace(_cityName) ? _cityName : ReplaceArabicWithPersianChars(_cityName),ADistrictID=_districtID,ADistrictName=string.IsNullOrWhiteSpace(_districtName) ? _districtName : ReplaceArabicWithPersianChars(_districtName),ATownID=_townID,ATownName=string.IsNullOrWhiteSpace(_townName) ? _townName : ReplaceArabicWithPersianChars(_townName),ALocalityName=string.IsNullOrWhiteSpace(_localityName) ? _localityName : ReplaceArabicWithPersianChars(_localityName),AVillageName=string.IsNullOrWhiteSpace(_villageName) ? _villageName : ReplaceArabicWithPersianChars(_villageName),ASubLocality=string.IsNullOrWhiteSpace(_subLocality) ? _subLocality : ReplaceArabicWithPersianChars(_subLocality),AStreet=string.IsNullOrWhiteSpace(_street) ? _street : ReplaceArabicWithPersianChars(_street),AStreet2=string.IsNullOrWhiteSpace(_street2) ? _street2 : ReplaceArabicWithPersianChars(_street2),AHouseNumber=string.IsNullOrWhiteSpace(_houseNumber) ? _houseNumber : ReplaceArabicWithPersianChars(_houseNumber),ABuildingName=string.IsNullOrWhiteSpace(_buildingName) ? _buildingName : ReplaceArabicWithPersianChars(_buildingName),ADescription=string.IsNullOrWhiteSpace(_description) ? _description : ReplaceArabicWithPersianChars(_description),AFloor=string.IsNullOrWhiteSpace(_floor) ? _floor : ReplaceArabicWithPersianChars(_floor),ASideFloor=string.IsNullOrWhiteSpace(_sideFloor) ? _sideFloor : ReplaceArabicWithPersianChars(_sideFloor),ALocationName=string.IsNullOrWhiteSpace(_locationName) ? _locationName : ReplaceArabicWithPersianChars(_locationName),ALong=_long,ALat=_lat,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log),AIsNewRecord=_isNewRecord,AID=_id} , timeout );
}

public ResultSet ModifyAddress(string _postalCode, Guid? _provinceID, string _provinceName, Guid? _cityID, string _cityName, Guid? _districtID, string _districtName, Guid? _townID, string _townName, string _localityName, string _villageName, string _subLocality, string _street, string _street2, string _houseNumber, string _buildingName, string _description, string _floor, string _sideFloor, string _locationName, float? _long, float? _lat, string _log, bool? _isNewRecord, Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyAddress(_postalCode, _provinceID, _provinceName, _cityID, _cityName, _districtID, _districtName, _townID, _townName, _localityName, _villageName, _subLocality, _street, _street2, _houseNumber, _buildingName, _description, _floor, _sideFloor, _locationName, _long, _lat, _log, _isNewRecord, _id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyAddressInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_ModifyAddressInquiryState(bool? _isNewRecord, Guid? _id, Guid? _addressID, byte? _resultType, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyAddressInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AAddressID", IsOutput = false, Value = _addressID == null ? DBNull.Value : (object)_addressID }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyAddressInquiryStateAsync(bool? _isNewRecord, Guid? _id, Guid? _addressID, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyAddressInquiryState(_isNewRecord, _id, _addressID, _resultType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyAddressInquiryStateDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _addressID, byte? _resultType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyAddressInquiryState",new {AIsNewRecord=_isNewRecord,AID=_id,AAddressID=_addressID,AResultType=_resultType} , timeout );
}

public ResultSet ModifyAddressInquiryState(bool? _isNewRecord, Guid? _id, Guid? _addressID, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyAddressInquiryState(_isNewRecord, _id, _addressID, _resultType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ValidatePostalCode

public System.Data.SqlClient.SqlCommand GetCommand_ValidatePostalCode(string _postalCodes, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spValidatePostalCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APostalCodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_postalCodes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_postalCodes) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ValidatePostalCodeAsync(string _postalCodes, int? timeout = null)
{
	using(var cmd = GetCommand_ValidatePostalCode(_postalCodes, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ValidatePostalCodeDapperAsync<T>(string _postalCodes, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spValidatePostalCode",new {APostalCodes=string.IsNullOrWhiteSpace(_postalCodes) ? _postalCodes : ReplaceArabicWithPersianChars(_postalCodes)} , timeout );
}

public ResultSet ValidatePostalCode(string _postalCodes, int? timeout = null)
{
	using(var cmd = GetCommand_ValidatePostalCode(_postalCodes, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region CreateVaccineInquiryStates

public System.Data.SqlClient.SqlCommand GetCommand_CreateVaccineInquiryStates(string _inquiryStates, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spCreateVaccineInquiryStates", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AInquiryStates", IsOutput = false, Value = string.IsNullOrWhiteSpace(_inquiryStates) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_inquiryStates) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> CreateVaccineInquiryStatesAsync(string _inquiryStates, int? timeout = null)
{
	using(var cmd = GetCommand_CreateVaccineInquiryStates(_inquiryStates, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> CreateVaccineInquiryStatesDapperAsync<T>(string _inquiryStates, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spCreateVaccineInquiryStates",new {AInquiryStates=string.IsNullOrWhiteSpace(_inquiryStates) ? _inquiryStates : ReplaceArabicWithPersianChars(_inquiryStates)} , timeout );
}

public ResultSet CreateVaccineInquiryStates(string _inquiryStates, int? timeout = null)
{
	using(var cmd = GetCommand_CreateVaccineInquiryStates(_inquiryStates, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetEducationals2

public System.Data.SqlClient.SqlCommand GetCommand_GetEducationals2(Guid? _individualID, string _nationalCode, string _firstName, string _lastName, string _uniStudyLevel, string _uniStudyingMode, string _uniCourseStudy, string _university, float? _averageLowRange, float? _averageHighRange, byte? _gender, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetEducationals2", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AFirstName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_firstName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_firstName) }, 
					new Parameter { Name = "@ALastName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastName) }, 
					new Parameter { Name = "@AUniStudyLevel", IsOutput = false, Value = string.IsNullOrWhiteSpace(_uniStudyLevel) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_uniStudyLevel) }, 
					new Parameter { Name = "@AUniStudyingMode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_uniStudyingMode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_uniStudyingMode) }, 
					new Parameter { Name = "@AUniCourseStudy", IsOutput = false, Value = string.IsNullOrWhiteSpace(_uniCourseStudy) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_uniCourseStudy) }, 
					new Parameter { Name = "@AUniversity", IsOutput = false, Value = string.IsNullOrWhiteSpace(_university) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_university) }, 
					new Parameter { Name = "@AAverageLowRange", IsOutput = false, Value = _averageLowRange == null ? DBNull.Value : (object)_averageLowRange }, 
					new Parameter { Name = "@AAverageHighRange", IsOutput = false, Value = _averageHighRange == null ? DBNull.Value : (object)_averageHighRange }, 
					new Parameter { Name = "@AGender", IsOutput = false, Value = _gender == null ? DBNull.Value : (object)_gender }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetEducationals2Async(Guid? _individualID, string _nationalCode, string _firstName, string _lastName, string _uniStudyLevel, string _uniStudyingMode, string _uniCourseStudy, string _university, float? _averageLowRange, float? _averageHighRange, byte? _gender, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetEducationals2(_individualID, _nationalCode, _firstName, _lastName, _uniStudyLevel, _uniStudyingMode, _uniCourseStudy, _university, _averageLowRange, _averageHighRange, _gender, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetEducationals2DapperAsync<T>(Guid? _individualID, string _nationalCode, string _firstName, string _lastName, string _uniStudyLevel, string _uniStudyingMode, string _uniCourseStudy, string _university, float? _averageLowRange, float? _averageHighRange, byte? _gender, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetEducationals2",new {AIndividualID=_individualID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AFirstName=string.IsNullOrWhiteSpace(_firstName) ? _firstName : ReplaceArabicWithPersianChars(_firstName),ALastName=string.IsNullOrWhiteSpace(_lastName) ? _lastName : ReplaceArabicWithPersianChars(_lastName),AUniStudyLevel=string.IsNullOrWhiteSpace(_uniStudyLevel) ? _uniStudyLevel : ReplaceArabicWithPersianChars(_uniStudyLevel),AUniStudyingMode=string.IsNullOrWhiteSpace(_uniStudyingMode) ? _uniStudyingMode : ReplaceArabicWithPersianChars(_uniStudyingMode),AUniCourseStudy=string.IsNullOrWhiteSpace(_uniCourseStudy) ? _uniCourseStudy : ReplaceArabicWithPersianChars(_uniCourseStudy),AUniversity=string.IsNullOrWhiteSpace(_university) ? _university : ReplaceArabicWithPersianChars(_university),AAverageLowRange=_averageLowRange,AAverageHighRange=_averageHighRange,AGender=_gender,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetEducationals2(Guid? _individualID, string _nationalCode, string _firstName, string _lastName, string _uniStudyLevel, string _uniStudyingMode, string _uniCourseStudy, string _university, float? _averageLowRange, float? _averageHighRange, byte? _gender, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetEducationals2(_individualID, _nationalCode, _firstName, _lastName, _uniStudyLevel, _uniStudyingMode, _uniCourseStudy, _university, _averageLowRange, _averageHighRange, _gender, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region EditVaccines

public System.Data.SqlClient.SqlCommand GetCommand_EditVaccines(string _vaccines, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spEditVaccines", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AVaccines", IsOutput = false, Value = string.IsNullOrWhiteSpace(_vaccines) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_vaccines) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> EditVaccinesAsync(string _vaccines, int? timeout = null)
{
	using(var cmd = GetCommand_EditVaccines(_vaccines, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> EditVaccinesDapperAsync<T>(string _vaccines, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spEditVaccines",new {AVaccines=string.IsNullOrWhiteSpace(_vaccines) ? _vaccines : ReplaceArabicWithPersianChars(_vaccines)} , timeout );
}

public ResultSet EditVaccines(string _vaccines, int? timeout = null)
{
	using(var cmd = GetCommand_EditVaccines(_vaccines, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetVaccine

public System.Data.SqlClient.SqlCommand GetCommand_GetVaccine(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetVaccine", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetVaccineAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetVaccine(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetVaccineDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetVaccine",new {AID=_id} , timeout );
}

public ResultSet GetVaccine(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetVaccine(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetVaccineByIndividualID

public System.Data.SqlClient.SqlCommand GetCommand_GetVaccineByIndividualID(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetVaccineByIndividualID", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetVaccineByIndividualIDAsync(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetVaccineByIndividualID(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetVaccineByIndividualIDDapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetVaccineByIndividualID",new {AIndividualID=_individualID} , timeout );
}

public ResultSet GetVaccineByIndividualID(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetVaccineByIndividualID(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyVaccine

public System.Data.SqlClient.SqlCommand GetCommand_ModifyVaccine(DateTime? _lastDoseDate, string _lastDoseDateFa, int? _numberOfReceivedDoses, bool? _isNewRecord, Guid? _individualID, string _healthStatus, string _permissionStatus, bool? _quarantined, Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyVaccine", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ALastDoseDate", IsOutput = false, Value = _lastDoseDate == null ? DBNull.Value : (object)_lastDoseDate }, 
					new Parameter { Name = "@ALastDoseDateFa", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastDoseDateFa) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastDoseDateFa) }, 
					new Parameter { Name = "@ANumberOfReceivedDoses", IsOutput = false, Value = _numberOfReceivedDoses == null ? DBNull.Value : (object)_numberOfReceivedDoses }, 
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AHealthStatus", IsOutput = false, Value = string.IsNullOrWhiteSpace(_healthStatus) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_healthStatus) }, 
					new Parameter { Name = "@APermissionStatus", IsOutput = false, Value = string.IsNullOrWhiteSpace(_permissionStatus) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_permissionStatus) }, 
					new Parameter { Name = "@AQuarantined", IsOutput = false, Value = _quarantined == null ? DBNull.Value : (object)_quarantined }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyVaccineAsync(DateTime? _lastDoseDate, string _lastDoseDateFa, int? _numberOfReceivedDoses, bool? _isNewRecord, Guid? _individualID, string _healthStatus, string _permissionStatus, bool? _quarantined, Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyVaccine(_lastDoseDate, _lastDoseDateFa, _numberOfReceivedDoses, _isNewRecord, _individualID, _healthStatus, _permissionStatus, _quarantined, _id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyVaccineDapperAsync<T>(DateTime? _lastDoseDate, string _lastDoseDateFa, int? _numberOfReceivedDoses, bool? _isNewRecord, Guid? _individualID, string _healthStatus, string _permissionStatus, bool? _quarantined, Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyVaccine",new {ALastDoseDate=_lastDoseDate,ALastDoseDateFa=string.IsNullOrWhiteSpace(_lastDoseDateFa) ? _lastDoseDateFa : ReplaceArabicWithPersianChars(_lastDoseDateFa),ANumberOfReceivedDoses=_numberOfReceivedDoses,AIsNewRecord=_isNewRecord,AIndividualID=_individualID,AHealthStatus=string.IsNullOrWhiteSpace(_healthStatus) ? _healthStatus : ReplaceArabicWithPersianChars(_healthStatus),APermissionStatus=string.IsNullOrWhiteSpace(_permissionStatus) ? _permissionStatus : ReplaceArabicWithPersianChars(_permissionStatus),AQuarantined=_quarantined,AID=_id} , timeout );
}

public ResultSet ModifyVaccine(DateTime? _lastDoseDate, string _lastDoseDateFa, int? _numberOfReceivedDoses, bool? _isNewRecord, Guid? _individualID, string _healthStatus, string _permissionStatus, bool? _quarantined, Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyVaccine(_lastDoseDate, _lastDoseDateFa, _numberOfReceivedDoses, _isNewRecord, _individualID, _healthStatus, _permissionStatus, _quarantined, _id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyVaccineInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_ModifyVaccineInquiryState(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyVaccineInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyVaccineInquiryStateAsync(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyVaccineInquiryState(_isNewRecord, _id, _individualID, _resultType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyVaccineInquiryStateDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyVaccineInquiryState",new {AIsNewRecord=_isNewRecord,AID=_id,AIndividualID=_individualID,AResultType=_resultType} , timeout );
}

public ResultSet ModifyVaccineInquiryState(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyVaccineInquiryState(_isNewRecord, _id, _individualID, _resultType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ToggleIsInUsedNeededIndividualsForVaccination

public System.Data.SqlClient.SqlCommand GetCommand_ToggleIsInUsedNeededIndividualsForVaccination(string _individuals, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spToggleIsInUsedNeededIndividualsForVaccination", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividuals", IsOutput = false, Value = string.IsNullOrWhiteSpace(_individuals) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_individuals) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ToggleIsInUsedNeededIndividualsForVaccinationAsync(string _individuals, int? timeout = null)
{
	using(var cmd = GetCommand_ToggleIsInUsedNeededIndividualsForVaccination(_individuals, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ToggleIsInUsedNeededIndividualsForVaccinationDapperAsync<T>(string _individuals, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spToggleIsInUsedNeededIndividualsForVaccination",new {AIndividuals=string.IsNullOrWhiteSpace(_individuals) ? _individuals : ReplaceArabicWithPersianChars(_individuals)} , timeout );
}

public ResultSet ToggleIsInUsedNeededIndividualsForVaccination(string _individuals, int? timeout = null)
{
	using(var cmd = GetCommand_ToggleIsInUsedNeededIndividualsForVaccination(_individuals, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetEducational

public System.Data.SqlClient.SqlCommand GetCommand_GetEducational(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetEducational", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetEducationalAsync(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetEducational(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetEducationalDapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetEducational",new {AIndividualID=_individualID} , timeout );
}

public ResultSet GetEducational(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetEducational(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyEducational

public System.Data.SqlClient.SqlCommand GetCommand_ModifyEducational(bool? _isNewRecord, Guid? _individualID, string _facultyName, string _courseTitle, byte? _msrtStudentStatus, string _msrtStudentStatusCode, byte? _msrtStudyingMode, string _msrtStudyingModeCode, string _msrtstudyLevelCode, string _msrtstudyLevelTitle, byte? _studentStatus, byte? _studyingMode, float? _totalAverage, string _universityName, int? _universityId, string _stopDate, string _studyLevelTitle, string _userTypeName, Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyEducational", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AFacultyName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_facultyName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_facultyName) }, 
					new Parameter { Name = "@ACourseTitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_courseTitle) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_courseTitle) }, 
					new Parameter { Name = "@AMsrtStudentStatus", IsOutput = false, Value = _msrtStudentStatus == null ? DBNull.Value : (object)_msrtStudentStatus }, 
					new Parameter { Name = "@AMsrtStudentStatusCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_msrtStudentStatusCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_msrtStudentStatusCode) }, 
					new Parameter { Name = "@AMsrtStudyingMode", IsOutput = false, Value = _msrtStudyingMode == null ? DBNull.Value : (object)_msrtStudyingMode }, 
					new Parameter { Name = "@AMsrtStudyingModeCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_msrtStudyingModeCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_msrtStudyingModeCode) }, 
					new Parameter { Name = "@AMsrtstudyLevelCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_msrtstudyLevelCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_msrtstudyLevelCode) }, 
					new Parameter { Name = "@AMsrtstudyLevelTitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_msrtstudyLevelTitle) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_msrtstudyLevelTitle) }, 
					new Parameter { Name = "@AStudentStatus", IsOutput = false, Value = _studentStatus == null ? DBNull.Value : (object)_studentStatus }, 
					new Parameter { Name = "@AStudyingMode", IsOutput = false, Value = _studyingMode == null ? DBNull.Value : (object)_studyingMode }, 
					new Parameter { Name = "@ATotalAverage", IsOutput = false, Value = _totalAverage == null ? DBNull.Value : (object)_totalAverage }, 
					new Parameter { Name = "@AUniversityName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_universityName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_universityName) }, 
					new Parameter { Name = "@AUniversityId", IsOutput = false, Value = _universityId == null ? DBNull.Value : (object)_universityId }, 
					new Parameter { Name = "@AStopDate", IsOutput = false, Value = string.IsNullOrWhiteSpace(_stopDate) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_stopDate) }, 
					new Parameter { Name = "@AStudyLevelTitle", IsOutput = false, Value = string.IsNullOrWhiteSpace(_studyLevelTitle) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_studyLevelTitle) }, 
					new Parameter { Name = "@AUserTypeName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_userTypeName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_userTypeName) }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyEducationalAsync(bool? _isNewRecord, Guid? _individualID, string _facultyName, string _courseTitle, byte? _msrtStudentStatus, string _msrtStudentStatusCode, byte? _msrtStudyingMode, string _msrtStudyingModeCode, string _msrtstudyLevelCode, string _msrtstudyLevelTitle, byte? _studentStatus, byte? _studyingMode, float? _totalAverage, string _universityName, int? _universityId, string _stopDate, string _studyLevelTitle, string _userTypeName, Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyEducational(_isNewRecord, _individualID, _facultyName, _courseTitle, _msrtStudentStatus, _msrtStudentStatusCode, _msrtStudyingMode, _msrtStudyingModeCode, _msrtstudyLevelCode, _msrtstudyLevelTitle, _studentStatus, _studyingMode, _totalAverage, _universityName, _universityId, _stopDate, _studyLevelTitle, _userTypeName, _id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyEducationalDapperAsync<T>(bool? _isNewRecord, Guid? _individualID, string _facultyName, string _courseTitle, byte? _msrtStudentStatus, string _msrtStudentStatusCode, byte? _msrtStudyingMode, string _msrtStudyingModeCode, string _msrtstudyLevelCode, string _msrtstudyLevelTitle, byte? _studentStatus, byte? _studyingMode, float? _totalAverage, string _universityName, int? _universityId, string _stopDate, string _studyLevelTitle, string _userTypeName, Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyEducational",new {AIsNewRecord=_isNewRecord,AIndividualID=_individualID,AFacultyName=string.IsNullOrWhiteSpace(_facultyName) ? _facultyName : ReplaceArabicWithPersianChars(_facultyName),ACourseTitle=string.IsNullOrWhiteSpace(_courseTitle) ? _courseTitle : ReplaceArabicWithPersianChars(_courseTitle),AMsrtStudentStatus=_msrtStudentStatus,AMsrtStudentStatusCode=string.IsNullOrWhiteSpace(_msrtStudentStatusCode) ? _msrtStudentStatusCode : ReplaceArabicWithPersianChars(_msrtStudentStatusCode),AMsrtStudyingMode=_msrtStudyingMode,AMsrtStudyingModeCode=string.IsNullOrWhiteSpace(_msrtStudyingModeCode) ? _msrtStudyingModeCode : ReplaceArabicWithPersianChars(_msrtStudyingModeCode),AMsrtstudyLevelCode=string.IsNullOrWhiteSpace(_msrtstudyLevelCode) ? _msrtstudyLevelCode : ReplaceArabicWithPersianChars(_msrtstudyLevelCode),AMsrtstudyLevelTitle=string.IsNullOrWhiteSpace(_msrtstudyLevelTitle) ? _msrtstudyLevelTitle : ReplaceArabicWithPersianChars(_msrtstudyLevelTitle),AStudentStatus=_studentStatus,AStudyingMode=_studyingMode,ATotalAverage=_totalAverage,AUniversityName=string.IsNullOrWhiteSpace(_universityName) ? _universityName : ReplaceArabicWithPersianChars(_universityName),AUniversityId=_universityId,AStopDate=string.IsNullOrWhiteSpace(_stopDate) ? _stopDate : ReplaceArabicWithPersianChars(_stopDate),AStudyLevelTitle=string.IsNullOrWhiteSpace(_studyLevelTitle) ? _studyLevelTitle : ReplaceArabicWithPersianChars(_studyLevelTitle),AUserTypeName=string.IsNullOrWhiteSpace(_userTypeName) ? _userTypeName : ReplaceArabicWithPersianChars(_userTypeName),AID=_id} , timeout );
}

public ResultSet ModifyEducational(bool? _isNewRecord, Guid? _individualID, string _facultyName, string _courseTitle, byte? _msrtStudentStatus, string _msrtStudentStatusCode, byte? _msrtStudyingMode, string _msrtStudyingModeCode, string _msrtstudyLevelCode, string _msrtstudyLevelTitle, byte? _studentStatus, byte? _studyingMode, float? _totalAverage, string _universityName, int? _universityId, string _stopDate, string _studyLevelTitle, string _userTypeName, Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyEducational(_isNewRecord, _individualID, _facultyName, _courseTitle, _msrtStudentStatus, _msrtStudentStatusCode, _msrtStudyingMode, _msrtStudyingModeCode, _msrtstudyLevelCode, _msrtstudyLevelTitle, _studentStatus, _studyingMode, _totalAverage, _universityName, _universityId, _stopDate, _studyLevelTitle, _userTypeName, _id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyEducationalInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_ModifyEducationalInquiryState(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? _resultCount, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyEducationalInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
					new Parameter { Name = "@AResultCount", IsOutput = false, Value = _resultCount == null ? DBNull.Value : (object)_resultCount }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyEducationalInquiryStateAsync(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? _resultCount, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyEducationalInquiryState(_isNewRecord, _id, _individualID, _resultType, _resultCount, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyEducationalInquiryStateDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? _resultCount, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyEducationalInquiryState",new {AIsNewRecord=_isNewRecord,AID=_id,AIndividualID=_individualID,AResultType=_resultType,AResultCount=_resultCount} , timeout );
}

public ResultSet ModifyEducationalInquiryState(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? _resultCount, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyEducationalInquiryState(_isNewRecord, _id, _individualID, _resultType, _resultCount, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeleteEducational2

public System.Data.SqlClient.SqlCommand GetCommand_DeleteEducational2(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spDeleteEducational2", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeleteEducational2Async(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteEducational2(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeleteEducational2DapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spDeleteEducational2",new {AIndividualID=_individualID} , timeout );
}

public ResultSet DeleteEducational2(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_DeleteEducational2(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetEducational2

public System.Data.SqlClient.SqlCommand GetCommand_GetEducational2(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetEducational2", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetEducational2Async(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetEducational2(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetEducational2DapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetEducational2",new {AIndividualID=_individualID} , timeout );
}

public ResultSet GetEducational2(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetEducational2(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyEducational2

public System.Data.SqlClient.SqlCommand GetCommand_ModifyEducational2(Guid? _id, Guid? _individualID, string _uniStudyLevel, string _uniStudyingMode, string _uniStudentStatus, string _uniCourseStudy, string _uniStartDate, string _uniStopDate, string _msrtStudyingMode, string _msrtStudyLevel, string _msrtStudentStatus, string _personCode, string _university, float? _totalAverage, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyEducational2", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AUniStudyLevel", IsOutput = false, Value = string.IsNullOrWhiteSpace(_uniStudyLevel) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_uniStudyLevel) }, 
					new Parameter { Name = "@AUniStudyingMode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_uniStudyingMode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_uniStudyingMode) }, 
					new Parameter { Name = "@AUniStudentStatus", IsOutput = false, Value = string.IsNullOrWhiteSpace(_uniStudentStatus) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_uniStudentStatus) }, 
					new Parameter { Name = "@AUniCourseStudy", IsOutput = false, Value = string.IsNullOrWhiteSpace(_uniCourseStudy) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_uniCourseStudy) }, 
					new Parameter { Name = "@AUniStartDate", IsOutput = false, Value = string.IsNullOrWhiteSpace(_uniStartDate) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_uniStartDate) }, 
					new Parameter { Name = "@AUniStopDate", IsOutput = false, Value = string.IsNullOrWhiteSpace(_uniStopDate) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_uniStopDate) }, 
					new Parameter { Name = "@AMsrtStudyingMode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_msrtStudyingMode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_msrtStudyingMode) }, 
					new Parameter { Name = "@AMsrtStudyLevel", IsOutput = false, Value = string.IsNullOrWhiteSpace(_msrtStudyLevel) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_msrtStudyLevel) }, 
					new Parameter { Name = "@AMsrtStudentStatus", IsOutput = false, Value = string.IsNullOrWhiteSpace(_msrtStudentStatus) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_msrtStudentStatus) }, 
					new Parameter { Name = "@APersonCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_personCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_personCode) }, 
					new Parameter { Name = "@AUniversity", IsOutput = false, Value = string.IsNullOrWhiteSpace(_university) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_university) }, 
					new Parameter { Name = "@ATotalAverage", IsOutput = false, Value = _totalAverage == null ? DBNull.Value : (object)_totalAverage }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyEducational2Async(Guid? _id, Guid? _individualID, string _uniStudyLevel, string _uniStudyingMode, string _uniStudentStatus, string _uniCourseStudy, string _uniStartDate, string _uniStopDate, string _msrtStudyingMode, string _msrtStudyLevel, string _msrtStudentStatus, string _personCode, string _university, float? _totalAverage, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyEducational2(_id, _individualID, _uniStudyLevel, _uniStudyingMode, _uniStudentStatus, _uniCourseStudy, _uniStartDate, _uniStopDate, _msrtStudyingMode, _msrtStudyLevel, _msrtStudentStatus, _personCode, _university, _totalAverage, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyEducational2DapperAsync<T>(Guid? _id, Guid? _individualID, string _uniStudyLevel, string _uniStudyingMode, string _uniStudentStatus, string _uniCourseStudy, string _uniStartDate, string _uniStopDate, string _msrtStudyingMode, string _msrtStudyLevel, string _msrtStudentStatus, string _personCode, string _university, float? _totalAverage, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyEducational2",new {AID=_id,AIndividualID=_individualID,AUniStudyLevel=string.IsNullOrWhiteSpace(_uniStudyLevel) ? _uniStudyLevel : ReplaceArabicWithPersianChars(_uniStudyLevel),AUniStudyingMode=string.IsNullOrWhiteSpace(_uniStudyingMode) ? _uniStudyingMode : ReplaceArabicWithPersianChars(_uniStudyingMode),AUniStudentStatus=string.IsNullOrWhiteSpace(_uniStudentStatus) ? _uniStudentStatus : ReplaceArabicWithPersianChars(_uniStudentStatus),AUniCourseStudy=string.IsNullOrWhiteSpace(_uniCourseStudy) ? _uniCourseStudy : ReplaceArabicWithPersianChars(_uniCourseStudy),AUniStartDate=string.IsNullOrWhiteSpace(_uniStartDate) ? _uniStartDate : ReplaceArabicWithPersianChars(_uniStartDate),AUniStopDate=string.IsNullOrWhiteSpace(_uniStopDate) ? _uniStopDate : ReplaceArabicWithPersianChars(_uniStopDate),AMsrtStudyingMode=string.IsNullOrWhiteSpace(_msrtStudyingMode) ? _msrtStudyingMode : ReplaceArabicWithPersianChars(_msrtStudyingMode),AMsrtStudyLevel=string.IsNullOrWhiteSpace(_msrtStudyLevel) ? _msrtStudyLevel : ReplaceArabicWithPersianChars(_msrtStudyLevel),AMsrtStudentStatus=string.IsNullOrWhiteSpace(_msrtStudentStatus) ? _msrtStudentStatus : ReplaceArabicWithPersianChars(_msrtStudentStatus),APersonCode=string.IsNullOrWhiteSpace(_personCode) ? _personCode : ReplaceArabicWithPersianChars(_personCode),AUniversity=string.IsNullOrWhiteSpace(_university) ? _university : ReplaceArabicWithPersianChars(_university),ATotalAverage=_totalAverage} , timeout );
}

public ResultSet ModifyEducational2(Guid? _id, Guid? _individualID, string _uniStudyLevel, string _uniStudyingMode, string _uniStudentStatus, string _uniCourseStudy, string _uniStartDate, string _uniStopDate, string _msrtStudyingMode, string _msrtStudyLevel, string _msrtStudentStatus, string _personCode, string _university, float? _totalAverage, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyEducational2(_id, _individualID, _uniStudyLevel, _uniStudyingMode, _uniStudentStatus, _uniCourseStudy, _uniStartDate, _uniStopDate, _msrtStudyingMode, _msrtStudyLevel, _msrtStudentStatus, _personCode, _university, _totalAverage, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region CreateImageSmartInquiryStates

public System.Data.SqlClient.SqlCommand GetCommand_CreateImageSmartInquiryStates(string _inquiryStates, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spCreateImageSmartInquiryStates", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AInquiryStates", IsOutput = false, Value = string.IsNullOrWhiteSpace(_inquiryStates) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_inquiryStates) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> CreateImageSmartInquiryStatesAsync(string _inquiryStates, int? timeout = null)
{
	using(var cmd = GetCommand_CreateImageSmartInquiryStates(_inquiryStates, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> CreateImageSmartInquiryStatesDapperAsync<T>(string _inquiryStates, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spCreateImageSmartInquiryStates",new {AInquiryStates=string.IsNullOrWhiteSpace(_inquiryStates) ? _inquiryStates : ReplaceArabicWithPersianChars(_inquiryStates)} , timeout );
}

public ResultSet CreateImageSmartInquiryStates(string _inquiryStates, int? timeout = null)
{
	using(var cmd = GetCommand_CreateImageSmartInquiryStates(_inquiryStates, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyImageSmartInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_ModifyImageSmartInquiryState(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyImageSmartInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyImageSmartInquiryStateAsync(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyImageSmartInquiryState(_isNewRecord, _id, _individualID, _resultType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyImageSmartInquiryStateDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyImageSmartInquiryState",new {AIsNewRecord=_isNewRecord,AID=_id,AIndividualID=_individualID,AResultType=_resultType} , timeout );
}

public ResultSet ModifyImageSmartInquiryState(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyImageSmartInquiryState(_isNewRecord, _id, _individualID, _resultType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetInsurance

public System.Data.SqlClient.SqlCommand GetCommand_GetInsurance(Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetInsurance", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetInsuranceAsync(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetInsurance(_id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetInsuranceDapperAsync<T>(Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetInsurance",new {AID=_id} , timeout );
}

public ResultSet GetInsurance(Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_GetInsurance(_id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetInsuranceByIndividualId

public System.Data.SqlClient.SqlCommand GetCommand_GetInsuranceByIndividualId(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetInsuranceByIndividualId", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetInsuranceByIndividualIdAsync(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetInsuranceByIndividualId(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetInsuranceByIndividualIdDapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetInsuranceByIndividualId",new {AIndividualID=_individualID} , timeout );
}

public ResultSet GetInsuranceByIndividualId(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetInsuranceByIndividualId(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyWebServiceInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_ModifyWebServiceInquiryState(Guid? _webServiceID, string _resultMessage, byte? _webServiceLocationType, byte? _resultType, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyWebServiceInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AWebServiceID", IsOutput = false, Value = _webServiceID == null ? DBNull.Value : (object)_webServiceID }, 
					new Parameter { Name = "@AResultMessage", IsOutput = false, Value = string.IsNullOrWhiteSpace(_resultMessage) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_resultMessage) }, 
					new Parameter { Name = "@AWebServiceLocationType", IsOutput = false, Value = _webServiceLocationType == null ? DBNull.Value : (object)_webServiceLocationType }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyWebServiceInquiryStateAsync(Guid? _webServiceID, string _resultMessage, byte? _webServiceLocationType, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyWebServiceInquiryState(_webServiceID, _resultMessage, _webServiceLocationType, _resultType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyWebServiceInquiryStateDapperAsync<T>(Guid? _webServiceID, string _resultMessage, byte? _webServiceLocationType, byte? _resultType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyWebServiceInquiryState",new {AWebServiceID=_webServiceID,AResultMessage=string.IsNullOrWhiteSpace(_resultMessage) ? _resultMessage : ReplaceArabicWithPersianChars(_resultMessage),AWebServiceLocationType=_webServiceLocationType,AResultType=_resultType} , timeout );
}

public ResultSet ModifyWebServiceInquiryState(Guid? _webServiceID, string _resultMessage, byte? _webServiceLocationType, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyWebServiceInquiryState(_webServiceID, _resultMessage, _webServiceLocationType, _resultType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetInsuranceInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_GetInsuranceInquiryState(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetInsuranceInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetInsuranceInquiryStateAsync(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetInsuranceInquiryState(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetInsuranceInquiryStateDapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetInsuranceInquiryState",new {AIndividualID=_individualID} , timeout );
}

public ResultSet GetInsuranceInquiryState(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetInsuranceInquiryState(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyInsurance

public System.Data.SqlClient.SqlCommand GetCommand_ModifyInsurance(bool? _isNewRecord, Guid? _individualID, string _insuranceType, string _bookletExpirationDate, string _insuranceId, string _insuredRelationType, string _relation, string _relationType, string _inquiryDate, string _lastWorkingMonth, string _workShopName, Guid? _id, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyInsurance", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AInsuranceType", IsOutput = false, Value = string.IsNullOrWhiteSpace(_insuranceType) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_insuranceType) }, 
					new Parameter { Name = "@ABookletExpirationDate", IsOutput = false, Value = string.IsNullOrWhiteSpace(_bookletExpirationDate) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_bookletExpirationDate) }, 
					new Parameter { Name = "@AInsuranceId", IsOutput = false, Value = string.IsNullOrWhiteSpace(_insuranceId) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_insuranceId) }, 
					new Parameter { Name = "@AInsuredRelationType", IsOutput = false, Value = string.IsNullOrWhiteSpace(_insuredRelationType) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_insuredRelationType) }, 
					new Parameter { Name = "@ARelation", IsOutput = false, Value = string.IsNullOrWhiteSpace(_relation) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_relation) }, 
					new Parameter { Name = "@ARelationType", IsOutput = false, Value = string.IsNullOrWhiteSpace(_relationType) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_relationType) }, 
					new Parameter { Name = "@AInquiryDate", IsOutput = false, Value = string.IsNullOrWhiteSpace(_inquiryDate) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_inquiryDate) }, 
					new Parameter { Name = "@ALastWorkingMonth", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastWorkingMonth) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastWorkingMonth) }, 
					new Parameter { Name = "@AWorkShopName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_workShopName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_workShopName) }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyInsuranceAsync(bool? _isNewRecord, Guid? _individualID, string _insuranceType, string _bookletExpirationDate, string _insuranceId, string _insuredRelationType, string _relation, string _relationType, string _inquiryDate, string _lastWorkingMonth, string _workShopName, Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyInsurance(_isNewRecord, _individualID, _insuranceType, _bookletExpirationDate, _insuranceId, _insuredRelationType, _relation, _relationType, _inquiryDate, _lastWorkingMonth, _workShopName, _id, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyInsuranceDapperAsync<T>(bool? _isNewRecord, Guid? _individualID, string _insuranceType, string _bookletExpirationDate, string _insuranceId, string _insuredRelationType, string _relation, string _relationType, string _inquiryDate, string _lastWorkingMonth, string _workShopName, Guid? _id, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyInsurance",new {AIsNewRecord=_isNewRecord,AIndividualID=_individualID,AInsuranceType=string.IsNullOrWhiteSpace(_insuranceType) ? _insuranceType : ReplaceArabicWithPersianChars(_insuranceType),ABookletExpirationDate=string.IsNullOrWhiteSpace(_bookletExpirationDate) ? _bookletExpirationDate : ReplaceArabicWithPersianChars(_bookletExpirationDate),AInsuranceId=string.IsNullOrWhiteSpace(_insuranceId) ? _insuranceId : ReplaceArabicWithPersianChars(_insuranceId),AInsuredRelationType=string.IsNullOrWhiteSpace(_insuredRelationType) ? _insuredRelationType : ReplaceArabicWithPersianChars(_insuredRelationType),ARelation=string.IsNullOrWhiteSpace(_relation) ? _relation : ReplaceArabicWithPersianChars(_relation),ARelationType=string.IsNullOrWhiteSpace(_relationType) ? _relationType : ReplaceArabicWithPersianChars(_relationType),AInquiryDate=string.IsNullOrWhiteSpace(_inquiryDate) ? _inquiryDate : ReplaceArabicWithPersianChars(_inquiryDate),ALastWorkingMonth=string.IsNullOrWhiteSpace(_lastWorkingMonth) ? _lastWorkingMonth : ReplaceArabicWithPersianChars(_lastWorkingMonth),AWorkShopName=string.IsNullOrWhiteSpace(_workShopName) ? _workShopName : ReplaceArabicWithPersianChars(_workShopName),AID=_id} , timeout );
}

public ResultSet ModifyInsurance(bool? _isNewRecord, Guid? _individualID, string _insuranceType, string _bookletExpirationDate, string _insuranceId, string _insuredRelationType, string _relation, string _relationType, string _inquiryDate, string _lastWorkingMonth, string _workShopName, Guid? _id, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyInsurance(_isNewRecord, _individualID, _insuranceType, _bookletExpirationDate, _insuranceId, _insuredRelationType, _relation, _relationType, _inquiryDate, _lastWorkingMonth, _workShopName, _id, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyInsuranceInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_ModifyInsuranceInquiryState(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyInsuranceInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyInsuranceInquiryStateAsync(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyInsuranceInquiryState(_isNewRecord, _id, _individualID, _resultType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyInsuranceInquiryStateDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyInsuranceInquiryState",new {AIsNewRecord=_isNewRecord,AID=_id,AIndividualID=_individualID,AResultType=_resultType} , timeout );
}

public ResultSet ModifyInsuranceInquiryState(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyInsuranceInquiryState(_isNewRecord, _id, _individualID, _resultType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetRetirementInformation

public System.Data.SqlClient.SqlCommand GetCommand_GetRetirementInformation(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetRetirementInformation", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetRetirementInformationAsync(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetRetirementInformation(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetRetirementInformationDapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetRetirementInformation",new {AIndividualID=_individualID} , timeout );
}

public ResultSet GetRetirementInformation(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetRetirementInformation(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAddressInquiryLogs

public System.Data.SqlClient.SqlCommand GetCommand_GetAddressInquiryLogs(Guid? _addressID, DateTime? _startDate, DateTime? _endDate, string _postalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetAddressInquiryLogs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AAddressID", IsOutput = false, Value = _addressID == null ? DBNull.Value : (object)_addressID }, 
					new Parameter { Name = "@AStartDate", IsOutput = false, Value = _startDate == null ? DBNull.Value : (object)_startDate }, 
					new Parameter { Name = "@AEndDate", IsOutput = false, Value = _endDate == null ? DBNull.Value : (object)_endDate }, 
					new Parameter { Name = "@APostalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_postalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_postalCode) }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAddressInquiryLogsAsync(Guid? _addressID, DateTime? _startDate, DateTime? _endDate, string _postalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetAddressInquiryLogs(_addressID, _startDate, _endDate, _postalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAddressInquiryLogsDapperAsync<T>(Guid? _addressID, DateTime? _startDate, DateTime? _endDate, string _postalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetAddressInquiryLogs",new {AAddressID=_addressID,AStartDate=_startDate,AEndDate=_endDate,APostalCode=string.IsNullOrWhiteSpace(_postalCode) ? _postalCode : ReplaceArabicWithPersianChars(_postalCode),AResultType=_resultType,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetAddressInquiryLogs(Guid? _addressID, DateTime? _startDate, DateTime? _endDate, string _postalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetAddressInquiryLogs(_addressID, _startDate, _endDate, _postalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetRetirementInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_GetRetirementInquiryState(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetRetirementInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetRetirementInquiryStateAsync(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetRetirementInquiryState(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetRetirementInquiryStateDapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetRetirementInquiryState",new {AIndividualID=_individualID} , timeout );
}

public ResultSet GetRetirementInquiryState(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetRetirementInquiryState(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetEducationalInquiryLogs

public System.Data.SqlClient.SqlCommand GetCommand_GetEducationalInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetEducationalInquiryLogs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AStartDate", IsOutput = false, Value = _startDate == null ? DBNull.Value : (object)_startDate }, 
					new Parameter { Name = "@AEndDate", IsOutput = false, Value = _endDate == null ? DBNull.Value : (object)_endDate }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetEducationalInquiryLogsAsync(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetEducationalInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetEducationalInquiryLogsDapperAsync<T>(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetEducationalInquiryLogs",new {AIndividualID=_individualID,AStartDate=_startDate,AEndDate=_endDate,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AResultType=_resultType,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetEducationalInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetEducationalInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyRetirementInformation

public System.Data.SqlClient.SqlCommand GetCommand_ModifyRetirementInformation(Guid? _individualID, bool? _isRetired, bool? _isEmployed, bool? _isRetiredReturnEmployed, int? _retiredDays, int? _employedDays, DateTime? _retiredDate, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyRetirementInformation", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AIsRetired", IsOutput = false, Value = _isRetired == null ? DBNull.Value : (object)_isRetired }, 
					new Parameter { Name = "@AIsEmployed", IsOutput = false, Value = _isEmployed == null ? DBNull.Value : (object)_isEmployed }, 
					new Parameter { Name = "@AIsRetiredReturnEmployed", IsOutput = false, Value = _isRetiredReturnEmployed == null ? DBNull.Value : (object)_isRetiredReturnEmployed }, 
					new Parameter { Name = "@ARetiredDays", IsOutput = false, Value = _retiredDays == null ? DBNull.Value : (object)_retiredDays }, 
					new Parameter { Name = "@AEmployedDays", IsOutput = false, Value = _employedDays == null ? DBNull.Value : (object)_employedDays }, 
					new Parameter { Name = "@ARetiredDate", IsOutput = false, Value = _retiredDate == null ? DBNull.Value : (object)_retiredDate }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyRetirementInformationAsync(Guid? _individualID, bool? _isRetired, bool? _isEmployed, bool? _isRetiredReturnEmployed, int? _retiredDays, int? _employedDays, DateTime? _retiredDate, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyRetirementInformation(_individualID, _isRetired, _isEmployed, _isRetiredReturnEmployed, _retiredDays, _employedDays, _retiredDate, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyRetirementInformationDapperAsync<T>(Guid? _individualID, bool? _isRetired, bool? _isEmployed, bool? _isRetiredReturnEmployed, int? _retiredDays, int? _employedDays, DateTime? _retiredDate, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyRetirementInformation",new {AIndividualID=_individualID,AIsRetired=_isRetired,AIsEmployed=_isEmployed,AIsRetiredReturnEmployed=_isRetiredReturnEmployed,ARetiredDays=_retiredDays,AEmployedDays=_employedDays,ARetiredDate=_retiredDate,ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifyRetirementInformation(Guid? _individualID, bool? _isRetired, bool? _isEmployed, bool? _isRetiredReturnEmployed, int? _retiredDays, int? _employedDays, DateTime? _retiredDate, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyRetirementInformation(_individualID, _isRetired, _isEmployed, _isRetiredReturnEmployed, _retiredDays, _employedDays, _retiredDate, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetRetirementInformationInquiryLogs

public System.Data.SqlClient.SqlCommand GetCommand_GetRetirementInformationInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetRetirementInformationInquiryLogs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AStartDate", IsOutput = false, Value = _startDate == null ? DBNull.Value : (object)_startDate }, 
					new Parameter { Name = "@AEndDate", IsOutput = false, Value = _endDate == null ? DBNull.Value : (object)_endDate }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetRetirementInformationInquiryLogsAsync(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetRetirementInformationInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetRetirementInformationInquiryLogsDapperAsync<T>(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetRetirementInformationInquiryLogs",new {AIndividualID=_individualID,AStartDate=_startDate,AEndDate=_endDate,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AResultType=_resultType,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetRetirementInformationInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetRetirementInformationInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyRetirementInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_ModifyRetirementInquiryState(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyRetirementInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyRetirementInquiryStateAsync(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyRetirementInquiryState(_isNewRecord, _id, _individualID, _resultType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyRetirementInquiryStateDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyRetirementInquiryState",new {AIsNewRecord=_isNewRecord,AID=_id,AIndividualID=_individualID,AResultType=_resultType} , timeout );
}

public ResultSet ModifyRetirementInquiryState(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyRetirementInquiryState(_isNewRecord, _id, _individualID, _resultType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSacrificialInquiryLogs

public System.Data.SqlClient.SqlCommand GetCommand_GetSacrificialInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetSacrificialInquiryLogs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AStartDate", IsOutput = false, Value = _startDate == null ? DBNull.Value : (object)_startDate }, 
					new Parameter { Name = "@AEndDate", IsOutput = false, Value = _endDate == null ? DBNull.Value : (object)_endDate }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSacrificialInquiryLogsAsync(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetSacrificialInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSacrificialInquiryLogsDapperAsync<T>(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetSacrificialInquiryLogs",new {AIndividualID=_individualID,AStartDate=_startDate,AEndDate=_endDate,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AResultType=_resultType,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetSacrificialInquiryLogs(Guid? _individualID, DateTime? _startDate, DateTime? _endDate, string _nationalCode, byte? _resultType, string _sortExp, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetSacrificialInquiryLogs(_individualID, _startDate, _endDate, _nationalCode, _resultType, _sortExp, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifySabteAsnadNationalCode

public System.Data.SqlClient.SqlCommand GetCommand_ModifySabteAsnadNationalCode(bool? _isNewRecord, Guid? _id, string _nationalCode, string _name, string _address, string _state, string _postCode, string _registerNumber, string _establishmentDate, string _registerDate, string _lastChangeDate, string _legalPersonType, string _registerUnit, string _residency, string _breakupDate, string _settleDate, bool? _isBranch, bool? _isBreakup, bool? _isSettle, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifySabteAsnadNationalCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_name) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_name) }, 
					new Parameter { Name = "@AAddress", IsOutput = false, Value = string.IsNullOrWhiteSpace(_address) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_address) }, 
					new Parameter { Name = "@AState", IsOutput = false, Value = string.IsNullOrWhiteSpace(_state) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_state) }, 
					new Parameter { Name = "@APostCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_postCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_postCode) }, 
					new Parameter { Name = "@ARegisterNumber", IsOutput = false, Value = string.IsNullOrWhiteSpace(_registerNumber) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_registerNumber) }, 
					new Parameter { Name = "@AEstablishmentDate", IsOutput = false, Value = string.IsNullOrWhiteSpace(_establishmentDate) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_establishmentDate) }, 
					new Parameter { Name = "@ARegisterDate", IsOutput = false, Value = string.IsNullOrWhiteSpace(_registerDate) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_registerDate) }, 
					new Parameter { Name = "@ALastChangeDate", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastChangeDate) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastChangeDate) }, 
					new Parameter { Name = "@ALegalPersonType", IsOutput = false, Value = string.IsNullOrWhiteSpace(_legalPersonType) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_legalPersonType) }, 
					new Parameter { Name = "@ARegisterUnit", IsOutput = false, Value = string.IsNullOrWhiteSpace(_registerUnit) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_registerUnit) }, 
					new Parameter { Name = "@AResidency", IsOutput = false, Value = string.IsNullOrWhiteSpace(_residency) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_residency) }, 
					new Parameter { Name = "@ABreakupDate", IsOutput = false, Value = string.IsNullOrWhiteSpace(_breakupDate) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_breakupDate) }, 
					new Parameter { Name = "@ASettleDate", IsOutput = false, Value = string.IsNullOrWhiteSpace(_settleDate) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_settleDate) }, 
					new Parameter { Name = "@AIsBranch", IsOutput = false, Value = _isBranch == null ? DBNull.Value : (object)_isBranch }, 
					new Parameter { Name = "@AIsBreakup", IsOutput = false, Value = _isBreakup == null ? DBNull.Value : (object)_isBreakup }, 
					new Parameter { Name = "@AIsSettle", IsOutput = false, Value = _isSettle == null ? DBNull.Value : (object)_isSettle }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifySabteAsnadNationalCodeAsync(bool? _isNewRecord, Guid? _id, string _nationalCode, string _name, string _address, string _state, string _postCode, string _registerNumber, string _establishmentDate, string _registerDate, string _lastChangeDate, string _legalPersonType, string _registerUnit, string _residency, string _breakupDate, string _settleDate, bool? _isBranch, bool? _isBreakup, bool? _isSettle, int? timeout = null)
{
	using(var cmd = GetCommand_ModifySabteAsnadNationalCode(_isNewRecord, _id, _nationalCode, _name, _address, _state, _postCode, _registerNumber, _establishmentDate, _registerDate, _lastChangeDate, _legalPersonType, _registerUnit, _residency, _breakupDate, _settleDate, _isBranch, _isBreakup, _isSettle, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifySabteAsnadNationalCodeDapperAsync<T>(bool? _isNewRecord, Guid? _id, string _nationalCode, string _name, string _address, string _state, string _postCode, string _registerNumber, string _establishmentDate, string _registerDate, string _lastChangeDate, string _legalPersonType, string _registerUnit, string _residency, string _breakupDate, string _settleDate, bool? _isBranch, bool? _isBreakup, bool? _isSettle, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifySabteAsnadNationalCode",new {AIsNewRecord=_isNewRecord,AID=_id,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AName=string.IsNullOrWhiteSpace(_name) ? _name : ReplaceArabicWithPersianChars(_name),AAddress=string.IsNullOrWhiteSpace(_address) ? _address : ReplaceArabicWithPersianChars(_address),AState=string.IsNullOrWhiteSpace(_state) ? _state : ReplaceArabicWithPersianChars(_state),APostCode=string.IsNullOrWhiteSpace(_postCode) ? _postCode : ReplaceArabicWithPersianChars(_postCode),ARegisterNumber=string.IsNullOrWhiteSpace(_registerNumber) ? _registerNumber : ReplaceArabicWithPersianChars(_registerNumber),AEstablishmentDate=string.IsNullOrWhiteSpace(_establishmentDate) ? _establishmentDate : ReplaceArabicWithPersianChars(_establishmentDate),ARegisterDate=string.IsNullOrWhiteSpace(_registerDate) ? _registerDate : ReplaceArabicWithPersianChars(_registerDate),ALastChangeDate=string.IsNullOrWhiteSpace(_lastChangeDate) ? _lastChangeDate : ReplaceArabicWithPersianChars(_lastChangeDate),ALegalPersonType=string.IsNullOrWhiteSpace(_legalPersonType) ? _legalPersonType : ReplaceArabicWithPersianChars(_legalPersonType),ARegisterUnit=string.IsNullOrWhiteSpace(_registerUnit) ? _registerUnit : ReplaceArabicWithPersianChars(_registerUnit),AResidency=string.IsNullOrWhiteSpace(_residency) ? _residency : ReplaceArabicWithPersianChars(_residency),ABreakupDate=string.IsNullOrWhiteSpace(_breakupDate) ? _breakupDate : ReplaceArabicWithPersianChars(_breakupDate),ASettleDate=string.IsNullOrWhiteSpace(_settleDate) ? _settleDate : ReplaceArabicWithPersianChars(_settleDate),AIsBranch=_isBranch,AIsBreakup=_isBreakup,AIsSettle=_isSettle} , timeout );
}

public ResultSet ModifySabteAsnadNationalCode(bool? _isNewRecord, Guid? _id, string _nationalCode, string _name, string _address, string _state, string _postCode, string _registerNumber, string _establishmentDate, string _registerDate, string _lastChangeDate, string _legalPersonType, string _registerUnit, string _residency, string _breakupDate, string _settleDate, bool? _isBranch, bool? _isBreakup, bool? _isSettle, int? timeout = null)
{
	using(var cmd = GetCommand_ModifySabteAsnadNationalCode(_isNewRecord, _id, _nationalCode, _name, _address, _state, _postCode, _registerNumber, _establishmentDate, _registerDate, _lastChangeDate, _legalPersonType, _registerUnit, _residency, _breakupDate, _settleDate, _isBranch, _isBreakup, _isSettle, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSacrificial

public System.Data.SqlClient.SqlCommand GetCommand_GetSacrificial(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetSacrificial", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSacrificialAsync(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetSacrificial(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSacrificialDapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetSacrificial",new {AIndividualID=_individualID} , timeout );
}

public ResultSet GetSacrificial(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_GetSacrificial(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSacrificials

public System.Data.SqlClient.SqlCommand GetCommand_GetSacrificials(Guid? _individualID, string _nationalCode, string _individualIDs, string _nationalCodes, string _firstName, string _lastName, byte? _gender, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetSacrificials", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
					new Parameter { Name = "@AIndividualIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_individualIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_individualIDs) }, 
					new Parameter { Name = "@ANationalCodes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCodes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCodes) }, 
					new Parameter { Name = "@AFirstName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_firstName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_firstName) }, 
					new Parameter { Name = "@ALastName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_lastName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_lastName) }, 
					new Parameter { Name = "@AGender", IsOutput = false, Value = _gender == null ? DBNull.Value : (object)_gender }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSacrificialsAsync(Guid? _individualID, string _nationalCode, string _individualIDs, string _nationalCodes, string _firstName, string _lastName, byte? _gender, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetSacrificials(_individualID, _nationalCode, _individualIDs, _nationalCodes, _firstName, _lastName, _gender, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSacrificialsDapperAsync<T>(Guid? _individualID, string _nationalCode, string _individualIDs, string _nationalCodes, string _firstName, string _lastName, byte? _gender, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetSacrificials",new {AIndividualID=_individualID,ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode),AIndividualIDs=string.IsNullOrWhiteSpace(_individualIDs) ? _individualIDs : ReplaceArabicWithPersianChars(_individualIDs),ANationalCodes=string.IsNullOrWhiteSpace(_nationalCodes) ? _nationalCodes : ReplaceArabicWithPersianChars(_nationalCodes),AFirstName=string.IsNullOrWhiteSpace(_firstName) ? _firstName : ReplaceArabicWithPersianChars(_firstName),ALastName=string.IsNullOrWhiteSpace(_lastName) ? _lastName : ReplaceArabicWithPersianChars(_lastName),AGender=_gender,APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetSacrificials(Guid? _individualID, string _nationalCode, string _individualIDs, string _nationalCodes, string _firstName, string _lastName, byte? _gender, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetSacrificials(_individualID, _nationalCode, _individualIDs, _nationalCodes, _firstName, _lastName, _gender, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifySacrificial

public System.Data.SqlClient.SqlCommand GetCommand_ModifySacrificial(Guid? _individualID, byte? _veteranPercent, byte? _parentVeteranPercent, byte? _spouseVeteranPercent, int? _captivityDurationDays, int? _parentCaptivityDurationDays, int? _spouseCaptivityDurationDays, string _sacrificialTypes, string _log, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifySacrificial", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AVeteranPercent", IsOutput = false, Value = _veteranPercent == null ? DBNull.Value : (object)_veteranPercent }, 
					new Parameter { Name = "@AParentVeteranPercent", IsOutput = false, Value = _parentVeteranPercent == null ? DBNull.Value : (object)_parentVeteranPercent }, 
					new Parameter { Name = "@ASpouseVeteranPercent", IsOutput = false, Value = _spouseVeteranPercent == null ? DBNull.Value : (object)_spouseVeteranPercent }, 
					new Parameter { Name = "@ACaptivityDurationDays", IsOutput = false, Value = _captivityDurationDays == null ? DBNull.Value : (object)_captivityDurationDays }, 
					new Parameter { Name = "@AParentCaptivityDurationDays", IsOutput = false, Value = _parentCaptivityDurationDays == null ? DBNull.Value : (object)_parentCaptivityDurationDays }, 
					new Parameter { Name = "@ASpouseCaptivityDurationDays", IsOutput = false, Value = _spouseCaptivityDurationDays == null ? DBNull.Value : (object)_spouseCaptivityDurationDays }, 
					new Parameter { Name = "@ASacrificialTypes", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sacrificialTypes) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sacrificialTypes) }, 
					new Parameter { Name = "@ALog", IsOutput = false, Value = string.IsNullOrWhiteSpace(_log) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_log) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifySacrificialAsync(Guid? _individualID, byte? _veteranPercent, byte? _parentVeteranPercent, byte? _spouseVeteranPercent, int? _captivityDurationDays, int? _parentCaptivityDurationDays, int? _spouseCaptivityDurationDays, string _sacrificialTypes, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifySacrificial(_individualID, _veteranPercent, _parentVeteranPercent, _spouseVeteranPercent, _captivityDurationDays, _parentCaptivityDurationDays, _spouseCaptivityDurationDays, _sacrificialTypes, _log, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifySacrificialDapperAsync<T>(Guid? _individualID, byte? _veteranPercent, byte? _parentVeteranPercent, byte? _spouseVeteranPercent, int? _captivityDurationDays, int? _parentCaptivityDurationDays, int? _spouseCaptivityDurationDays, string _sacrificialTypes, string _log, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifySacrificial",new {AIndividualID=_individualID,AVeteranPercent=_veteranPercent,AParentVeteranPercent=_parentVeteranPercent,ASpouseVeteranPercent=_spouseVeteranPercent,ACaptivityDurationDays=_captivityDurationDays,AParentCaptivityDurationDays=_parentCaptivityDurationDays,ASpouseCaptivityDurationDays=_spouseCaptivityDurationDays,ASacrificialTypes=string.IsNullOrWhiteSpace(_sacrificialTypes) ? _sacrificialTypes : ReplaceArabicWithPersianChars(_sacrificialTypes),ALog=string.IsNullOrWhiteSpace(_log) ? _log : ReplaceArabicWithPersianChars(_log)} , timeout );
}

public ResultSet ModifySacrificial(Guid? _individualID, byte? _veteranPercent, byte? _parentVeteranPercent, byte? _spouseVeteranPercent, int? _captivityDurationDays, int? _parentCaptivityDurationDays, int? _spouseCaptivityDurationDays, string _sacrificialTypes, string _log, int? timeout = null)
{
	using(var cmd = GetCommand_ModifySacrificial(_individualID, _veteranPercent, _parentVeteranPercent, _spouseVeteranPercent, _captivityDurationDays, _parentCaptivityDurationDays, _spouseCaptivityDurationDays, _sacrificialTypes, _log, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifySacrificialInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_ModifySacrificialInquiryState(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifySacrificialInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifySacrificialInquiryStateAsync(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifySacrificialInquiryState(_isNewRecord, _id, _individualID, _resultType, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifySacrificialInquiryStateDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifySacrificialInquiryState",new {AIsNewRecord=_isNewRecord,AID=_id,AIndividualID=_individualID,AResultType=_resultType} , timeout );
}

public ResultSet ModifySacrificialInquiryState(bool? _isNewRecord, Guid? _id, Guid? _individualID, byte? _resultType, int? timeout = null)
{
	using(var cmd = GetCommand_ModifySacrificialInquiryState(_isNewRecord, _id, _individualID, _resultType, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSacrificialTypes

public System.Data.SqlClient.SqlCommand GetCommand_GetSacrificialTypes(Guid? _sacrificialID, string _sacrificialIDs, int? _pageSize, int? _pageIndex, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetSacrificialTypes", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ASacrificialID", IsOutput = false, Value = _sacrificialID == null ? DBNull.Value : (object)_sacrificialID }, 
					new Parameter { Name = "@ASacrificialIDs", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sacrificialIDs) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sacrificialIDs) }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSacrificialTypesAsync(Guid? _sacrificialID, string _sacrificialIDs, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetSacrificialTypes(_sacrificialID, _sacrificialIDs, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSacrificialTypesDapperAsync<T>(Guid? _sacrificialID, string _sacrificialIDs, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetSacrificialTypes",new {ASacrificialID=_sacrificialID,ASacrificialIDs=string.IsNullOrWhiteSpace(_sacrificialIDs) ? _sacrificialIDs : ReplaceArabicWithPersianChars(_sacrificialIDs),APageSize=_pageSize,APageIndex=_pageIndex} , timeout );
}

public ResultSet GetSacrificialTypes(Guid? _sacrificialID, string _sacrificialIDs, int? _pageSize, int? _pageIndex, int? timeout = null)
{
	using(var cmd = GetCommand_GetSacrificialTypes(_sacrificialID, _sacrificialIDs, _pageSize, _pageIndex, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSabteAsnadNationalCodeByNationalCode

public System.Data.SqlClient.SqlCommand GetCommand_GetSabteAsnadNationalCodeByNationalCode(string _nationalCode, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spGetSabteAsnadNationalCodeByNationalCode", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ANationalCode", IsOutput = false, Value = string.IsNullOrWhiteSpace(_nationalCode) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_nationalCode) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSabteAsnadNationalCodeByNationalCodeAsync(string _nationalCode, int? timeout = null)
{
	using(var cmd = GetCommand_GetSabteAsnadNationalCodeByNationalCode(_nationalCode, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSabteAsnadNationalCodeByNationalCodeDapperAsync<T>(string _nationalCode, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spGetSabteAsnadNationalCodeByNationalCode",new {ANationalCode=string.IsNullOrWhiteSpace(_nationalCode) ? _nationalCode : ReplaceArabicWithPersianChars(_nationalCode)} , timeout );
}

public ResultSet GetSabteAsnadNationalCodeByNationalCode(string _nationalCode, int? timeout = null)
{
	using(var cmd = GetCommand_GetSabteAsnadNationalCodeByNationalCode(_nationalCode, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region ModifyDigitalSignatureInquiryState

public System.Data.SqlClient.SqlCommand GetCommand_ModifyDigitalSignatureInquiryState(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _attachmentID, byte? _resultType, string _redirectApiUrl, string _resultMessage, int? timeout = null)
{
var cmd = base.CreateCommand("inq.spModifyDigitalSignatureInquiryState", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIsNewRecord", IsOutput = false, Value = _isNewRecord == null ? DBNull.Value : (object)_isNewRecord }, 
					new Parameter { Name = "@AID", IsOutput = false, Value = _id == null ? DBNull.Value : (object)_id }, 
					new Parameter { Name = "@AApplicationID", IsOutput = false, Value = _applicationID == null ? DBNull.Value : (object)_applicationID }, 
					new Parameter { Name = "@AAttachmentID", IsOutput = false, Value = _attachmentID == null ? DBNull.Value : (object)_attachmentID }, 
					new Parameter { Name = "@AResultType", IsOutput = false, Value = _resultType == null ? DBNull.Value : (object)_resultType }, 
					new Parameter { Name = "@ARedirectApiUrl", IsOutput = false, Value = string.IsNullOrWhiteSpace(_redirectApiUrl) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_redirectApiUrl) }, 
					new Parameter { Name = "@AResultMessage", IsOutput = false, Value = string.IsNullOrWhiteSpace(_resultMessage) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_resultMessage) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> ModifyDigitalSignatureInquiryStateAsync(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _attachmentID, byte? _resultType, string _redirectApiUrl, string _resultMessage, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDigitalSignatureInquiryState(_isNewRecord, _id, _applicationID, _attachmentID, _resultType, _redirectApiUrl, _resultMessage, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> ModifyDigitalSignatureInquiryStateDapperAsync<T>(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _attachmentID, byte? _resultType, string _redirectApiUrl, string _resultMessage, int? timeout = null)
{
	return await  DapperQueryAsync<T>("inq.spModifyDigitalSignatureInquiryState",new {AIsNewRecord=_isNewRecord,AID=_id,AApplicationID=_applicationID,AAttachmentID=_attachmentID,AResultType=_resultType,ARedirectApiUrl=string.IsNullOrWhiteSpace(_redirectApiUrl) ? _redirectApiUrl : ReplaceArabicWithPersianChars(_redirectApiUrl),AResultMessage=string.IsNullOrWhiteSpace(_resultMessage) ? _resultMessage : ReplaceArabicWithPersianChars(_resultMessage)} , timeout );
}

public ResultSet ModifyDigitalSignatureInquiryState(bool? _isNewRecord, Guid? _id, Guid? _applicationID, Guid? _attachmentID, byte? _resultType, string _redirectApiUrl, string _resultMessage, int? timeout = null)
{
	using(var cmd = GetCommand_ModifyDigitalSignatureInquiryState(_isNewRecord, _id, _applicationID, _attachmentID, _resultType, _redirectApiUrl, _resultMessage, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

}

public class RPT: Database
{
#region Constructors
public RPT(string connectionString)
	:base(connectionString){}

public RPT(string connectionString, IModelValueBinder modelValueBinder)
	:base(connectionString, modelValueBinder){}
#endregion

#region GetDataBaseJobLog

public System.Data.SqlClient.SqlCommand GetCommand_GetDataBaseJobLog(string _jobName, byte? _jobStatus, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetDataBaseJobLog", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AJobName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_jobName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_jobName) }, 
					new Parameter { Name = "@AJobStatus", IsOutput = false, Value = _jobStatus == null ? DBNull.Value : (object)_jobStatus }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDataBaseJobLogAsync(string _jobName, byte? _jobStatus, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseJobLog(_jobName, _jobStatus, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDataBaseJobLogDapperAsync<T>(string _jobName, byte? _jobStatus, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetDataBaseJobLog",new {AJobName=string.IsNullOrWhiteSpace(_jobName) ? _jobName : ReplaceArabicWithPersianChars(_jobName),AJobStatus=_jobStatus,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetDataBaseJobLog(string _jobName, byte? _jobStatus, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseJobLog(_jobName, _jobStatus, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDataBaseJobLogs

public System.Data.SqlClient.SqlCommand GetCommand_GetDataBaseJobLogs(Guid? _jobID, Guid? _stepID, string _jobName, byte? _jobStatus, byte? _stepStatus, DateTime? _fromLastRunDateTime, DateTime? _toLastRunDateTime, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetDataBaseJobLogs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AJobID", IsOutput = false, Value = _jobID == null ? DBNull.Value : (object)_jobID }, 
					new Parameter { Name = "@AStepID", IsOutput = false, Value = _stepID == null ? DBNull.Value : (object)_stepID }, 
					new Parameter { Name = "@AJobName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_jobName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_jobName) }, 
					new Parameter { Name = "@AJobStatus", IsOutput = false, Value = _jobStatus == null ? DBNull.Value : (object)_jobStatus }, 
					new Parameter { Name = "@AStepStatus", IsOutput = false, Value = _stepStatus == null ? DBNull.Value : (object)_stepStatus }, 
					new Parameter { Name = "@AFromLastRunDateTime", IsOutput = false, Value = _fromLastRunDateTime == null ? DBNull.Value : (object)_fromLastRunDateTime }, 
					new Parameter { Name = "@AToLastRunDateTime", IsOutput = false, Value = _toLastRunDateTime == null ? DBNull.Value : (object)_toLastRunDateTime }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDataBaseJobLogsAsync(Guid? _jobID, Guid? _stepID, string _jobName, byte? _jobStatus, byte? _stepStatus, DateTime? _fromLastRunDateTime, DateTime? _toLastRunDateTime, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseJobLogs(_jobID, _stepID, _jobName, _jobStatus, _stepStatus, _fromLastRunDateTime, _toLastRunDateTime, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDataBaseJobLogsDapperAsync<T>(Guid? _jobID, Guid? _stepID, string _jobName, byte? _jobStatus, byte? _stepStatus, DateTime? _fromLastRunDateTime, DateTime? _toLastRunDateTime, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetDataBaseJobLogs",new {AJobID=_jobID,AStepID=_stepID,AJobName=string.IsNullOrWhiteSpace(_jobName) ? _jobName : ReplaceArabicWithPersianChars(_jobName),AJobStatus=_jobStatus,AStepStatus=_stepStatus,AFromLastRunDateTime=_fromLastRunDateTime,AToLastRunDateTime=_toLastRunDateTime,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetDataBaseJobLogs(Guid? _jobID, Guid? _stepID, string _jobName, byte? _jobStatus, byte? _stepStatus, DateTime? _fromLastRunDateTime, DateTime? _toLastRunDateTime, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseJobLogs(_jobID, _stepID, _jobName, _jobStatus, _stepStatus, _fromLastRunDateTime, _toLastRunDateTime, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetJobs

public System.Data.SqlClient.SqlCommand GetCommand_GetJobs(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetJobs", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetJobsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetJobs(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetJobsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetJobs",new {} , timeout );
}

public ResultSet GetJobs(int? timeout = null)
{
	using(var cmd = GetCommand_GetJobs(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region JobSteps

public System.Data.SqlClient.SqlCommand GetCommand_JobSteps(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spJobSteps", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> JobStepsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_JobSteps(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> JobStepsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spJobSteps",new {} , timeout );
}

public ResultSet JobSteps(int? timeout = null)
{
	using(var cmd = GetCommand_JobSteps(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetJobSteps

public System.Data.SqlClient.SqlCommand GetCommand_GetJobSteps(Guid? _jobID, int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetJobSteps", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AJobID", IsOutput = false, Value = _jobID == null ? DBNull.Value : (object)_jobID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetJobStepsAsync(Guid? _jobID, int? timeout = null)
{
	using(var cmd = GetCommand_GetJobSteps(_jobID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetJobStepsDapperAsync<T>(Guid? _jobID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetJobSteps",new {AJobID=_jobID} , timeout );
}

public ResultSet GetJobSteps(Guid? _jobID, int? timeout = null)
{
	using(var cmd = GetCommand_GetJobSteps(_jobID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetOrganizationDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetOrganizationDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetOrganizationDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetOrganizationDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetOrganizationDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetOrganizationDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetOrganizationDatabaseProblems",new {} , timeout );
}

public ResultSet GetOrganizationDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetOrganizationDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTicketCountIncludeAnswer

public System.Data.SqlClient.SqlCommand GetCommand_GetTicketCountIncludeAnswer(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.SpGetTicketCountIncludeAnswer", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTicketCountIncludeAnswerAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketCountIncludeAnswer(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTicketCountIncludeAnswerDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.SpGetTicketCountIncludeAnswer",new {} , timeout );
}

public ResultSet GetTicketCountIncludeAnswer(int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketCountIncludeAnswer(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSalaryDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetSalaryDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetSalaryDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSalaryDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetSalaryDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSalaryDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetSalaryDatabaseProblems",new {} , timeout );
}

public ResultSet GetSalaryDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetSalaryDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetTicketCountDontAnswer

public System.Data.SqlClient.SqlCommand GetCommand_GetTicketCountDontAnswer(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.SpGetTicketCountDontAnswer", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetTicketCountDontAnswerAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketCountDontAnswer(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetTicketCountDontAnswerDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.SpGetTicketCountDontAnswer",new {} , timeout );
}

public ResultSet GetTicketCountDontAnswer(int? timeout = null)
{
	using(var cmd = GetCommand_GetTicketCountDontAnswer(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetServiceDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetServiceDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetServiceDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetServiceDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetServiceDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetServiceDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetServiceDatabaseProblems",new {} , timeout );
}

public ResultSet GetServiceDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetServiceDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetAmoozeshDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetAmoozeshDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetAmoozeshDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetAmoozeshDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetAmoozeshDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetAmoozeshDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetAmoozeshDatabaseProblems",new {} , timeout );
}

public ResultSet GetAmoozeshDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetAmoozeshDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetEstekhdamDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetEstekhdamDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetEstekhdamDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetEstekhdamDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetEstekhdamDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetEstekhdamDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetEstekhdamDatabaseProblems",new {} , timeout );
}

public ResultSet GetEstekhdamDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetEstekhdamDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSinaMobileDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetSinaMobileDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetSinaMobileDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSinaMobileDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetSinaMobileDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSinaMobileDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetSinaMobileDatabaseProblems",new {} , timeout );
}

public ResultSet GetSinaMobileDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetSinaMobileDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetKanoonDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetKanoonDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetKanoonDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetKanoonDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetKanoonDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetKanoonDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetKanoonDatabaseProblems",new {} , timeout );
}

public ResultSet GetKanoonDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetKanoonDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetCouncilDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetCouncilDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetCouncilDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetCouncilDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetCouncilDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetCouncilDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetCouncilDatabaseProblems",new {} , timeout );
}

public ResultSet GetCouncilDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetCouncilDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSsoDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetSsoDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetSsoDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSsoDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetSsoDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSsoDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetSsoDatabaseProblems",new {} , timeout );
}

public ResultSet GetSsoDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetSsoDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSurveyDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetSurveyDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetSurveyDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSurveyDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetSurveyDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSurveyDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetSurveyDatabaseProblems",new {} , timeout );
}

public ResultSet GetSurveyDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetSurveyDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetReportingDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetReportingDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetReportingDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetReportingDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetReportingDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetReportingDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetReportingDatabaseProblems",new {} , timeout );
}

public ResultSet GetReportingDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetReportingDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetLicenceDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetLicenceDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetLicenceDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetLicenceDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetLicenceDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetLicenceDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetLicenceDatabaseProblems",new {} , timeout );
}

public ResultSet GetLicenceDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetLicenceDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetDataBaseBackup

public System.Data.SqlClient.SqlCommand GetCommand_GetDataBaseBackup(string _dataBaseName, byte? _backupType, DateTime? _backupStartDate, DateTime? _backupFinishDate, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetDataBaseBackup", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@ADataBaseName", IsOutput = false, Value = string.IsNullOrWhiteSpace(_dataBaseName) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_dataBaseName) }, 
					new Parameter { Name = "@ABackupType", IsOutput = false, Value = _backupType == null ? DBNull.Value : (object)_backupType }, 
					new Parameter { Name = "@ABackupStartDate", IsOutput = false, Value = _backupStartDate == null ? DBNull.Value : (object)_backupStartDate }, 
					new Parameter { Name = "@ABackupFinishDate", IsOutput = false, Value = _backupFinishDate == null ? DBNull.Value : (object)_backupFinishDate }, 
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetDataBaseBackupAsync(string _dataBaseName, byte? _backupType, DateTime? _backupStartDate, DateTime? _backupFinishDate, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseBackup(_dataBaseName, _backupType, _backupStartDate, _backupFinishDate, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetDataBaseBackupDapperAsync<T>(string _dataBaseName, byte? _backupType, DateTime? _backupStartDate, DateTime? _backupFinishDate, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetDataBaseBackup",new {ADataBaseName=string.IsNullOrWhiteSpace(_dataBaseName) ? _dataBaseName : ReplaceArabicWithPersianChars(_dataBaseName),ABackupType=_backupType,ABackupStartDate=_backupStartDate,ABackupFinishDate=_backupFinishDate,APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetDataBaseBackup(string _dataBaseName, byte? _backupType, DateTime? _backupStartDate, DateTime? _backupFinishDate, int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetDataBaseBackup(_dataBaseName, _backupType, _backupStartDate, _backupFinishDate, _pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetSakhtarDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetSakhtarDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetSakhtarDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetSakhtarDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetSakhtarDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetSakhtarDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetSakhtarDatabaseProblems",new {} , timeout );
}

public ResultSet GetSakhtarDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetSakhtarDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetManagerDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetManagerDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetManagerDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetManagerDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetManagerDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetManagerDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetManagerDatabaseProblems",new {} , timeout );
}

public ResultSet GetManagerDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetManagerDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetJobDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetJobDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetJobDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetJobDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetJobDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetJobDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetJobDatabaseProblems",new {} , timeout );
}

public ResultSet GetJobDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetJobDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPaknaDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetPaknaDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetPaknaDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPaknaDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetPaknaDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPaknaDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetPaknaDatabaseProblems",new {} , timeout );
}

public ResultSet GetPaknaDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetPaknaDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetPardakhtDatabaseProblems

public System.Data.SqlClient.SqlCommand GetCommand_GetPardakhtDatabaseProblems(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetPardakhtDatabaseProblems", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetPardakhtDatabaseProblemsAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetPardakhtDatabaseProblems(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetPardakhtDatabaseProblemsDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetPardakhtDatabaseProblems",new {} , timeout );
}

public ResultSet GetPardakhtDatabaseProblems(int? timeout = null)
{
	using(var cmd = GetCommand_GetPardakhtDatabaseProblems(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region GetBackupStatus

public System.Data.SqlClient.SqlCommand GetCommand_GetBackupStatus(int? timeout = null)
{
var cmd = base.CreateCommand("rpt.spGetBackupStatus", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetBackupStatusAsync(int? timeout = null)
{
	using(var cmd = GetCommand_GetBackupStatus(timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetBackupStatusDapperAsync<T>(int? timeout = null)
{
	return await  DapperQueryAsync<T>("rpt.spGetBackupStatus",new {} , timeout );
}

public ResultSet GetBackupStatus(int? timeout = null)
{
	using(var cmd = GetCommand_GetBackupStatus(timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

}

public class CHR: Database
{
#region Constructors
public CHR(string connectionString)
	:base(connectionString){}

public CHR(string connectionString, IModelValueBinder modelValueBinder)
	:base(connectionString, modelValueBinder){}
#endregion

#region GetUnitsForExcelInquiry

public System.Data.SqlClient.SqlCommand GetCommand_GetUnitsForExcelInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
var cmd = base.CreateCommand("chr.spGetUnitsForExcelInquiry", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@APageSize", IsOutput = false, Value = _pageSize == null ? DBNull.Value : (object)_pageSize }, 
					new Parameter { Name = "@APageIndex", IsOutput = false, Value = _pageIndex == null ? DBNull.Value : (object)_pageIndex }, 
					new Parameter { Name = "@ASortExp", IsOutput = false, Value = string.IsNullOrWhiteSpace(_sortExp) ? DBNull.Value : (object)ReplaceArabicWithPersianChars(_sortExp) }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> GetUnitsForExcelInquiryAsync(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetUnitsForExcelInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> GetUnitsForExcelInquiryDapperAsync<T>(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	return await  DapperQueryAsync<T>("chr.spGetUnitsForExcelInquiry",new {APageSize=_pageSize,APageIndex=_pageIndex,ASortExp=string.IsNullOrWhiteSpace(_sortExp) ? _sortExp : ReplaceArabicWithPersianChars(_sortExp)} , timeout );
}

public ResultSet GetUnitsForExcelInquiry(int? _pageSize, int? _pageIndex, string _sortExp, int? timeout = null)
{
	using(var cmd = GetCommand_GetUnitsForExcelInquiry(_pageSize, _pageIndex, _sortExp, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

#region DeletesEducational2

public System.Data.SqlClient.SqlCommand GetCommand_DeletesEducational2(Guid? _individualID, int? timeout = null)
{
var cmd = base.CreateCommand("chr.spDeletesEducational2", 
	System.Data.CommandType.StoredProcedure, 
	new Parameter[]{
					new Parameter { Name = "@AIndividualID", IsOutput = false, Value = _individualID == null ? DBNull.Value : (object)_individualID }, 
	});

			if (timeout != null)
				cmd.CommandTimeout = (int)timeout;
			return cmd;
}

public async Task<ResultSet> DeletesEducational2Async(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_DeletesEducational2(_individualID, timeout))
{
	return new ResultSet(cmd, await ExecuteAsync(cmd), _modelValueBinder);
}
}

public async Task<AppCore.Result<IEnumerable<T>>> DeletesEducational2DapperAsync<T>(Guid? _individualID, int? timeout = null)
{
	return await  DapperQueryAsync<T>("chr.spDeletesEducational2",new {AIndividualID=_individualID} , timeout );
}

public ResultSet DeletesEducational2(Guid? _individualID, int? timeout = null)
{
	using(var cmd = GetCommand_DeletesEducational2(_individualID, timeout))
{
	return new ResultSet(cmd, Execute(cmd), _modelValueBinder);
}
}

#endregion

}

}
